<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Maxwell</title>
  
  <subtitle>site space</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-01-19T12:46:01.183Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Max well</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OpenCV----YOLOv3目标检测</title>
    <link href="http://example.com/2022/01/10/opencv/"/>
    <id>http://example.com/2022/01/10/opencv/</id>
    <published>2022-01-10T12:50:21.000Z</published>
    <updated>2022-01-19T12:46:01.183Z</updated>
    
    <content type="html"><![CDATA[<p>题目要求：了解opencv的DNN库，给定一张自然场景图片，使用训练好的yolov3模型，进行目标检测结果输出。</p><blockquote><p>分析：<br>1）opencv的DNN模块集成了很多深度学习模型，包括人脸检测、图像分类、分割、目标检测等，集成了Pytorch、tensorflow、paddlepaddle等模型框架（参看代码库<a href="https://github.com/opencv/opencv/tree/master/samples/dnn">OpenCV/dnn</a>）<br>2）深度学习推理模型一般步骤：加载模型，包括配置文件和权重文件；输入图像预处理，转换成模型可接受的文件类型和尺寸；模型预测后处理，对于目标检测，主要是NMS后处理方法；</p></blockquote><ul><li>结果展示：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">./bin/yolov3Predict -h</span><br><span class="line"><span class="comment">#######</span></span><br><span class="line">Usage: yolov3Predict [params] image confThreshold nmsThresshold </span><br><span class="line"></span><br><span class="line">        -?, -h, --<span class="built_in">help</span>, --usage (value:<span class="literal">true</span>)</span><br><span class="line">                opecv based deep learining demo</span><br><span class="line"></span><br><span class="line">        image</span><br><span class="line">                Image to process</span><br><span class="line">        confThreshold (value:0.5)</span><br><span class="line">                confidence threshold, default 0.5</span><br><span class="line">        nmsThresshold (value:0.3)</span><br><span class="line">                nms threshold, default 0.3</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/yolov3Predict data/test.jpg</span><br></pre></td></tr></table></figure><p><img src="/2022/01/10/opencv/output.jpg" alt="output"></p><span id="more"></span><ul><li>代码示例：</li></ul><p>yolov3Predict.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//yolov3Predict.cpp</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@File          :yolov3Predict.cpp</span></span><br><span class="line"><span class="comment">@Description:  :</span></span><br><span class="line"><span class="comment">@Date          :2022/1/9 20:02:10</span></span><br><span class="line"><span class="comment">@Author        :</span></span><br><span class="line"><span class="comment">@version       :1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/dnn.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> dnn;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;utils.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// define command parse</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">parseParam</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv, <span class="keyword">const</span> <span class="keyword">char</span>* keys, Mat&amp; img, <span class="keyword">float</span>&amp; confThreshold, <span class="keyword">float</span>&amp; nmsThresshold)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : command parse function</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        int argc : main argc</span></span><br><span class="line"><span class="comment">        char** argv: main argv</span></span><br><span class="line"><span class="comment">        keys : command parse keys</span></span><br><span class="line"><span class="comment">        img : the image to read</span></span><br><span class="line"><span class="comment">        confThreshold : confidence threshold setting</span></span><br><span class="line"><span class="comment">        nmsThresshold : nms threshold setting</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        (ref returns)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function">CommandLineParser <span class="title">parser</span><span class="params">(argc, argv, keys)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(parser.<span class="built_in">has</span>(<span class="string">&quot;help&quot;</span>))&#123;</span><br><span class="line">        parser.<span class="built_in">printMessage</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// check commoand format</span></span><br><span class="line">    <span class="keyword">if</span>(!parser.<span class="built_in">check</span>())&#123;</span><br><span class="line">        parser.<span class="built_in">printErrors</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// get image</span></span><br><span class="line">    String imgFile = parser.get&lt;String&gt;(<span class="number">0</span>);</span><br><span class="line">    img = <span class="built_in">imread</span>(imgFile);</span><br><span class="line">    <span class="keyword">if</span>(img.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;error to load test image. &quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// get confidence threshold</span></span><br><span class="line">    confThreshold = parser.get&lt;<span class="keyword">float</span>&gt;(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// get nms threshold</span></span><br><span class="line">    nmsThresshold = parser.get&lt;<span class="keyword">float</span>&gt;(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* keys  = &#123;</span><br><span class="line">        <span class="string">&quot;&#123;help h usage ? | | opecv based deep learining demo&#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;@image | | Image to process&#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;@confThreshold | 0.5 | confidence threshold, default 0.5&#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;@nmsThresshold | 0.3 | nms threshold, default 0.3&#125;&quot;</span>&#125;;</span><br><span class="line">    Mat img, blob;</span><br><span class="line">    <span class="keyword">float</span> confThreshold, nmsThresshold;</span><br><span class="line">    <span class="comment">// update data</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">parseParam</span>(argc, argv, keys, img, confThreshold, nmsThresshold))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// load model</span></span><br><span class="line">    string classFile = <span class="string">&quot;model/coco.names&quot;</span>;</span><br><span class="line">    <span class="function">ifstream <span class="title">fin</span><span class="params">(classFile.c_str())</span></span>;</span><br><span class="line">    string line;</span><br><span class="line">    vector&lt;string&gt; classes;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">getline</span>(fin, line))&#123;</span><br><span class="line">        classes.<span class="built_in">push_back</span>(line);</span><br><span class="line">    &#125;</span><br><span class="line">    string modelCfg = <span class="string">&quot;model/yolov3.cfg&quot;</span>;</span><br><span class="line">    string modelWeg = <span class="string">&quot;model/yolov3.weights&quot;</span>;</span><br><span class="line">    Net yolov3 = <span class="built_in">readNetFromDarknet</span>(modelCfg, modelWeg);</span><br><span class="line">    yolov3.<span class="built_in">setPreferableBackend</span>(DNN_BACKEND_OPENCV);</span><br><span class="line">    yolov3.<span class="built_in">setPreferableTarget</span>(DNN_TARGET_CPU);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// convert image to blob format</span></span><br><span class="line">    <span class="built_in">blobFromImage</span>(img, blob, <span class="number">1</span>/<span class="number">255.0</span>, <span class="built_in">Size</span>(<span class="number">416</span>, <span class="number">416</span>), <span class="built_in">Scalar</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    yolov3.<span class="built_in">setInput</span>(blob);</span><br><span class="line">    vector&lt;Mat&gt; outputs;</span><br><span class="line">    <span class="comment">// model predict</span></span><br><span class="line">    yolov3.forward(outputs, <span class="built_in">getoutputsName</span>(yolov3));</span><br><span class="line">    <span class="comment">// post process (nms)</span></span><br><span class="line">    <span class="built_in">postProcess</span>(img, outputs, classes, confThreshold, nmsThresshold);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// time cost</span></span><br><span class="line">    vector&lt;<span class="keyword">double</span>&gt; layersTime;</span><br><span class="line">    <span class="keyword">double</span> freq = <span class="built_in">getTickFrequency</span>() / <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">double</span> t = yolov3.<span class="built_in">getPerfProfile</span>(layersTime) / freq;</span><br><span class="line">    string label = format(<span class="string">&quot;time consuming: %.2f&quot;</span>, t);</span><br><span class="line">    cout &lt;&lt; label &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;input&quot;</span>, img);</span><br><span class="line">    <span class="built_in">imwrite</span>(<span class="string">&quot;output.jpg&quot;</span>, img);</span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>utils.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@File          :utils.cpp</span></span><br><span class="line"><span class="comment">@Description:  :</span></span><br><span class="line"><span class="comment">@Date          :2022/1/9 20:11:10</span></span><br><span class="line"><span class="comment">@Author        :</span></span><br><span class="line"><span class="comment">@version       :1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/core/utility.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/dnn.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> dnn;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;utils.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">Scalar <span class="title">randColor</span><span class="params">(RNG&amp; rng)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : generate randow color</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        rng : random number generator object</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        Sacalar() : BGR scalar</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">auto</span> iColor = (<span class="keyword">unsigned</span>)rng;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Scalar</span>(iColor&amp;<span class="number">255</span>, (iColor &gt;&gt; <span class="number">8</span>)&amp;<span class="number">255</span>, (iColor &gt;&gt; <span class="number">16</span>)&amp;<span class="number">255</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get model output name</span></span><br><span class="line"><span class="function">vector&lt;string&gt; <span class="title">getoutputsName</span><span class="params">(Net&amp; net)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : get model outputs name</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        Net : deep learning model</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        names : model output names</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">static</span> vector&lt;string&gt; names;</span><br><span class="line">    <span class="keyword">if</span>(names.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="comment">// get output layer idx</span></span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; outLayers = net.<span class="built_in">getUnconnectedOutLayers</span>();</span><br><span class="line">        <span class="comment">// get all namenames</span></span><br><span class="line">        vector&lt;string&gt; layersName = net.<span class="built_in">getLayerNames</span>();</span><br><span class="line">        names.<span class="built_in">resize</span>(outLayers.<span class="built_in">size</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; outLayers.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            names[i] = layersName[outLayers[i] - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> names;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// draw prdict result on image</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawPred</span><span class="params">(vector&lt;string&gt; classes, <span class="keyword">int</span> classId, <span class="keyword">float</span> conf, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom, Mat&amp; frame)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : drop boxes and confidence on frame</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        classes : the total classes list</span></span><br><span class="line"><span class="comment">        classId : the predicted class id</span></span><br><span class="line"><span class="comment">        conf : predicted confidence</span></span><br><span class="line"><span class="comment">        left : left location</span></span><br><span class="line"><span class="comment">        top : top locatioin</span></span><br><span class="line"><span class="comment">        right : right location</span></span><br><span class="line"><span class="comment">        bottom : bottom location</span></span><br><span class="line"><span class="comment">        frame : the image to draw</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        (ref return)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// draw rectanle for object detected</span></span><br><span class="line">    <span class="built_in">rectangle</span>(frame, <span class="built_in">Point</span>(left, top), <span class="built_in">Point</span>(right, bottom), <span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// set rectangle for label show</span></span><br><span class="line">    string conf_label = format(<span class="string">&quot;%.2f&quot;</span>, conf);</span><br><span class="line">    string label = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(!classes.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        label = classes[classId] + <span class="string">&quot; : &quot;</span> + conf_label;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> baseLine;</span><br><span class="line">    Size labelSize = <span class="built_in">getTextSize</span>(label, FONT_HERSHEY_SIMPLEX, <span class="number">0.5</span>, <span class="number">1</span>, &amp;baseLine);</span><br><span class="line">    top = <span class="built_in">max</span>(top, labelSize.height);</span><br><span class="line">    <span class="built_in">rectangle</span>(frame, <span class="built_in">Point</span>(left, top - labelSize.height), <span class="built_in">Point</span>(left + labelSize.width, top+baseLine), <span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), FILLED);</span><br><span class="line">    <span class="comment">// put label text on image</span></span><br><span class="line">    <span class="built_in">putText</span>(frame, label, <span class="built_in">Point</span>(left, top), FONT_HERSHEY_SIMPLEX, <span class="number">0.5</span>, <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">1</span>, LINE_AA);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// post process (NMS) for object detection</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postProcess</span><span class="params">(Mat&amp; frame, vector&lt;Mat&gt;&amp; outs, vector&lt;string&gt; classes, <span class="keyword">float</span> confThreshold, <span class="keyword">float</span> nmsThresshold)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : post process predict result to get suitable box to display</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        frame : image to process and return</span></span><br><span class="line"><span class="comment">        outs : predicts result</span></span><br><span class="line"><span class="comment">        classes : the total classes list</span></span><br><span class="line"><span class="comment">        confThreshold : confidence threshold setting</span></span><br><span class="line"><span class="comment">        nmsThresshold : nms threshold setting</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        (ref return)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// get classId, confidence and boxes</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; classIds;</span><br><span class="line">    vector&lt;<span class="keyword">float</span>&gt; confs;</span><br><span class="line">    vector&lt;Rect&gt; boxes;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; outs.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="keyword">float</span>* data = (<span class="keyword">float</span>*) outs[i].data;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; outs[i].rows; j++, data += outs[i].cols)&#123;</span><br><span class="line">            <span class="comment">// get socres for detectd class and scores</span></span><br><span class="line">            Mat scores = outs[i].<span class="built_in">row</span>(j).<span class="built_in">colRange</span>(<span class="number">5</span>, outs[i].cols);</span><br><span class="line">            Point classIdPoint;</span><br><span class="line">            <span class="keyword">double</span> conf;</span><br><span class="line">            <span class="comment">// get min max value in socores with idx</span></span><br><span class="line">            <span class="built_in">minMaxLoc</span>(scores, <span class="number">0</span>, &amp;conf, <span class="number">0</span>, &amp;classIdPoint);</span><br><span class="line">            <span class="comment">// filter too small confidence</span></span><br><span class="line">            <span class="keyword">if</span>(conf &gt; confThreshold)&#123;</span><br><span class="line">                <span class="keyword">int</span> x = (<span class="keyword">int</span>) (data[<span class="number">0</span>]*frame.cols);</span><br><span class="line">                <span class="keyword">int</span> y = (<span class="keyword">int</span>) (data[<span class="number">1</span>]*frame.rows);</span><br><span class="line">                <span class="keyword">int</span> w = (<span class="keyword">int</span>) (data[<span class="number">2</span>]*frame.cols);</span><br><span class="line">                <span class="keyword">int</span> h = (<span class="keyword">int</span>) (data[<span class="number">3</span>]*frame.rows);</span><br><span class="line">                <span class="keyword">int</span> left = x - w / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">int</span> top = y - h / <span class="number">2</span>;</span><br><span class="line">                classIds.<span class="built_in">push_back</span>(classIdPoint.x);</span><br><span class="line">                confs.<span class="built_in">push_back</span>((<span class="keyword">float</span>)conf);</span><br><span class="line">                boxes.<span class="built_in">push_back</span>(<span class="built_in">Rect</span>(left, top, w, h));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// NMS operation</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; idxs;</span><br><span class="line">    <span class="built_in">NMSBoxes</span>(boxes, confs, confThreshold, nmsThresshold, idxs);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; idxs.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> idx = idxs[i];</span><br><span class="line">        Rect box = boxes[idx];</span><br><span class="line">        <span class="built_in">drawPred</span>(classes, classIds[idx], confs[idx], box.x, box.y, box.x+box.width, box.y+box.height, frame);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;题目要求：了解opencv的DNN库，给定一张自然场景图片，使用训练好的yolov3模型，进行目标检测结果输出。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;分析：&lt;br&gt;1）opencv的DNN模块集成了很多深度学习模型，包括人脸检测、图像分类、分割、目标检测等，集成了Pytorch、tensorflow、paddlepaddle等模型框架（参看代码库&lt;a href=&quot;https://github.com/opencv/opencv/tree/master/samples/dnn&quot;&gt;OpenCV/dnn&lt;/a&gt;）&lt;br&gt;2）深度学习推理模型一般步骤：加载模型，包括配置文件和权重文件；输入图像预处理，转换成模型可接受的文件类型和尺寸；模型预测后处理，对于目标检测，主要是NMS后处理方法；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;结果展示：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./bin/yolov3Predict -h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#######&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Usage: yolov3Predict [params] image confThreshold nmsThresshold &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        -?, -h, --&lt;span class=&quot;built_in&quot;&gt;help&lt;/span&gt;, --usage (value:&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                opecv based deep learining demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        image&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Image to process&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        confThreshold (value:0.5)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                confidence threshold, default 0.5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        nmsThresshold (value:0.3)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                nms threshold, default 0.3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./bin/yolov3Predict data/test.jpg&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/2022/01/10/opencv/output.jpg&quot; alt=&quot;output&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="opencv" scheme="http://example.com/tags/opencv/"/>
    
    <category term="dnn" scheme="http://example.com/tags/dnn/"/>
    
    <category term="yolov3" scheme="http://example.com/tags/yolov3/"/>
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Outline for topics</title>
    <link href="http://example.com/2022/01/10/topics/"/>
    <id>http://example.com/2022/01/10/topics/</id>
    <published>2022-01-10T12:50:21.000Z</published>
    <updated>2022-01-15T10:45:20.779Z</updated>
    
    <content type="html"><![CDATA[<p>OpenCV : <a href="https://blog.csdn.net/qq_37172182/article/details/122399552">OpenCV—-YOLOv3目标检测模型推理</a></p><p>OpenCV : <a href="https://blog.csdn.net/qq_37172182/article/details/122147856">OpenCV—-简单对象分类</a></p><p>OpenCV : <a href="https://blog.csdn.net/qq_37172182/article/details/122088583">OpenCV—-简单目标提取和分割</a></p><p>OpenCV : <a href="https://blog.csdn.net/qq_37172182/article/details/122042016">OpenCV—-GUI设计示例</a></p><span id="more"></span><p>OpenCV : <a href="https://blog.csdn.net/qq_37172182/article/details/101670602">Caffe配置与编译—–OpenCV-3.4.1配置及编译</a></p><p>OpenCV : <a href="https://blog.csdn.net/qq_37172182/article/details/88376552">TensorFlow实战10GoogleLeNet进阶（Python调用OpenCV库实现图像识别）</a></p><p>VSCode : <a href="https://blog.csdn.net/qq_37172182/article/details/121933824">VSCode配置之Opencv4x终极奥义</a></p><p>VSCode : <a href="https://blog.csdn.net/qq_37172182/article/details/109400082">VSCode——C++编译环境极简配置方法（简单到没没朋友(^)/）</a></p><p>VSCode : <a href="https://blog.csdn.net/qq_37172182/article/details/103833812">VSCode导入Torch后出现红色下划线警告</a></p><p>VSCode : <a href="https://blog.csdn.net/qq_37172182/article/details/102943537">VSCode中文输出乱码问题解决方法</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/121879045">C++高级编程—-剖析（profile）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/121878550">C++高级编程—-对象池实例</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/121795146">C++高级编程—-多线程编程</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/121720315">C++高级编程—-模板的高级特性</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/121687980">C++高级编程—-扩展STL</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/109400082">VSCode——C++编译环境极简配置方法（简单到没没朋友(^)/）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/105747813">C++高级编程—-熟悉类和对象</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/90450443">数据结构与算法分析-C++描述第10章算法设计技巧（回溯算法之公路收费点重建问题）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/90343491">数据结构与算法分析-C++描述第10章算法设计技巧（随机化算法之跳跃表）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/90311964">数据结构与算法分析-C++描述第10章算法设计技巧（动态规整之最优二叉搜索树）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/90273978">数据结构与算法分析-C++描述第10章算法设计技巧（分治算法之最近点对问题）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/90244412">数据结构与算法分析-C++描述第10章算法设计技巧（贪心算法之霍夫曼编码）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/90137584">数据结构与算法分析-C++描述第9章图论算法（欧拉回路问题之Fleury算法）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/90051584">数据结构与算法分析-C++描述第9章图论算法（最小生成树之Kruskal算法）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/90024195">数据结构与算法分析-C++描述第9章图论算法（最小生成树之Prim算法）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/89599222">数据结构与算法分析-C++描述第9章图论算法（字梯游戏之Dijkstra算法应用）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/89555581">数据结构与算法分析-C++描述第9章图论算法（全局点最短路径问题之Floyd算法动态规整）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/89473236">数据结构与算法分析-C++描述第9章图论算法（单源最短路径问题之Dijkstra算法邻接表实现）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/89418211">数据结构与算法分析-C++描述第9章图论算法（有向图之广度优先搜索和深度优先探索）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/89406034">数据结构与算法分析-C++描述第9章图论算法（无向图之广度优先搜索和深度优先探索）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/89379151">数据结构与算法分析-C++描述第8章迷宫生成（不相交类的一个应用）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/89358846">数据结构与算法分析-C++描述第8章不相交集类（disjointSet）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/89348573">数据结构与算法分析-C++描述第7章桶排序（bucketSort）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/89299019">数据结构与算法分析-C++描述第7章间接排序（indirectionSort）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/89293838">数据结构与算法分析-C++描述第7章快速排序（quickSort）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/89293214">数据结构与算法分析-C++描述第7章归并排序（mergeSort）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/89288685">数据结构与算法分析-C++描述第7章堆排序（heapSort）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/89284336">数据结构与算法分析-C++描述第7章谢尔排序（shellSort）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/89283731">数据结构与算法分析-C++描述第7章插入排序（insertionSort）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/89260441">数据结构与算法分析-C++描述第6章二项队列ADT（BinomialQueue）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/89153667">数据结构与算法分析-C++描述第6章斜堆ADT（SkewHeap）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/89102149">数据结构与算法分析-C++描述第6章左式堆ADT（LeftistHeap）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/88978808">数据结构与算法分析-C++描述第6章优先队列ADT（最大堆和最小堆）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/88978308">数据结构与算法分析-C++描述第6章优先队列ADT（二叉堆）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/88949883">数据结构与算法分析-C++描述第5章散列ADT（开放定址法）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/88914597">数据结构与算法分析-C++描述第5章散列ADT（分离链接法）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/88870927">数据结构与算法分析-C++描述第4章红黑树（拓展）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/88846968">数据结构与算法分析-C++描述第4章B树</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/88797796">数据结构与算法分析-C++描述第4章伸展树（splay树）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/88769216">数据结构与算法分析-C++描述第4章平衡二叉树（AVL树）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/88748987">数据结构与算法分析-C++描述第4章二叉树ADT（二叉查找树）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/88719384">约瑟夫环的两种常见解法：链表解法和递归解法（C++版）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/88718251">数据结构与算法分析-C++描述第3章队列ADT（循环队列的两种实现）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/88698664">数据结构与算法分析-C++描述第3章栈ADT（简单计算器设计）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/88670839">数据结构与算法分析-C++描述第3章双向链表（通用模板类型/泛型编程）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/88383584">数据结构与算法分析-C++描述第2章关于素数的前生今世</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/85955928">C++Primer第五版第十七章编程练习（输入、输出和文件）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/85409821">C++Primer第五版第十六章编程练习（string类、STL、算法）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/85142779">C++Primer第五版第十五章编程练习（友元类、异常、RTTI）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/85041895">C++Primer第五版第十四章编程练习（包含、私有继承、类模板、多重继承）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/84930386">C++Primer第五版第十三章编程练习节选（继承、多态、动态内存分配、抽象基类（ABC））</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/84788985">C++Primer第五版第十二章编程练习节选（动态内存、类）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/84393125">C++Primer第五版第十一章编程练习节选（构造函数、友元函数、操作符重载）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/84111097">C++primer第五版第十章编程练习拓展（链表）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/83868102">C++Primer第五版第九章编程练习节选（名称空间&amp;Linux下Makefile结构）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/83685727">C++Primer第五版第八章编程练习节选（函数重载与模板函数）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/83420874">C++Primer第五版第七章编程练习节选（函数指针数组）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/99914234">C++primer第五版编程练习第六章习题节选</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/83152492">C++Primer第五版第六章编程练习节选（数组运算）</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/99914230">《C++Primer第五版编程练习–第五章》</a></p><p>C++ : <a href="https://blog.csdn.net/qq_37172182/article/details/82960255">C++primer第五版第五章编程练习节选（结构运算）</a></p><p>Leetcode : <a href="https://blog.csdn.net/qq_37172182/article/details/120729984">Leetcode前缀和问题集锦</a></p><p>Leetcode : <a href="https://blog.csdn.net/qq_37172182/article/details/120622260">Leetcode排列组合问题集锦</a></p><p>TensorFlow : <a href="https://blog.csdn.net/qq_37172182/article/details/120101194">FastAPI+TensorFlow1.14常见错误</a></p><p>TensorFlow : <a href="https://blog.csdn.net/qq_37172182/article/details/108307269">JupyterNotebook：本地（win10）访问、运行服务器（linux）虚拟环境Pytorch、TensorFlowetc.</a></p><p>TensorFlow : <a href="https://blog.csdn.net/qq_37172182/article/details/100070889">目标检测之FasterR-CNN—-TensorFlow（CPU）</a></p><p>TensorFlow : <a href="https://blog.csdn.net/qq_37172182/article/details/88898761">TensorFlow实战13DenseNet神经网络（CVPR2017最佳论文）</a></p><p>TensorFlow : <a href="https://blog.csdn.net/qq_37172182/article/details/88601727">TensorFlow实战12ResNet进阶（手势识别）</a></p><p>TensorFlow : <a href="https://blog.csdn.net/qq_37172182/article/details/88407284">TensorFlow实战11ResNet神经网络（ILSVRC-2015champion）</a></p><p>TensorFlow : <a href="https://blog.csdn.net/qq_37172182/article/details/88376552">TensorFlow实战10GoogleLeNet进阶（Python调用OpenCV库实现图像识别）</a></p><p>TensorFlow : <a href="https://blog.csdn.net/qq_37172182/article/details/88368120">TensorFlow实战9GoogleLeNet神经网络（2014ILSVRC1stinError(Top-5)）</a></p><p>TensorFlow : <a href="https://blog.csdn.net/qq_37172182/article/details/88135181">TensorFlow实战8VGGNet进阶（图像风格迁移）</a></p><p>TensorFlow : <a href="https://blog.csdn.net/qq_37172182/article/details/88080932">TensorFlow实战7VGGNet神经网络（ILSVRC-2014classification2ndandlocation1st）</a></p><p>TensorFlow : <a href="https://blog.csdn.net/qq_37172182/article/details/88074743">TensorFlow实战6AlexNet进阶（ImageNet识别）</a></p><p>TensorFlow : <a href="https://blog.csdn.net/qq_37172182/article/details/88068327">TensorFlow实战5AlexNet神经网络（ILSVRC-2012冠军）</a></p><p>TensorFlow : <a href="https://blog.csdn.net/qq_37172182/article/details/87997263">TensorFlow实战4进阶CNN–CIFAR-10数据集训练与测试</a></p><p>TensorFlow : <a href="https://blog.csdn.net/qq_37172182/article/details/87929918">TensorFlow实战3LeNet5神经网络(LeNet-5CNN)</a></p><p>TensorFlow : <a href="https://blog.csdn.net/qq_37172182/article/details/87913335">TensorFlow实战1自编码器（Autoencoder）</a></p><p>TensorFlow : <a href="https://blog.csdn.net/qq_37172182/article/details/87912465">TensorFlow实战2多层感知机（Multi-LayerPreceptonMLP）</a></p><p>TensorFlow : <a href="https://blog.csdn.net/qq_37172182/article/details/82960568">《TensorFlow实例–VGG》</a></p><p>TensorFlow : <a href="https://blog.csdn.net/qq_37172182/article/details/82053921">《TensorFlow实例一MINIST手写字体识别》</a></p><p>TensorFlow : <a href="https://blog.csdn.net/qq_37172182/article/details/99914227">《VGGinTensorFlowDemo》</a></p><p>TensorFlow : <a href="https://blog.csdn.net/qq_37172182/article/details/99914223">《TensorFlow实例》</a></p><p>Pytorch : <a href="https://blog.csdn.net/qq_37172182/article/details/110390892">Ubuntu20.04+RTX3090(兼容RTX2080Ti)+Pytorch1.7配置方法</a></p><p>Pytorch : <a href="https://blog.csdn.net/qq_37172182/article/details/108984646">PytorchCAM特征可视化</a></p><p>Pytorch : <a href="https://blog.csdn.net/qq_37172182/article/details/108895111">Pytorch学习基础——损失函数</a></p><p>Pytorch : <a href="https://blog.csdn.net/qq_37172182/article/details/108307269">JupyterNotebook：本地（win10）访问、运行服务器（linux）虚拟环境Pytorch、TensorFlowetc.</a></p><p>Pytorch : <a href="https://blog.csdn.net/qq_37172182/article/details/106985558">Pytorch实例—-NLP之文本分类</a></p><p>Pytorch : <a href="https://blog.csdn.net/qq_37172182/article/details/103650862">Pytorch实例—-DCGAN图像生成</a></p><p>Pytorch : <a href="https://blog.csdn.net/qq_37172182/article/details/103130167">MANFOLDTX2配置Pytorch1.x方法总结（Python3.5+CUDA9.0+Opencv3.4.1）</a></p><p>Pytorch : <a href="https://blog.csdn.net/qq_37172182/article/details/103032070">Pytorch实例—-CAFAR10数据集分类（ShuffleNet）</a></p><p>Pytorch : <a href="https://blog.csdn.net/qq_37172182/article/details/102994830">Pytorch实例—-CAFAR10数据集分类（ResNet）</a></p><p>Pytorch : <a href="https://blog.csdn.net/qq_37172182/article/details/100044608">Pytorch实例—-CAFAR10数据集分类（VGG）</a></p><p>Pytorch : <a href="https://blog.csdn.net/qq_37172182/article/details/99708547">Pytorch实例—-CAFAR10数据集分类（AlexNet）</a></p><p>Pytorch : <a href="https://blog.csdn.net/qq_37172182/article/details/95794314">Pytorch学习基础——RNN从训练到测试</a></p><p>Pytorch : <a href="https://blog.csdn.net/qq_37172182/article/details/95792618">Pytorch学习基础——LeNet从训练到测试</a></p><p>Pytorch : <a href="https://blog.csdn.net/qq_37172182/article/details/95730544">Pytorch学习基础——CNN基本结构搭建</a></p><p>Pytorch : <a href="https://blog.csdn.net/qq_37172182/article/details/94766840">Pytorch学习基础——torch.squeeze()&amp;torch.unsqueeze()</a></p><p>Pytorch : <a href="https://blog.csdn.net/qq_37172182/article/details/94764936">Pytorch学习基础——torch.DataLoader</a></p><p>Ubuntu : <a href="https://blog.csdn.net/qq_37172182/article/details/115379429">Ubuntu20.04+VScode+go环境配置</a></p><p>Ubuntu : <a href="https://blog.csdn.net/qq_37172182/article/details/110390892">Ubuntu20.04+RTX3090(兼容RTX2080Ti)+Pytorch1.7配置方法</a></p><p>Ubuntu : <a href="https://blog.csdn.net/qq_37172182/article/details/109337182">Ubuntu16.04显卡驱动安装及CUDA10.2配置教程</a></p><p>Ubuntu : <a href="https://blog.csdn.net/qq_37172182/article/details/109319879">Ubuntu16.04系统安装U盘启动方法</a></p><p>Ubuntu : <a href="https://blog.csdn.net/qq_37172182/article/details/95939457">Ubuntu18.04SSH&amp;scp远程传输文件到服务器</a></p><p>Ubuntu : <a href="https://blog.csdn.net/qq_37172182/article/details/93587825">Ubuntu18.04Anaconda安装pydotplus和graphviz可视化工具</a></p><p>Ubuntu : <a href="https://blog.csdn.net/qq_37172182/article/details/84585633">Ubuntu18.04安装Octave（4.4.1）</a></p><p>Ubuntu : <a href="https://blog.csdn.net/qq_37172182/article/details/84584885">解决VMware虚拟机Ubuntu18.04无法上网问题！</a></p><p>Ubuntu : <a href="https://blog.csdn.net/qq_37172182/article/details/83145731">Ubuntu16.04安装arm-linux-gcc方法步骤</a></p><p>统计学习方法 : <a href="https://blog.csdn.net/qq_37172182/article/details/103968348">统计学习方法——第11章条件随机场（CRF）</a></p><p>统计学习方法 : <a href="https://blog.csdn.net/qq_37172182/article/details/103940423">统计学习方法——牛顿法和拟牛顿法</a></p><p>统计学习方法 : <a href="https://blog.csdn.net/qq_37172182/article/details/103791229">统计学习方法——第10章隐马尔可夫模型（HMM）</a></p><p>统计学习方法 : <a href="https://blog.csdn.net/qq_37172182/article/details/103206031">统计学习方法——第8章提升方法（AdaBoost+）</a></p><p>统计学习方法 : <a href="https://blog.csdn.net/qq_37172182/article/details/99733266">统计学习方法——第6章logistics回归与最大熵模型</a></p><p>统计学习方法 : <a href="https://blog.csdn.net/qq_37172182/article/details/99286971">统计学习方法——第5章决策树</a></p><p>统计学习方法 : <a href="https://blog.csdn.net/qq_37172182/article/details/98472549">统计学习方法——第4章朴素贝叶斯法</a></p><p>统计学习方法 : <a href="https://blog.csdn.net/qq_37172182/article/details/98472077">统计学习方法——第3章k近邻法</a></p><p>统计学习方法 : <a href="https://blog.csdn.net/qq_37172182/article/details/97633538">统计学习方法——第2章感知机模型编程实现</a></p><p>统计学习方法 : <a href="https://blog.csdn.net/qq_37172182/article/details/97618752">统计学习方法——第2章感知机模型</a></p><p>统计学习方法 : <a href="https://blog.csdn.net/qq_37172182/article/details/97499821">统计学习方法——第1章统计学习方法概论</a></p><p>机器学习 : <a href="https://blog.csdn.net/qq_37172182/article/details/93967988">机器学习实战之分类篇一朴素贝叶斯（从原理到简单词性检测）</a></p><p>机器学习 : <a href="https://blog.csdn.net/qq_37172182/article/details/93597909">机器学习实战之分类篇一决策树（高级应用：配镜大师）</a></p><p>机器学习 : <a href="https://blog.csdn.net/qq_37172182/article/details/93121595">机器学习实战之分类篇一决策树（从银行放贷到相亲的if-else）</a></p><p>机器学习 : <a href="https://blog.csdn.net/qq_37172182/article/details/92053438">机器学习实战之分类篇一k-近邻算法（高级应用：手写数字识别）</a></p><p>机器学习 : <a href="https://blog.csdn.net/qq_37172182/article/details/91942416">机器学习实战之分类篇一k-近邻算法（从电影分类到海伦约会）</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;OpenCV : &lt;a href=&quot;https://blog.csdn.net/qq_37172182/article/details/122399552&quot;&gt;OpenCV—-YOLOv3目标检测模型推理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OpenCV : &lt;a href=&quot;https://blog.csdn.net/qq_37172182/article/details/122147856&quot;&gt;OpenCV—-简单对象分类&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OpenCV : &lt;a href=&quot;https://blog.csdn.net/qq_37172182/article/details/122088583&quot;&gt;OpenCV—-简单目标提取和分割&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OpenCV : &lt;a href=&quot;https://blog.csdn.net/qq_37172182/article/details/122042016&quot;&gt;OpenCV—-GUI设计示例&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="opencv" scheme="http://example.com/tags/opencv/"/>
    
    <category term="VScode" scheme="http://example.com/tags/VScode/"/>
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
    <category term="Tensorflow" scheme="http://example.com/tags/Tensorflow/"/>
    
    <category term="Pytorch" scheme="http://example.com/tags/Pytorch/"/>
    
    <category term="Ubuntu" scheme="http://example.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/01/10/hello-world/"/>
    <id>http://example.com/2022/01/10/hello-world/</id>
    <published>2022-01-09T23:48:43.563Z</published>
    <updated>2022-01-10T12:48:33.524Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><figure class="highlight basic"><figcaption><span>command</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>OpenCV----YOLOv3目标检测模型推理</title>
    <link href="http://example.com/2022/01/09/OpenCV----YOLOv3%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86/"/>
    <id>http://example.com/2022/01/09/OpenCV----YOLOv3%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86/</id>
    <published>2022-01-09T13:43:01.000Z</published>
    <updated>2022-01-20T12:49:49.954Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>题目要求：了解opencv的DNN库，给定一张自然场景图片，使用训练好的yolov3模型，进行目标检测结果输出。</p><blockquote><p>分析：<br>1）opencv的DNN模块集成了很多深度学习模型，包括人脸检测、图像分类、分割、目标检测等，集成了Pytorch、tensorflow、paddlepaddle等模型框架（参看代码库<a href="https://github.com/opencv/opencv/tree/master/samples/dnn">OpenCV/dnn</a>）<br>2）深度学习推理模型一般步骤：加载模型，包括配置文件和权重文件；输入图像预处理，转换成模型可接受的文件类型和尺寸；模型预测后处理，对于目标检测，主要是NMS后处理方法；</p></blockquote><ul><li>   结果展示：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">./bin/yolov3Predict -h</span><br><span class="line"><span class="comment">#######</span></span><br><span class="line">Usage: yolov3Predict [params] image confThreshold nmsThresshold </span><br><span class="line"></span><br><span class="line">        -?, -h, --<span class="built_in">help</span>, --usage (value:<span class="literal">true</span>)</span><br><span class="line">                opecv based deep learining demo</span><br><span class="line"></span><br><span class="line">        image</span><br><span class="line">                Image to process</span><br><span class="line">        confThreshold (value:0.5)</span><br><span class="line">                confidence threshold, default 0.5</span><br><span class="line">        nmsThresshold (value:0.3)</span><br><span class="line">                nms threshold, default 0.3</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/yolov3Predict data/test.jpg</span><br></pre></td></tr></table></figure><ul><li>代码示例：</li></ul><p>yolov3Predict.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//yolov3Predict.cpp</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@File          :yolov3Predict.cpp</span></span><br><span class="line"><span class="comment">@Description:  :</span></span><br><span class="line"><span class="comment">@Date          :2022/1/9 20:02:10</span></span><br><span class="line"><span class="comment">@Author        :</span></span><br><span class="line"><span class="comment">@version       :1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/dnn.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> dnn;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;utils.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// define command parse</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">parseParam</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv, <span class="keyword">const</span> <span class="keyword">char</span>* keys, Mat&amp; img, <span class="keyword">float</span>&amp; confThreshold, <span class="keyword">float</span>&amp; nmsThresshold)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : command parse function</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        int argc : main argc</span></span><br><span class="line"><span class="comment">        char** argv: main argv</span></span><br><span class="line"><span class="comment">        keys : command parse keys</span></span><br><span class="line"><span class="comment">        img : the image to read</span></span><br><span class="line"><span class="comment">        confThreshold : confidence threshold setting</span></span><br><span class="line"><span class="comment">        nmsThresshold : nms threshold setting</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        (ref returns)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function">CommandLineParser <span class="title">parser</span><span class="params">(argc, argv, keys)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(parser.<span class="built_in">has</span>(<span class="string">&quot;help&quot;</span>))&#123;</span><br><span class="line">        parser.<span class="built_in">printMessage</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// check commoand format</span></span><br><span class="line">    <span class="keyword">if</span>(!parser.<span class="built_in">check</span>())&#123;</span><br><span class="line">        parser.<span class="built_in">printErrors</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// get image</span></span><br><span class="line">    String imgFile = parser.get&lt;String&gt;(<span class="number">0</span>);</span><br><span class="line">    img = <span class="built_in">imread</span>(imgFile);</span><br><span class="line">    <span class="keyword">if</span>(img.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;error to load test image. &quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// get confidence threshold</span></span><br><span class="line">    confThreshold = parser.get&lt;<span class="keyword">float</span>&gt;(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// get nms threshold</span></span><br><span class="line">    nmsThresshold = parser.get&lt;<span class="keyword">float</span>&gt;(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* keys  = &#123;</span><br><span class="line">        <span class="string">&quot;&#123;help h usage ? | | opecv based deep learining demo&#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;@image | | Image to process&#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;@confThreshold | 0.5 | confidence threshold, default 0.5&#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;@nmsThresshold | 0.3 | nms threshold, default 0.3&#125;&quot;</span>&#125;;</span><br><span class="line">    Mat img, blob;</span><br><span class="line">    <span class="keyword">float</span> confThreshold, nmsThresshold;</span><br><span class="line">    <span class="comment">// update data</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">parseParam</span>(argc, argv, keys, img, confThreshold, nmsThresshold))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// load model</span></span><br><span class="line">    string classFile = <span class="string">&quot;model/coco.names&quot;</span>;</span><br><span class="line">    <span class="function">ifstream <span class="title">fin</span><span class="params">(classFile.c_str())</span></span>;</span><br><span class="line">    string line;</span><br><span class="line">    vector&lt;string&gt; classes;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">getline</span>(fin, line))&#123;</span><br><span class="line">        classes.<span class="built_in">push_back</span>(line);</span><br><span class="line">    &#125;</span><br><span class="line">    string modelCfg = <span class="string">&quot;model/yolov3.cfg&quot;</span>;</span><br><span class="line">    string modelWeg = <span class="string">&quot;model/yolov3.weights&quot;</span>;</span><br><span class="line">    Net yolov3 = <span class="built_in">readNetFromDarknet</span>(modelCfg, modelWeg);</span><br><span class="line">    yolov3.<span class="built_in">setPreferableBackend</span>(DNN_BACKEND_OPENCV);</span><br><span class="line">    yolov3.<span class="built_in">setPreferableTarget</span>(DNN_TARGET_CPU);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// convert image to blob format</span></span><br><span class="line">    <span class="built_in">blobFromImage</span>(img, blob, <span class="number">1</span>/<span class="number">255.0</span>, <span class="built_in">Size</span>(<span class="number">416</span>, <span class="number">416</span>), <span class="built_in">Scalar</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    yolov3.<span class="built_in">setInput</span>(blob);</span><br><span class="line">    vector&lt;Mat&gt; outputs;</span><br><span class="line">    <span class="comment">// model predict</span></span><br><span class="line">    yolov3.forward(outputs, <span class="built_in">getoutputsName</span>(yolov3));</span><br><span class="line">    <span class="comment">// post process (nms)</span></span><br><span class="line">    <span class="built_in">postProcess</span>(img, outputs, classes, confThreshold, nmsThresshold);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// time cost</span></span><br><span class="line">    vector&lt;<span class="keyword">double</span>&gt; layersTime;</span><br><span class="line">    <span class="keyword">double</span> freq = <span class="built_in">getTickFrequency</span>() / <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">double</span> t = yolov3.<span class="built_in">getPerfProfile</span>(layersTime) / freq;</span><br><span class="line">    string label = format(<span class="string">&quot;time consuming: %.2f&quot;</span>, t);</span><br><span class="line">    cout &lt;&lt; label &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;input&quot;</span>, img);</span><br><span class="line">    <span class="built_in">imwrite</span>(<span class="string">&quot;output.jpg&quot;</span>, img);</span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>utils.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@File          :utils.cpp</span></span><br><span class="line"><span class="comment">@Description:  :</span></span><br><span class="line"><span class="comment">@Date          :2022/1/9 20:11:10</span></span><br><span class="line"><span class="comment">@Author        :</span></span><br><span class="line"><span class="comment">@version       :1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/core/utility.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/dnn.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> dnn;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;utils.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">Scalar <span class="title">randColor</span><span class="params">(RNG&amp; rng)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : generate randow color</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        rng : random number generator object</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        Sacalar() : BGR scalar</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">auto</span> iColor = (<span class="keyword">unsigned</span>)rng;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Scalar</span>(iColor&amp;<span class="number">255</span>, (iColor &gt;&gt; <span class="number">8</span>)&amp;<span class="number">255</span>, (iColor &gt;&gt; <span class="number">16</span>)&amp;<span class="number">255</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get model output name</span></span><br><span class="line"><span class="function">vector&lt;string&gt; <span class="title">getoutputsName</span><span class="params">(Net&amp; net)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : get model outputs name</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        Net : deep learning model</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        names : model output names</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">static</span> vector&lt;string&gt; names;</span><br><span class="line">    <span class="keyword">if</span>(names.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="comment">// get output layer idx</span></span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; outLayers = net.<span class="built_in">getUnconnectedOutLayers</span>();</span><br><span class="line">        <span class="comment">// get all namenames</span></span><br><span class="line">        vector&lt;string&gt; layersName = net.<span class="built_in">getLayerNames</span>();</span><br><span class="line">        names.<span class="built_in">resize</span>(outLayers.<span class="built_in">size</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; outLayers.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            names[i] = layersName[outLayers[i] - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> names;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// draw prdict result on image</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawPred</span><span class="params">(vector&lt;string&gt; classes, <span class="keyword">int</span> classId, <span class="keyword">float</span> conf, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom, Mat&amp; frame)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : drop boxes and confidence on frame</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        classes : the total classes list</span></span><br><span class="line"><span class="comment">        classId : the predicted class id</span></span><br><span class="line"><span class="comment">        conf : predicted confidence</span></span><br><span class="line"><span class="comment">        left : left location</span></span><br><span class="line"><span class="comment">        top : top locatioin</span></span><br><span class="line"><span class="comment">        right : right location</span></span><br><span class="line"><span class="comment">        bottom : bottom location</span></span><br><span class="line"><span class="comment">        frame : the image to draw</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        (ref return)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// draw rectanle for object detected</span></span><br><span class="line">    <span class="built_in">rectangle</span>(frame, <span class="built_in">Point</span>(left, top), <span class="built_in">Point</span>(right, bottom), <span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// set rectangle for label show</span></span><br><span class="line">    string conf_label = format(<span class="string">&quot;%.2f&quot;</span>, conf);</span><br><span class="line">    string label = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(!classes.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        label = classes[classId] + <span class="string">&quot; : &quot;</span> + conf_label;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> baseLine;</span><br><span class="line">    Size labelSize = <span class="built_in">getTextSize</span>(label, FONT_HERSHEY_SIMPLEX, <span class="number">0.5</span>, <span class="number">1</span>, &amp;baseLine);</span><br><span class="line">    top = <span class="built_in">max</span>(top, labelSize.height);</span><br><span class="line">    <span class="built_in">rectangle</span>(frame, <span class="built_in">Point</span>(left, top - labelSize.height), <span class="built_in">Point</span>(left + labelSize.width, top+baseLine), <span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), FILLED);</span><br><span class="line">    <span class="comment">// put label text on image</span></span><br><span class="line">    <span class="built_in">putText</span>(frame, label, <span class="built_in">Point</span>(left, top), FONT_HERSHEY_SIMPLEX, <span class="number">0.5</span>, <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">1</span>, LINE_AA);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// post process (NMS) for object detection</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postProcess</span><span class="params">(Mat&amp; frame, vector&lt;Mat&gt;&amp; outs, vector&lt;string&gt; classes, <span class="keyword">float</span> confThreshold, <span class="keyword">float</span> nmsThresshold)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : post process predict result to get suitable box to display</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        frame : image to process and return</span></span><br><span class="line"><span class="comment">        outs : predicts result</span></span><br><span class="line"><span class="comment">        classes : the total classes list</span></span><br><span class="line"><span class="comment">        confThreshold : confidence threshold setting</span></span><br><span class="line"><span class="comment">        nmsThresshold : nms threshold setting</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        (ref return)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// get classId, confidence and boxes</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; classIds;</span><br><span class="line">    vector&lt;<span class="keyword">float</span>&gt; confs;</span><br><span class="line">    vector&lt;Rect&gt; boxes;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; outs.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="keyword">float</span>* data = (<span class="keyword">float</span>*) outs[i].data;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; outs[i].rows; j++, data += outs[i].cols)&#123;</span><br><span class="line">            <span class="comment">// get socres for detectd class and scores</span></span><br><span class="line">            Mat scores = outs[i].<span class="built_in">row</span>(j).<span class="built_in">colRange</span>(<span class="number">5</span>, outs[i].cols);</span><br><span class="line">            Point classIdPoint;</span><br><span class="line">            <span class="keyword">double</span> conf;</span><br><span class="line">            <span class="comment">// get min max value in socores with idx</span></span><br><span class="line">            <span class="built_in">minMaxLoc</span>(scores, <span class="number">0</span>, &amp;conf, <span class="number">0</span>, &amp;classIdPoint);</span><br><span class="line">            <span class="comment">// filter too small confidence</span></span><br><span class="line">            <span class="keyword">if</span>(conf &gt; confThreshold)&#123;</span><br><span class="line">                <span class="keyword">int</span> x = (<span class="keyword">int</span>) (data[<span class="number">0</span>]*frame.cols);</span><br><span class="line">                <span class="keyword">int</span> y = (<span class="keyword">int</span>) (data[<span class="number">1</span>]*frame.rows);</span><br><span class="line">                <span class="keyword">int</span> w = (<span class="keyword">int</span>) (data[<span class="number">2</span>]*frame.cols);</span><br><span class="line">                <span class="keyword">int</span> h = (<span class="keyword">int</span>) (data[<span class="number">3</span>]*frame.rows);</span><br><span class="line">                <span class="keyword">int</span> left = x - w / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">int</span> top = y - h / <span class="number">2</span>;</span><br><span class="line">                classIds.<span class="built_in">push_back</span>(classIdPoint.x);</span><br><span class="line">                confs.<span class="built_in">push_back</span>((<span class="keyword">float</span>)conf);</span><br><span class="line">                boxes.<span class="built_in">push_back</span>(<span class="built_in">Rect</span>(left, top, w, h));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// NMS operation</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; idxs;</span><br><span class="line">    <span class="built_in">NMSBoxes</span>(boxes, confs, confThreshold, nmsThresshold, idxs);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; idxs.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> idx = idxs[i];</span><br><span class="line">        Rect box = boxes[idx];</span><br><span class="line">        <span class="built_in">drawPred</span>(classes, classIds[idx], confs[idx], box.x, box.y, box.x+box.width, box.y+box.height, frame);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;题目要求：了解opencv的DNN库，给定一张自然场景图片，使用训练好的yolov3模型，进行目标检测结果输出。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;分析：&lt;br&gt;1）opencv的DNN模块集成了很多深度学习模型，包括</summary>
      
    
    
    
    <category term="opencv" scheme="http://example.com/categories/opencv/"/>
    
    
    <category term="opencv 目标检测 yolov3 DNN" scheme="http://example.com/tags/opencv-%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B-yolov3-DNN/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV----简单对象分类</title>
    <link href="http://example.com/2021/12/25/OpenCV----%E7%AE%80%E5%8D%95%E5%AF%B9%E8%B1%A1%E5%88%86%E7%B1%BB/"/>
    <id>http://example.com/2021/12/25/OpenCV----%E7%AE%80%E5%8D%95%E5%AF%B9%E8%B1%A1%E5%88%86%E7%B1%BB/</id>
    <published>2021-12-25T12:30:49.000Z</published>
    <updated>2022-01-20T12:49:49.954Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>题目要求：在上一章<a href="https://blog.csdn.net/qq_37172182/article/details/122088583">OpenCV—-简单目标提取和分割</a>中尝试使用opencv连通性方法获取了目标的面积和轮廓信息，本章节将尝试对这些特征进行整合，使用opencv中ml库(machine learning)训练一个目标分类器,给定一种输入图片，预测图像中目标的类别。<br>最新代码库已更新：<a href="https://github.com/GinkgoX/opencv4_cpp">opencv4_cpp  </a></p><blockquote><p>分析：<br>1）了解常用的分类模型，参见opencv ml API <a href="https://docs.opencv.org/4.5.0/d8/df1/namespacecv_1_1ml.html">OpenCV namespace ml</a>,首先建议一个简单的SVM分类器，然后设计其他的分类器如朴素贝叶斯模型等；<br>2）设计命令行设置输入图片和模型选择等，支持默认模型选择；<br>3）考虑模板类进行分类模型选择的通用能力；<br>4）支持模型参数手动设定；<br>5）进代码设计成便于管理，解释性强的工程，设计通用的工程模板；</p></blockquote><ul><li><p>文件工程目录<br>·bin -—————–生成可执行文件目录<br>·build -—————文件编译的中间结果<br>·data -—————-训练测试数据（图像）<br>·include -————头文件目录和inline文件（用于模板方法实现）<br>·lib -——————-用于生成头文件的lib文件<br>·model -————-不同模型训练生成的xml文件<br>·src -——————源文件和源文件编译命令CMakeLists.txt<br>·CMakeLists.txt —外层文件编译命令<br><img src="https://img-blog.csdnimg.cn/b4f6dc93d4c041b1a08fd06738a642ac.png" alt="请添加图片描述"></p><ul><li>outer CMakeLists.txt</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required (VERSION 3.0)</span><br><span class="line"></span><br><span class="line">PROJECT(ch6)</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>(CMAKE_BUILD_TYPE Release)</span><br><span class="line"><span class="built_in">set</span>(CMAKE_CXX_FLAGS <span class="string">&quot;-std=c++17 -Wall&quot;</span>)</span><br><span class="line"><span class="built_in">set</span>(CMAKE_CXX_FLAGS_RELEASE  <span class="string">&quot;-std=c++17 -O3 -fopenmp -pthread&quot;</span>)</span><br><span class="line"></span><br><span class="line">IF(EXISTS <span class="variable">$&#123;CMAKE_BINARY_DIR&#125;</span>/conanbuildinfo.cmake)</span><br><span class="line">    include(<span class="variable">$&#123;CMAKE_BINARY_DIR&#125;</span>/conanbuildinfo.cmake)</span><br><span class="line">    conan_basic_setup()</span><br><span class="line">ENDIF()</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin) </span><br><span class="line"><span class="built_in">set</span>(LIBRARY_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line">include_directories(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/include)</span><br><span class="line">link_directories(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line">add_subdirectory(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src)</span><br></pre></td></tr></table></figure><ul><li>   inner CMakeLists.txt</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required (VERSION 3.0)</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>(CMAKE_BUILD_TYPE Release)</span><br><span class="line"><span class="built_in">set</span>(CMAKE_CXX_FLAGS <span class="string">&quot;-std=c++17 -Wall&quot;</span>)</span><br><span class="line"><span class="built_in">set</span>(CMAKE_CXX_FLAGS_RELEASE  <span class="string">&quot;-std=c++17 -O3 -fopenmp -pthread&quot;</span>)</span><br><span class="line"></span><br><span class="line">include_directories(<span class="variable">$&#123;PROJECT_SOURSE_DIR&#125;</span>/include)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Requires OpenCV</span></span><br><span class="line">find_package(OpenCV  REQUIRED)</span><br><span class="line"></span><br><span class="line">message(<span class="string">&quot;OpenCV version : <span class="variable">$&#123;OpenCV_VERSION&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">include_directories(<span class="variable">$&#123;OpenCV_INCLUDE_DIRS&#125;</span>)</span><br><span class="line">link_directories(<span class="variable">$&#123;OpenCV_LIB_DIR&#125;</span>)</span><br><span class="line"></span><br><span class="line">add_library(utils utils.cpp)</span><br><span class="line">add_library(mwindow mwindow.cpp)</span><br><span class="line">add_executable(main main.cpp)</span><br><span class="line">target_link_libraries(main <span class="variable">$&#123;OpenCV_LIBS&#125;</span> utils mwindow -lopencv_ml)</span><br></pre></td></tr></table></figure><ul><li>   结果演示</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/main data/test.pgm  data/pattern.pgm bayes</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/bbf71bc21d6841bbb6d7d6dfa701a183.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfMzcxNzIxODI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/main data/test.pgm  data/pattern.pgm (svm)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/0ed56279d9d545c1903c36d9ca3cbdf3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfMzcxNzIxODI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/main data/test.pgm  data/pattern.pgm boost</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/0c4f3735cc4c4f6fae5310a8e28d2a5e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfMzcxNzIxODI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><ul><li>代码示例<br>1）更新之前的多窗口类MWindow Class</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@File          :mwindow.hpp</span></span><br><span class="line"><span class="comment">@Description:  :</span></span><br><span class="line"><span class="comment">@Date          :2021/12/25 09:23:14</span></span><br><span class="line"><span class="comment">@Author        :xieyin</span></span><br><span class="line"><span class="comment">@version       :1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MWindow</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">// consturtor</span></span><br><span class="line">        <span class="built_in">MWindow</span>(string windowTitle, <span class="keyword">int</span> rows, <span class="keyword">int</span> cols, <span class="keyword">int</span> height=<span class="number">700</span>, <span class="keyword">int</span> width=<span class="number">1200</span>, <span class="keyword">int</span> flags=WINDOW_AUTOSIZE);</span><br><span class="line">        <span class="comment">// add image into canvas</span></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">addImage</span><span class="params">(string title, Mat img, <span class="keyword">bool</span> render = <span class="literal">false</span>)</span></span>;</span><br><span class="line">        <span class="comment">// remove image from canvas</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">removeImage</span><span class="params">(<span class="keyword">int</span> pos)</span></span>;</span><br><span class="line">        <span class="comment">// adjust all image size in canvas</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">render</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        string mWindowTitle;</span><br><span class="line">        <span class="keyword">int</span> mRows;</span><br><span class="line">        <span class="keyword">int</span> mCols;</span><br><span class="line">        Mat mCanvas;</span><br><span class="line">        vector&lt;string&gt; mSubTitles;</span><br><span class="line">        vector&lt;Mat&gt; mSubImages;     </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@File          :mwindow.cpp</span></span><br><span class="line"><span class="comment">@Description:  :</span></span><br><span class="line"><span class="comment">@Date          :2021/12/25 09:23:22</span></span><br><span class="line"><span class="comment">@Author        :xieyin</span></span><br><span class="line"><span class="comment">@version       :1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;mwindow.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line">MWindow::<span class="built_in">MWindow</span>(string windowTitle, <span class="keyword">int</span> rows, <span class="keyword">int</span> cols, <span class="keyword">int</span> height, <span class="keyword">int</span> width, <span class="keyword">int</span> flags):<span class="built_in">mWindowTitle</span>(windowTitle), <span class="built_in">mRows</span>(rows), <span class="built_in">mCols</span>(cols)&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : MWindow constructor</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        windowTitle : whole window title</span></span><br><span class="line"><span class="comment">        rows : sub window rows</span></span><br><span class="line"><span class="comment">        cols : sub window cols</span></span><br><span class="line"><span class="comment">        flags : namedWindow flags (eg, WINDOW_AUTOSIZE)</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">// create canvas</span></span><br><span class="line">    <span class="built_in">namedWindow</span>(mWindowTitle, flags);</span><br><span class="line">    mCanvas = <span class="built_in">Mat</span>(height, width, CV_8UC3);</span><br><span class="line">    <span class="built_in">imshow</span>(mWindowTitle, mCanvas);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MWindow::addImage</span><span class="params">(string title, Mat img, <span class="keyword">bool</span> render)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : add title and image into canvas</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        title : sub image title</span></span><br><span class="line"><span class="comment">        img : image to be added</span></span><br><span class="line"><span class="comment">        render : render(flag) whether need to adjust the image for canvas</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        index : sub image index in total mRows * mCols</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">int</span> index=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;mSubTitles.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        string t=<span class="keyword">this</span>-&gt;mSubTitles[i];</span><br><span class="line">        <span class="keyword">if</span>(t.<span class="built_in">compare</span>(title)==<span class="number">0</span>)&#123;</span><br><span class="line">            index=i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(index==<span class="number">-1</span>)&#123;</span><br><span class="line">        mSubTitles.<span class="built_in">push_back</span>(title);</span><br><span class="line">        mSubImages.<span class="built_in">push_back</span>(img);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        mSubImages[index]= img;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(render)&#123;</span><br><span class="line">        MWindow::<span class="built_in">render</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mSubImages.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MWindow::removeImage</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : remove image from canvas based on index</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        pos : sub image index in total mRows * mCols</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        None</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    mSubTitles.<span class="built_in">erase</span>(mSubTitles.<span class="built_in">begin</span>() + pos);</span><br><span class="line">    mSubImages.<span class="built_in">erase</span>(mSubImages.<span class="built_in">begin</span>() + pos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MWindow::render</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : fill title and image into canvas in suitable way</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        None</span></span><br><span class="line"><span class="comment">    @Returns  :</span></span><br><span class="line"><span class="comment">        None </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    mCanvas.<span class="built_in">setTo</span>(<span class="built_in">Scalar</span>(<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>));</span><br><span class="line">    <span class="comment">// get sub canvas size</span></span><br><span class="line">    <span class="keyword">int</span> cellH = mCanvas.rows / mRows;</span><br><span class="line">    <span class="keyword">int</span> cellW = mCanvas.cols / mCols;</span><br><span class="line">    <span class="comment">// set total number of images to load</span></span><br><span class="line">    <span class="keyword">int</span> n = mSubImages.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> numImgs = n &gt; mRows * mCols ? mRows * mCols : n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numImgs; i++)&#123;</span><br><span class="line">        <span class="comment">// get title</span></span><br><span class="line">        string title = mSubTitles[i];</span><br><span class="line">        <span class="comment">// get sub canvas top left location</span></span><br><span class="line">        <span class="keyword">int</span> cellX = (cellW) * ((i) % mCols);</span><br><span class="line">        <span class="keyword">int</span> cellY = (cellH) * <span class="built_in">floor</span>( (i) / (<span class="keyword">float</span>) mCols);</span><br><span class="line">        <span class="function">Rect <span class="title">mask</span><span class="params">(cellX, cellY, cellW, cellH)</span></span>;</span><br><span class="line">        <span class="comment">// set subcanvas size</span></span><br><span class="line">        <span class="built_in">rectangle</span>(mCanvas, <span class="built_in">Rect</span>(cellX, cellY, cellW, cellH), <span class="built_in">Scalar</span>(<span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>), <span class="number">1</span>);</span><br><span class="line">        <span class="function">Mat <span class="title">cell</span><span class="params">(mCanvas, mask)</span></span>;</span><br><span class="line">        Mat imgResz;</span><br><span class="line">        <span class="comment">// get cell aspect</span></span><br><span class="line">        <span class="keyword">double</span> cellAspect = (<span class="keyword">double</span>) cellW / (<span class="keyword">double</span>) cellH;</span><br><span class="line">        <span class="comment">// get image</span></span><br><span class="line">        Mat img = mSubImages[i];</span><br><span class="line">        <span class="comment">// get image aspect</span></span><br><span class="line">        <span class="keyword">double</span> imgAspect = (<span class="keyword">double</span>) img.cols / (<span class="keyword">double</span>) img.cols;</span><br><span class="line">        <span class="keyword">double</span> wAspect = (<span class="keyword">double</span>) cellW / (<span class="keyword">double</span>) img.cols;</span><br><span class="line">        <span class="keyword">double</span> hAspect = (<span class="keyword">double</span>) cellH / (<span class="keyword">double</span>) img.rows;</span><br><span class="line">        <span class="comment">// get suitable aspect and resize image</span></span><br><span class="line">        <span class="keyword">double</span> aspect = cellAspect &lt; imgAspect ? wAspect : hAspect;</span><br><span class="line">        <span class="built_in">resize</span>(img, imgResz, <span class="built_in">Size</span>(<span class="number">0</span>, <span class="number">0</span>), aspect, aspect);</span><br><span class="line">        <span class="comment">// if gray image, convert to BGR</span></span><br><span class="line">        <span class="keyword">if</span>(imgResz.<span class="built_in">channels</span>() == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">cvtColor</span>(imgResz, imgResz, COLOR_GRAY2BGR);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">Mat <span class="title">subCell</span><span class="params">(mCanvas, Rect(cellX, cellY, imgResz.cols, imgResz.rows))</span></span>;</span><br><span class="line">        imgResz.<span class="built_in">copyTo</span>(subCell);</span><br><span class="line">        <span class="built_in">putText</span>(cell, title, <span class="built_in">Point</span>(<span class="number">20</span>, <span class="number">20</span>), FONT_HERSHEY_SIMPLEX, <span class="number">0.6</span>, <span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// show total canvas</span></span><br><span class="line">    <span class="built_in">imshow</span>(mWindowTitle, mCanvas);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2）设计通用辅助函数utils.hpp, utills.cpp和utils.inl</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@File          :utils.hpp</span></span><br><span class="line"><span class="comment">@Description:  :</span></span><br><span class="line"><span class="comment">@Date          :2021/12/25 09:23:48</span></span><br><span class="line"><span class="comment">@Author        :xieyin</span></span><br><span class="line"><span class="comment">@version       :1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/ml.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv::ml;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;mwindow.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> shared_ptr&lt;MWindow&gt; myWin;</span><br><span class="line"></span><br><span class="line"><span class="comment">// generate randow color basd on randow number generator</span></span><br><span class="line"><span class="function">Scalar <span class="title">randColor</span><span class="params">(RNG&amp; rng)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// calculate given img&#x27;s light pattert with large kernel&#x27;s Blur operation</span></span><br><span class="line"><span class="function">Mat <span class="title">calLigthPattern</span><span class="params">(Mat img)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use 2 tpyes of light removal method, 0 diff, 1 div, defalut is 0</span></span><br><span class="line"><span class="function">Mat <span class="title">removeLight</span><span class="params">(Mat img, Mat pattern, <span class="keyword">int</span> methodLight=<span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// packed opencv lib connectedComponents function</span></span><br><span class="line"><span class="function">Mat <span class="title">connectedComponents</span><span class="params">(Mat img_thr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// packed opencv lib connectedComponentsWithStats function</span></span><br><span class="line"><span class="function">Mat <span class="title">connectedComponentsWithStats</span><span class="params">(Mat img_thr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// packed opencv lib findContours function</span></span><br><span class="line"><span class="function">Mat <span class="title">findContours</span><span class="params">(Mat img_thr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// helper function for trainAndTest, readFolderAndExtractFeatures</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">readFolderAndExtractFeatures</span><span class="params">(string filePath, <span class="keyword">int</span> label, <span class="keyword">int</span> numTest, </span></span></span><br><span class="line"><span class="params"><span class="function">    vector&lt;<span class="keyword">float</span>&gt;&amp; trainingData, vector&lt;<span class="keyword">int</span>&gt;&amp; trainResponses, vector&lt;<span class="keyword">float</span>&gt;&amp; testData, vector&lt;<span class="keyword">int</span>&gt;&amp; testResponses)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// helper function for trainAndTest, ploat data error</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">plotData</span><span class="params">(Mat trainingDataMat, Mat trainResponsesMat, string mode=<span class="string">&quot;svm&quot;</span>, <span class="keyword">float</span>* error=<span class="literal">NULL</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// define svm parameters</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">defineSVM</span><span class="params">(Ptr&lt;SVM&gt;&amp; svm)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the train and test process for mechain learning</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">trainAndTest</span><span class="params">(string mode=<span class="string">&quot;svm&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// train svm model</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">trainSVM</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// predict features extracted from imgOut, and put text in left top position</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">predict</span><span class="params">(vector&lt;vector&lt;<span class="keyword">float</span>&gt;&gt; features, vector&lt;<span class="keyword">int</span>&gt; posLeft, vector&lt;<span class="keyword">int</span>&gt; posTop, string mode, Mat&amp; imgOut)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// preprocess test image</span></span><br><span class="line"><span class="function">Mat <span class="title">preProcess</span><span class="params">(Mat img)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// extract feature from preprocess image and get left top location</span></span><br><span class="line">vector&lt;vector&lt;<span class="keyword">float</span>&gt;&gt; <span class="built_in">extractFeatures</span>(Mat img, vector&lt;<span class="keyword">int</span>&gt;* posLeft=<span class="literal">NULL</span>, vector&lt;<span class="keyword">int</span>&gt;* posTop=<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;utils.inl&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@File          :utils.cpp</span></span><br><span class="line"><span class="comment">@Description:  :</span></span><br><span class="line"><span class="comment">@Date          :2021/12/25 09:23:38</span></span><br><span class="line"><span class="comment">@Author        :xieyin</span></span><br><span class="line"><span class="comment">@version       :1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/ml.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv::ml;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;utils.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;mwindow.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">Scalar <span class="title">randColor</span><span class="params">(RNG&amp; rng)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : generate randow color</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        rng : random number generator object</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        Sacalar() : BGR scalar</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">auto</span> iColor = (<span class="keyword">unsigned</span>)rng;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Scalar</span>(iColor&amp;<span class="number">255</span>, (iColor &gt;&gt; <span class="number">8</span>)&amp;<span class="number">255</span>, (iColor &gt;&gt; <span class="number">16</span>)&amp;<span class="number">255</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Mat <span class="title">calLigthPattern</span><span class="params">(Mat img)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : get source image&#x27;s light pattern </span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        img : source BGR image or Gray image</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        pattern : the light pattern</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Mat pattern;</span><br><span class="line">    <span class="built_in">blur</span>(img, pattern, <span class="built_in">Size</span>(img.cols / <span class="number">3</span>, img.cols / <span class="number">3</span>));</span><br><span class="line">    <span class="keyword">return</span> pattern;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Mat <span class="title">removeLight</span><span class="params">(Mat img, Mat pattern, <span class="keyword">int</span> methodLight)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : remove light between img and pattern based on method light</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        img : source BGR/Gray image</span></span><br><span class="line"><span class="comment">        pattern : pattern BGR/Gray image</span></span><br><span class="line"><span class="comment">        methodLight : choise options: 0 difference, 1 div</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        aux : light removed BGR/Gray image</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Mat aux;</span><br><span class="line">    <span class="keyword">if</span>(methodLight == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">// div operation in float 32 format CV_32F</span></span><br><span class="line">        Mat img32, pattern32;</span><br><span class="line">        img.<span class="built_in">convertTo</span>(img32, <span class="number">5</span>);</span><br><span class="line">        pattern.<span class="built_in">convertTo</span>(pattern32, <span class="number">5</span>);</span><br><span class="line">        aux = <span class="number">1.0</span> - (img32 / pattern32);</span><br><span class="line">        <span class="comment">// covert to CV_8U and clip</span></span><br><span class="line">        aux.<span class="built_in">convertTo</span>(aux, <span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// difference</span></span><br><span class="line">        aux = pattern - img;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> aux;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Mat <span class="title">connectedComponents</span><span class="params">(Mat img_thr)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : opencv connnected components</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        img : threshold image</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        None</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   Mat labels;</span><br><span class="line">   <span class="keyword">auto</span> num_objs = <span class="built_in">connectedComponents</span>(img_thr, labels);</span><br><span class="line">   Mat res;</span><br><span class="line">   <span class="keyword">if</span>(num_objs &lt; <span class="number">2</span>)&#123;</span><br><span class="line">       cout &lt;&lt; <span class="string">&quot;no object is detected. &quot;</span> &lt;&lt; endl;</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br><span class="line">   res = Mat::<span class="built_in">zeros</span>(img_thr.rows, img_thr.cols, CV_8UC3);</span><br><span class="line">   <span class="function">RNG <span class="title">rng</span><span class="params">(<span class="number">0xFFFFFFFF</span>)</span></span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">auto</span> i = <span class="number">1</span>; i &lt; num_objs; i++)&#123;</span><br><span class="line">       Mat mask = labels == i;</span><br><span class="line">       res.<span class="built_in">setTo</span>(<span class="built_in">randColor</span>(rng), mask);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Mat <span class="title">connectedComponentsWithStats</span><span class="params">(Mat img_thr)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : connnected components with stats</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        img : threshold image</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        None</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Mat labels, stats, centroids;</span><br><span class="line">    <span class="keyword">auto</span> num_objs = <span class="built_in">connectedComponentsWithStats</span>(img_thr, labels, stats, centroids);</span><br><span class="line">    Mat res;</span><br><span class="line">    <span class="keyword">if</span>(num_objs &lt; <span class="number">2</span>)&#123;</span><br><span class="line">       cout &lt;&lt; <span class="string">&quot;no object is detected. &quot;</span> &lt;&lt; endl;</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br><span class="line">   res = Mat::<span class="built_in">zeros</span>(img_thr.rows, img_thr.cols, CV_8UC3);</span><br><span class="line">   <span class="function">RNG <span class="title">rng</span><span class="params">(<span class="number">0xFFFFFFFF</span>)</span></span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">auto</span> i = <span class="number">1</span>; i &lt; num_objs; i++)&#123;</span><br><span class="line">       Mat mask = labels == i;</span><br><span class="line">       res.<span class="built_in">setTo</span>(<span class="built_in">randColor</span>(rng), mask);</span><br><span class="line">       stringstream ss;</span><br><span class="line">       ss &lt;&lt; <span class="string">&quot;area: &quot;</span> &lt;&lt; stats.at&lt;<span class="keyword">int</span>&gt;(i, CC_STAT_AREA);</span><br><span class="line">       <span class="comment">// add text info</span></span><br><span class="line">       <span class="built_in">putText</span>(res, ss.<span class="built_in">str</span>(), centroids.at&lt;Point2d&gt;(i), FONT_HERSHEY_SIMPLEX, <span class="number">0.3</span>, <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Mat <span class="title">findContours</span><span class="params">(Mat img_thr)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : find contours and put text</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        img : threshold image</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        None</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    vector&lt;vector&lt;Point&gt;&gt; contours;</span><br><span class="line">    <span class="built_in">findContours</span>(img_thr, contours, RETR_EXTERNAL, CHAIN_APPROX_SIMPLE);</span><br><span class="line">    Mat res;</span><br><span class="line">    <span class="keyword">if</span>(contours.<span class="built_in">size</span>() == <span class="number">0</span>)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;no contours are found .&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">RNG <span class="title">rng</span><span class="params">(<span class="number">0xFFFFFFFF</span>)</span></span>;</span><br><span class="line">    res = Mat::<span class="built_in">zeros</span>(img_thr.rows, img_thr.cols, CV_8UC3);</span><br><span class="line">    <span class="comment">// calculate moments</span></span><br><span class="line"><span class="function">vector&lt;Moments&gt; <span class="title">mu</span><span class="params">(contours.size())</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; contours.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">mu[i] = <span class="built_in">moments</span>(contours[i], <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// calculate centroids</span></span><br><span class="line"><span class="function">vector&lt;Point2f&gt; <span class="title">mc</span><span class="params">(contours.size())</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; contours.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">mc[i] = <span class="built_in">Point2d</span>(mu[i].m10 / mu[i].m00, mu[i].m01 / mu[i].m00);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i = <span class="number">0</span>; i &lt; contours.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="built_in">drawContours</span>(res, contours, i, <span class="built_in">randColor</span>(rng));</span><br><span class="line">        <span class="built_in">putText</span>(res, <span class="string">&quot;*&quot;</span>, <span class="built_in">Point</span>(mc[i].x, mc[i].y), FONT_HERSHEY_SIMPLEX, <span class="number">0.4</span>, <span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// helper function for readFolderAndExtractFeatures, preprocess image to binary image</span></span><br><span class="line"><span class="function">Mat <span class="title">preProcess</span><span class="params">(Mat img)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : preprocess img to denoise and remove light</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        img : image to process</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span>(img.<span class="built_in">channels</span>() == <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="built_in">cvtColor</span>(img, img, COLOR_BGR2GRAY);</span><br><span class="line">    &#125;</span><br><span class="line">    Mat imgOut, imgNoise, imgLight;</span><br><span class="line">    <span class="built_in">medianBlur</span>(img, imgNoise, <span class="number">3</span>);</span><br><span class="line">    imgNoise.<span class="built_in">copyTo</span>(imgLight);</span><br><span class="line">    <span class="comment">// read lightPat</span></span><br><span class="line">    Mat lightPat = <span class="built_in">imread</span>(<span class="string">&quot;data/pattern.pgm&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    imgLight = <span class="built_in">removeLight</span>(imgNoise, lightPat);</span><br><span class="line">    <span class="built_in">threshold</span>(imgLight, imgOut, <span class="number">30</span>, <span class="number">255</span>, THRESH_BINARY);</span><br><span class="line">    <span class="keyword">return</span> imgOut;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// helper function for trainAndTest, readFolderAndExtractFeatures</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">readFolderAndExtractFeatures</span><span class="params">(string filePath, <span class="keyword">int</span> label, <span class="keyword">int</span> numTest, </span></span></span><br><span class="line"><span class="params"><span class="function">    vector&lt;<span class="keyword">float</span>&gt; &amp;trainingData, vector&lt;<span class="keyword">int</span>&gt; &amp;trainResponses, vector&lt;<span class="keyword">float</span>&gt; &amp;testData, vector&lt;<span class="keyword">int</span>&gt; &amp;testResponses)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : read file data and extract area and aspect features</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        filePath : image file path</span></span><br><span class="line"><span class="comment">        label : image lable to classify</span></span><br><span class="line"><span class="comment">        numTest : number for test</span></span><br><span class="line"><span class="comment">        trainingData : trainingData feature: area, aspect</span></span><br><span class="line"><span class="comment">        trainResponses : trainingData label</span></span><br><span class="line"><span class="comment">        testData : testData feature: area, aspect</span></span><br><span class="line"><span class="comment">        testResponses : testData label</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        (ref return) : trainingData, trainResponses, testData, testResponses</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    vector&lt;String&gt; files;</span><br><span class="line">    <span class="comment">// get folder</span></span><br><span class="line">    <span class="built_in">glob</span>(filePath, files, <span class="literal">true</span>); </span><br><span class="line">    Mat frame;</span><br><span class="line">    <span class="keyword">int</span> imgIdx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(files.<span class="built_in">size</span>() == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; files.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        frame = <span class="built_in">imread</span>(files[i]);</span><br><span class="line">        <span class="comment">// preprocess image</span></span><br><span class="line">        Mat pre = <span class="built_in">preProcess</span>(frame);</span><br><span class="line">        <span class="comment">// get n features pair for each image</span></span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">float</span>&gt;&gt; features = <span class="built_in">extractFeatures</span>(pre);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; features.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="comment">// first numTest for model test</span></span><br><span class="line">            <span class="keyword">if</span>(imgIdx &gt;= numTest)&#123;</span><br><span class="line">                trainingData.<span class="built_in">push_back</span>(features[i][<span class="number">0</span>]);</span><br><span class="line">                trainingData.<span class="built_in">push_back</span>(features[i][<span class="number">1</span>]);</span><br><span class="line">                trainResponses.<span class="built_in">push_back</span>(label);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                testData.<span class="built_in">push_back</span>(features[i][<span class="number">0</span>]);</span><br><span class="line">                testData.<span class="built_in">push_back</span>(features[i][<span class="number">1</span>]);</span><br><span class="line">                testResponses.<span class="built_in">push_back</span>(label);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        imgIdx++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// helper function for trainAndTest, ploat data error</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">plotData</span><span class="params">(Mat trainingDataMat, Mat trainResponsesMat, string mode, <span class="keyword">float</span>* error)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : ploat train data feature (x: area, y: aspect) distributiion</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        trainingDataMat : trainingDataMat shape [N/2, 2], N is trainData vector size</span></span><br><span class="line"><span class="comment">        trainResponsesMat : trainResponsesMat shape [N, 1], N is trainData label vector size</span></span><br><span class="line"><span class="comment">        error : total error rate to display</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        None</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">float</span> areaMax, areaMin, asMax, asMin;</span><br><span class="line">    areaMax = asMax = <span class="number">0.0</span>;</span><br><span class="line">    areaMin = asMin = <span class="number">99999999</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; trainingDataMat.rows; i++)&#123;</span><br><span class="line">        <span class="keyword">float</span> area = trainingDataMat.at&lt;<span class="keyword">float</span>&gt;(i, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">float</span> aspect = trainingDataMat.at&lt;<span class="keyword">float</span>&gt;(i, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// get min, max value</span></span><br><span class="line">        <span class="keyword">if</span>(area &gt; areaMax)&#123;</span><br><span class="line">            areaMax = area;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(aspect &gt; asMax)&#123;</span><br><span class="line">            asMax = aspect;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(areaMin &gt; area)&#123;</span><br><span class="line">            areaMin = area;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(asMin &gt; area)&#123;</span><br><span class="line">            asMin = aspect;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// create image to display</span></span><br><span class="line">    Mat fig = Mat::<span class="built_in">zeros</span>(<span class="number">512</span>, <span class="number">512</span>, CV_8UC3);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; trainingDataMat.rows; i++)&#123;</span><br><span class="line">        <span class="keyword">float</span> area = trainingDataMat.at&lt;<span class="keyword">float</span>&gt;(i, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">float</span> aspect = trainingDataMat.at&lt;<span class="keyword">float</span>&gt;(i, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// min-max norm [0~1] * 420 pixel</span></span><br><span class="line">        <span class="keyword">int</span> x = (<span class="keyword">int</span>)(<span class="number">420.0f</span>*((area - areaMin) / (areaMax - areaMin)));</span><br><span class="line">        <span class="keyword">int</span> y = (<span class="keyword">int</span>)(<span class="number">420.0f</span>*((aspect - asMin) / (asMax - asMin)));</span><br><span class="line">        <span class="keyword">int</span> label = trainResponsesMat.at&lt;<span class="keyword">int</span>&gt;(i);</span><br><span class="line">        Scalar color;</span><br><span class="line">        <span class="keyword">if</span>(label == <span class="number">0</span>)&#123;</span><br><span class="line">            color = <span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(label == <span class="number">1</span>)&#123;</span><br><span class="line">            color = <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(label == <span class="number">2</span>)&#123;</span><br><span class="line">            color = <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// cicle locate with start at(80, 80) to overcome border</span></span><br><span class="line">        <span class="built_in">circle</span>(fig, <span class="built_in">Point</span>(x+<span class="number">80</span>, y+<span class="number">80</span>), <span class="number">3</span>, color, <span class="number">-1</span>, <span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(error != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        stringstream ss;</span><br><span class="line">        ss &lt;&lt; mode &lt;&lt; <span class="string">&quot; error: &quot;</span> &lt;&lt; *error &lt;&lt; <span class="string">&quot; \%&quot;</span>;</span><br><span class="line">        <span class="built_in">putText</span>(fig, ss.<span class="built_in">str</span>(), <span class="built_in">Point</span>(<span class="number">20</span>, <span class="number">512</span><span class="number">-40</span>), FONT_HERSHEY_SIMPLEX, <span class="number">0.75</span>, <span class="built_in">Scalar</span>(<span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>), <span class="number">1</span>, LINE_AA);</span><br><span class="line">    &#125;</span><br><span class="line">    myWin-&gt;<span class="built_in">addImage</span>(<span class="string">&quot;Fig&quot;</span>, fig);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">defineSVM</span><span class="params">(Ptr&lt;SVM&gt;&amp; svm)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : define svm parameters</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        svm : svm model</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        (ref return) : svm with parameters</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    svm = SVM::<span class="built_in">create</span>();</span><br><span class="line">    svm-&gt;<span class="built_in">setType</span>(SVM::C_SVC);</span><br><span class="line">    svm-&gt;<span class="built_in">setNu</span>(<span class="number">0.05</span>);</span><br><span class="line">    svm-&gt;<span class="built_in">setKernel</span>(SVM::CHI2);</span><br><span class="line">    svm-&gt;<span class="built_in">setDegree</span>(<span class="number">1.0</span>);</span><br><span class="line">    svm-&gt;<span class="built_in">setGamma</span>(<span class="number">2.0</span>);</span><br><span class="line">    svm-&gt;<span class="built_in">setTermCriteria</span>(<span class="built_in">TermCriteria</span>(TermCriteria::MAX_ITER, <span class="number">100</span>, <span class="number">1e-6</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">trainSVM</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : train a svm model and test its error rate</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        mode : machine learning mode</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        None</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    vector&lt;<span class="keyword">float</span>&gt; trainingData;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; trainResponses;</span><br><span class="line">    vector&lt;<span class="keyword">float</span>&gt; testData;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; testResponses;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> numTest = <span class="number">20</span>;</span><br><span class="line">    string nutPath = <span class="string">&quot;data/nut&quot;</span>;</span><br><span class="line">    string ringPath = <span class="string">&quot;data/ring&quot;</span>;</span><br><span class="line">    string screwPath = <span class="string">&quot;data/screw&quot;</span>;</span><br><span class="line">    <span class="comment">// read data path and extract feature</span></span><br><span class="line">    <span class="built_in">readFolderAndExtractFeatures</span>(nutPath, <span class="number">0</span>, numTest, trainingData, trainResponses, testData, testResponses);</span><br><span class="line">    <span class="built_in">readFolderAndExtractFeatures</span>(ringPath, <span class="number">1</span>, numTest, trainingData, trainResponses, testData, testResponses);</span><br><span class="line">    <span class="built_in">readFolderAndExtractFeatures</span>(screwPath, <span class="number">2</span>, numTest, trainingData, trainResponses, testData, testResponses);</span><br><span class="line">    <span class="comment">// cout &lt;&lt; &quot;Num of train samples: &quot; &lt;&lt; trainingData.size() &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; &quot;Num of test samples: &quot; &lt;&lt; testData.size() &lt;&lt; endl;</span></span><br><span class="line">    <span class="function">Mat <span class="title">trainingDataMat</span><span class="params">(trainingData.size() / <span class="number">2</span>, <span class="number">2</span>, CV_32FC1, &amp;trainingData[<span class="number">0</span>])</span></span>;</span><br><span class="line">    <span class="function">Mat <span class="title">trainResponsesMat</span><span class="params">(trainResponses.size(), <span class="number">1</span>, CV_32SC1, &amp;trainResponses[<span class="number">0</span>])</span></span>;</span><br><span class="line">    <span class="function">Mat <span class="title">testDataMat</span><span class="params">(testData.size() / <span class="number">2</span>, <span class="number">2</span>, CV_32FC1, &amp;testData[<span class="number">0</span>])</span></span>;</span><br><span class="line">    <span class="function">Mat <span class="title">testResponsesMat</span><span class="params">(testResponses.size(), <span class="number">1</span>, CV_32SC1, &amp;testResponses[<span class="number">0</span>])</span></span>;</span><br><span class="line">    <span class="comment">// set row sample</span></span><br><span class="line">    Ptr&lt;TrainData&gt; tData = TrainData::<span class="built_in">create</span>(trainingDataMat, ROW_SAMPLE, trainResponsesMat);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// select model</span></span><br><span class="line">    Ptr&lt;SVM&gt; model = SVM::<span class="built_in">create</span>();</span><br><span class="line">    <span class="built_in">defineSVM</span>(model);</span><br><span class="line">    model-&gt;<span class="built_in">train</span>(tData);</span><br><span class="line">    model-&gt;<span class="built_in">save</span>(<span class="string">&quot;model/svm.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(testResponses.<span class="built_in">size</span>() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        Mat testPredict;</span><br><span class="line">        <span class="comment">// predict</span></span><br><span class="line">        model-&gt;<span class="built_in">predict</span>(testDataMat, testPredict);</span><br><span class="line">        testPredict.<span class="built_in">convertTo</span>(testPredict, CV_32SC1);</span><br><span class="line">        Mat errMat = testPredict != testResponsesMat;</span><br><span class="line">        <span class="keyword">float</span> error = <span class="number">100.0f</span> * <span class="built_in">countNonZero</span>(errMat) / testResponses.<span class="built_in">size</span>();</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;svm&quot;</span> &lt;&lt; <span class="string">&quot; Error rate: &quot;</span> &lt;&lt; error &lt;&lt; <span class="string">&quot;\%&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">plotData</span>(trainingDataMat, trainResponsesMat, <span class="string">&quot;svm&quot;</span>, &amp;error);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">plotData</span>(trainingDataMat, trainResponsesMat, <span class="string">&quot;svm&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="keyword">float</span>&gt;&gt; <span class="built_in">extractFeatures</span>(Mat img, vector&lt;<span class="keyword">int</span>&gt;* posLeft, vector&lt;<span class="keyword">int</span>&gt;* posTop)&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : extract image features and get left top loation</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        img : image to get feature</span></span><br><span class="line"><span class="comment">        postLeft : left top_left location</span></span><br><span class="line"><span class="comment">        postTop : top top_left location</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        features: extracted feature</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">float</span>&gt;&gt; features;</span><br><span class="line">    vector&lt;vector&lt;Point&gt;&gt; contours;</span><br><span class="line">    vector&lt;Vec4i&gt; hierarchy;</span><br><span class="line">    Mat temp = img.<span class="built_in">clone</span>();</span><br><span class="line">    <span class="comment">// find contours</span></span><br><span class="line">    <span class="built_in">findContours</span>(temp, contours, hierarchy, RETR_EXTERNAL, CHAIN_APPROX_SIMPLE);</span><br><span class="line">    <span class="keyword">if</span>(contours.<span class="built_in">size</span>() == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> features;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; contours.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        Mat mask = Mat::<span class="built_in">zeros</span>(img.rows, img.cols, CV_8UC1);</span><br><span class="line">        <span class="comment">// draw contours</span></span><br><span class="line">        <span class="built_in">drawContours</span>(mask, contours, i, <span class="built_in">Scalar</span>(<span class="number">1</span>), FILLED, LINE_8, hierarchy, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// get area value</span></span><br><span class="line">        Scalar areaSum = <span class="built_in">sum</span>(mask);</span><br><span class="line">        <span class="keyword">float</span> area = areaSum[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(area &gt; <span class="number">500</span>)&#123;</span><br><span class="line">            <span class="comment">// calculate aspect for area is larger than 500</span></span><br><span class="line">            RotatedRect r = <span class="built_in">minAreaRect</span>(contours[i]);</span><br><span class="line">            <span class="keyword">float</span> w = r.size.width;</span><br><span class="line">            <span class="keyword">float</span> h = r.size.height;</span><br><span class="line">            <span class="keyword">float</span> aspect = w &lt; h ? h / w : w / h;</span><br><span class="line">            vector&lt;<span class="keyword">float</span>&gt; row;</span><br><span class="line">            <span class="comment">// load calculated feature</span></span><br><span class="line">            row.<span class="built_in">push_back</span>(area);</span><br><span class="line">            row.<span class="built_in">push_back</span>(aspect);</span><br><span class="line">            features.<span class="built_in">push_back</span>(row);</span><br><span class="line">            <span class="comment">// load top_left location</span></span><br><span class="line">            <span class="keyword">if</span>(posLeft != <span class="literal">NULL</span>)&#123;</span><br><span class="line">                posLeft-&gt;<span class="built_in">push_back</span>((<span class="keyword">int</span>)r.center.x);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(posTop != <span class="literal">NULL</span>)&#123;</span><br><span class="line">                posTop-&gt;<span class="built_in">push_back</span>((<span class="keyword">int</span>)r.center.y);</span><br><span class="line">            &#125;</span><br><span class="line">            myWin-&gt;<span class="built_in">addImage</span>(<span class="string">&quot;Extracted Feature&quot;</span>, mask * <span class="number">255</span>);</span><br><span class="line">            myWin-&gt;<span class="built_in">render</span>();</span><br><span class="line">            <span class="built_in">waitKey</span>(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> features;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@File          :utils.inl</span></span><br><span class="line"><span class="comment">@Description:  :</span></span><br><span class="line"><span class="comment">@Date          :2021/12/25 20:29:26</span></span><br><span class="line"><span class="comment">@Author        :xieyin</span></span><br><span class="line"><span class="comment">@version       :1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">trainAndTest</span><span class="params">(string mode)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : train a svm model and test its error rate</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        mode : machine learning mode</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        None</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    vector&lt;<span class="keyword">float</span>&gt; trainingData;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; trainResponses;</span><br><span class="line">    vector&lt;<span class="keyword">float</span>&gt; testData;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; testResponses;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> numTest = <span class="number">20</span>;</span><br><span class="line">    string nutPath = <span class="string">&quot;data/nut&quot;</span>;</span><br><span class="line">    string ringPath = <span class="string">&quot;data/ring&quot;</span>;</span><br><span class="line">    string screwPath = <span class="string">&quot;data/screw&quot;</span>;</span><br><span class="line">    <span class="comment">// read data path and extract feature</span></span><br><span class="line">    <span class="built_in">readFolderAndExtractFeatures</span>(nutPath, <span class="number">0</span>, numTest, trainingData, trainResponses, testData, testResponses);</span><br><span class="line">    <span class="built_in">readFolderAndExtractFeatures</span>(ringPath, <span class="number">1</span>, numTest, trainingData, trainResponses, testData, testResponses);</span><br><span class="line">    <span class="built_in">readFolderAndExtractFeatures</span>(screwPath, <span class="number">2</span>, numTest, trainingData, trainResponses, testData, testResponses);</span><br><span class="line">    <span class="comment">// cout &lt;&lt; &quot;Num of train samples: &quot; &lt;&lt; trainingData.size() &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; &quot;Num of test samples: &quot; &lt;&lt; testData.size() &lt;&lt; endl;</span></span><br><span class="line">    <span class="function">Mat <span class="title">trainingDataMat</span><span class="params">(trainingData.size() / <span class="number">2</span>, <span class="number">2</span>, CV_32FC1, &amp;trainingData[<span class="number">0</span>])</span></span>;</span><br><span class="line">    <span class="function">Mat <span class="title">trainResponsesMat</span><span class="params">(trainResponses.size(), <span class="number">1</span>, CV_32SC1, &amp;trainResponses[<span class="number">0</span>])</span></span>;</span><br><span class="line">    <span class="function">Mat <span class="title">testDataMat</span><span class="params">(testData.size() / <span class="number">2</span>, <span class="number">2</span>, CV_32FC1, &amp;testData[<span class="number">0</span>])</span></span>;</span><br><span class="line">    <span class="function">Mat <span class="title">testResponsesMat</span><span class="params">(testResponses.size(), <span class="number">1</span>, CV_32SC1, &amp;testResponses[<span class="number">0</span>])</span></span>;</span><br><span class="line">    <span class="comment">// set row sample</span></span><br><span class="line">    Ptr&lt;TrainData&gt; tData = TrainData::<span class="built_in">create</span>(trainingDataMat, ROW_SAMPLE, trainResponsesMat);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// select model</span></span><br><span class="line">    Ptr&lt;T&gt; model = T::<span class="built_in">create</span>();</span><br><span class="line">    model-&gt;<span class="built_in">train</span>(tData);</span><br><span class="line">    model-&gt;<span class="built_in">save</span>(<span class="string">&quot;model/&quot;</span> + mode + <span class="string">&quot;.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(testResponses.<span class="built_in">size</span>() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        Mat testPredict;</span><br><span class="line">        <span class="comment">// predict</span></span><br><span class="line">        model-&gt;<span class="built_in">predict</span>(testDataMat, testPredict);</span><br><span class="line">        testPredict.<span class="built_in">convertTo</span>(testPredict, CV_32SC1);</span><br><span class="line">        Mat errMat = testPredict != testResponsesMat;</span><br><span class="line">        <span class="keyword">float</span> error = <span class="number">100.0f</span> * <span class="built_in">countNonZero</span>(errMat) / testResponses.<span class="built_in">size</span>();</span><br><span class="line">        cout &lt;&lt; mode &lt;&lt; <span class="string">&quot; Error rate: &quot;</span> &lt;&lt; error &lt;&lt; <span class="string">&quot;\%&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">plotData</span>(trainingDataMat, trainResponsesMat, mode, &amp;error);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">plotData</span>(trainingDataMat, trainResponsesMat, mode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">predict</span><span class="params">(vector&lt;vector&lt;<span class="keyword">float</span>&gt;&gt; features, vector&lt;<span class="keyword">int</span>&gt; posLeft, vector&lt;<span class="keyword">int</span>&gt; posTop, string mode, Mat&amp; imgOut)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : predict features extracted from imgOut, and put text in left top position</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        features : extracted feature from imgOut</span></span><br><span class="line"><span class="comment">        posLeft : left_top left location</span></span><br><span class="line"><span class="comment">        posTop : left_top top location</span></span><br><span class="line"><span class="comment">        mode : machine learning mode</span></span><br><span class="line"><span class="comment">        imgOut : the img with text output</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        (ref return) : imgOut</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; features.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="function">Mat <span class="title">predDataMat</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>, CV_32FC1, &amp;features[i][<span class="number">0</span>])</span></span>;</span><br><span class="line">        Ptr&lt;T&gt; model = Algorithm::load&lt;T&gt;(<span class="string">&quot;model/&quot;</span> + mode + <span class="string">&quot;.xml&quot;</span>);</span><br><span class="line">        <span class="keyword">float</span> result = model-&gt;<span class="built_in">predict</span>(predDataMat);</span><br><span class="line">        cout &lt;&lt; result &lt;&lt; endl;</span><br><span class="line">        stringstream ss;</span><br><span class="line">        Scalar color;</span><br><span class="line">        <span class="keyword">if</span>(result == <span class="number">0</span>)&#123;</span><br><span class="line">            color = <span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            ss &lt;&lt; <span class="string">&quot;NUT&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(result == <span class="number">1</span>)&#123;</span><br><span class="line">            color = <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>);</span><br><span class="line">            ss &lt;&lt; <span class="string">&quot;RING&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(result == <span class="number">2</span>)&#123;</span><br><span class="line">            color = <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>);</span><br><span class="line">            ss &lt;&lt; <span class="string">&quot;SCREW&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putText</span>(imgOut, ss.<span class="built_in">str</span>(), <span class="built_in">Point2d</span>(posLeft[i], posTop[i]), FONT_HERSHEY_SIMPLEX, <span class="number">0.4</span>, color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3）主函数</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@File          :main.cpp</span></span><br><span class="line"><span class="comment">@Description:  :</span></span><br><span class="line"><span class="comment">@Date          :2021/12/25 09:23:30</span></span><br><span class="line"><span class="comment">@Author        :xieyin</span></span><br><span class="line"><span class="comment">@version       :1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/ml.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv::ml;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;mwindow.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;utils.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* keys = &#123;</span><br><span class="line">    <span class="string">&quot;&#123;help h usage ? | | Print this message&#125;&quot;</span></span><br><span class="line">    <span class="string">&quot;&#123;@image | | Image for test&#125;&quot;</span></span><br><span class="line">    <span class="string">&quot;&#123;@lightPat | | light pattern for test image&#125;&quot;</span></span><br><span class="line">    <span class="string">&quot;&#123;@mode | svm | machine learning mode, default svm&#125;&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">shared_ptr&lt;MWindow&gt; myWin;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span></span>&#123;</span><br><span class="line">    <span class="comment">// command line parser</span></span><br><span class="line">    <span class="function">CommandLineParser <span class="title">parser</span><span class="params">(argc, argv, keys)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(parser.<span class="built_in">has</span>(<span class="string">&quot;help&quot;</span>))&#123;</span><br><span class="line">        parser.<span class="built_in">printMessage</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!parser.<span class="built_in">check</span>())&#123;</span><br><span class="line">        parser.<span class="built_in">printErrors</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// define mywin</span></span><br><span class="line">    myWin = make_shared&lt;MWindow&gt;(<span class="string">&quot;Main Window&quot;</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">700</span>, <span class="number">1000</span>, <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// get test image path</span></span><br><span class="line">    String imgFile = parser.get&lt;String&gt;(<span class="number">0</span>); </span><br><span class="line">    Mat img = <span class="built_in">imread</span>(imgFile, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(img.data == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;can not read image file.&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get light pattern image</span></span><br><span class="line">    String ligPatFile = parser.get&lt;String&gt;(<span class="number">1</span>);</span><br><span class="line">    Mat lightPat = <span class="built_in">imread</span>(ligPatFile, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(lightPat.data == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;can not read image file.&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// mdeianblur light pattern</span></span><br><span class="line">    <span class="built_in">medianBlur</span>(lightPat, lightPat, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// copy img to imgOut</span></span><br><span class="line">    Mat imgOut = img.<span class="built_in">clone</span>();</span><br><span class="line">    <span class="built_in">cvtColor</span>(imgOut, imgOut, COLOR_GRAY2BGR);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// preprocess image</span></span><br><span class="line">    Mat pre = <span class="built_in">preProcess</span>(img);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get feature and top left location from image</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; posLeft, posTop;</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">float</span>&gt;&gt; features = <span class="built_in">extractFeatures</span>(pre, &amp;posLeft, &amp;posTop);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get mode selection</span></span><br><span class="line">    string mode = parser.get&lt;string&gt;(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// train and predict model</span></span><br><span class="line">    <span class="keyword">if</span> (mode == <span class="string">&quot;svm&quot;</span>)&#123;</span><br><span class="line">        <span class="built_in">trainSVM</span>();</span><br><span class="line">        <span class="comment">// trainAndTest&lt;SVM&gt;(mode);</span></span><br><span class="line">        predict&lt;SVM&gt;(features, posLeft, posTop, mode, imgOut);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (mode == <span class="string">&quot;bayes&quot;</span>)&#123;</span><br><span class="line">        trainAndTest&lt;NormalBayesClassifier&gt;(mode);</span><br><span class="line">        predict&lt;NormalBayesClassifier&gt;(features, posLeft, posTop, mode, imgOut);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(mode == <span class="string">&quot;boost&quot;</span>)&#123;</span><br><span class="line">        trainAndTest&lt;Boost&gt;(mode);</span><br><span class="line">        predict&lt;Boost&gt;(features, posLeft, posTop, mode, imgOut);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;not support model&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    myWin-&gt;<span class="built_in">addImage</span>(<span class="string">&quot;binary Image&quot;</span>, pre);</span><br><span class="line">    myWin-&gt;<span class="built_in">addImage</span>(<span class="string">&quot;result&quot;</span>, imgOut);</span><br><span class="line">    myWin-&gt;<span class="built_in">render</span>();</span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;题目要求：在上一章&lt;a href=&quot;https://blog.csdn.net/qq_37172182/article/details/122088583&quot;&gt;OpenCV—-简单目标提取和分割&lt;/a&gt;中尝试使用opencv连</summary>
      
    
    
    
    <category term="opencv" scheme="http://example.com/categories/opencv/"/>
    
    
    <category term="opencv ml svm bayes boost" scheme="http://example.com/tags/opencv-ml-svm-bayes-boost/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV----简单目标提取和分割</title>
    <link href="http://example.com/2021/12/22/OpenCV----%E7%AE%80%E5%8D%95%E7%9B%AE%E6%A0%87%E6%8F%90%E5%8F%96%E5%92%8C%E5%88%86%E5%89%B2/"/>
    <id>http://example.com/2021/12/22/OpenCV----%E7%AE%80%E5%8D%95%E7%9B%AE%E6%A0%87%E6%8F%90%E5%8F%96%E5%92%8C%E5%88%86%E5%89%B2/</id>
    <published>2021-12-22T08:35:36.000Z</published>
    <updated>2022-01-20T12:49:49.954Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>题目要求：提取一张背景简单的图像中物体的信息，包括面积，质心等特征；考虑图像存在噪声，首先对图像进行预处理，然后使用分割算法，在图像中标注对应信息；可能的话考虑在一个窗口中显示图像处理过程结果；</p><blockquote><p>分析：<br>1）对图像降噪的基本流程包括：噪声消除、光消除、二值化；<br>2）常用的分割算法包括：轮廓检测findContours()和连通域分析connectedComponent()；<br>3）考虑设计多窗口类MWindow,支持初始化定义窗口大小、子窗口数量设计；<br>4）考虑到光消除算法可以提供背景图，也可以不提供背景图，分割算法可以之获取分割图像，可以获取连通域面积特征，也可以获取连通域质心或轮廓特征，因此设计支持命令行控制的CommandLineParser对象；</p></blockquote><p>代码实现：</p><ul><li>   MWindow类设计：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mwindow.hpp</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@File          :mwindow.hpp</span></span><br><span class="line"><span class="comment">@Description:  :multiwindow to displace multi images</span></span><br><span class="line"><span class="comment">@Date          :2021/12/22 15:56:02</span></span><br><span class="line"><span class="comment">@Author        :xieyin</span></span><br><span class="line"><span class="comment">@version       :1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MWindow</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">// consturtor</span></span><br><span class="line">        <span class="built_in">MWindow</span>(string windowTitle, <span class="keyword">int</span> rows, <span class="keyword">int</span> cols, <span class="keyword">int</span> flags);</span><br><span class="line">        <span class="comment">// add image into canvas</span></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">addImage</span><span class="params">(string title, Mat img, <span class="keyword">bool</span> render = <span class="literal">false</span>)</span></span>;</span><br><span class="line">        <span class="comment">// remove image from canvas</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">removeImage</span><span class="params">(<span class="keyword">int</span> pos)</span></span>;</span><br><span class="line">        <span class="comment">// adjust all image size in canvas</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">render</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">int</span> mRows, mCols;</span><br><span class="line">        string mWindowTitle;</span><br><span class="line">        Mat mCanvas;</span><br><span class="line">        vector&lt;string&gt; mSubTitles;</span><br><span class="line">        vector&lt;Mat&gt; mSubImages;</span><br><span class="line">        </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">MWindow::<span class="built_in">MWindow</span>(string windowTitle, <span class="keyword">int</span> rows, <span class="keyword">int</span> cols, <span class="keyword">int</span> flags):<span class="built_in">mWindowTitle</span>(windowTitle), <span class="built_in">mRows</span>(rows), <span class="built_in">mCols</span>(cols)&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : MWindow constructor</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        windowTitle : whole window title</span></span><br><span class="line"><span class="comment">        rows : sub window rows</span></span><br><span class="line"><span class="comment">        cols : sub window cols</span></span><br><span class="line"><span class="comment">        flags : namedWindow flags (eg, WINDOW_AUTOSIZE)</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">// create canvas</span></span><br><span class="line">    <span class="built_in">namedWindow</span>(mWindowTitle, flags);</span><br><span class="line">    mCanvas = <span class="built_in">Mat</span>(<span class="number">700</span>, <span class="number">1500</span>, CV_8UC3);</span><br><span class="line">    <span class="built_in">imshow</span>(mWindowTitle, mCanvas);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MWindow::addImage</span><span class="params">(string title, Mat img, <span class="keyword">bool</span> render)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : add title and image into canvas</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        title : sub image title</span></span><br><span class="line"><span class="comment">        img : image to be added</span></span><br><span class="line"><span class="comment">        render : render(flag) whether need to adjust the image for canvas</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        index : sub image index in total mRows * mCols</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    mSubTitles.<span class="built_in">push_back</span>(title);</span><br><span class="line">    mSubImages.<span class="built_in">push_back</span>(img);</span><br><span class="line">    <span class="keyword">if</span>(render)&#123;</span><br><span class="line">        MWindow::<span class="built_in">render</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mSubImages.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MWindow::removeImage</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : remove image from canvas based on index</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        pos : sub image index in total mRows * mCols</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        None</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    mSubTitles.<span class="built_in">erase</span>(mSubTitles.<span class="built_in">begin</span>() + pos);</span><br><span class="line">    mSubImages.<span class="built_in">erase</span>(mSubImages.<span class="built_in">begin</span>() + pos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MWindow::render</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : fill title and image into canvas in suitable way</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        None</span></span><br><span class="line"><span class="comment">    @Returns  :</span></span><br><span class="line"><span class="comment">        None </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    mCanvas.<span class="built_in">setTo</span>(<span class="built_in">Scalar</span>(<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>));</span><br><span class="line">    <span class="comment">// get sub canvas size</span></span><br><span class="line">    <span class="keyword">int</span> cellH = mCanvas.rows / mRows;</span><br><span class="line">    <span class="keyword">int</span> cellW = mCanvas.cols / mCols;</span><br><span class="line">    <span class="keyword">int</span> margin = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// set total number of images to load</span></span><br><span class="line">    <span class="keyword">int</span> numImgs = mSubImages.<span class="built_in">size</span>() &gt; mRows * mCols ? mRows * mCols : mSubImages.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numImgs; i++)&#123;</span><br><span class="line">        <span class="comment">// get title</span></span><br><span class="line">        string title = mSubTitles[i];</span><br><span class="line">        <span class="comment">// get sub canvas top left location</span></span><br><span class="line">        <span class="keyword">int</span> cellX = (cellW) * ((i) % mCols);</span><br><span class="line">        <span class="keyword">int</span> cellY = (cellH) * <span class="built_in">floor</span>( (i) / (<span class="keyword">float</span>) mCols);</span><br><span class="line">        <span class="function">Rect <span class="title">mask</span><span class="params">(cellX, cellY, cellW, cellH)</span></span>;</span><br><span class="line">        <span class="comment">// set subcanvas size</span></span><br><span class="line">        <span class="built_in">rectangle</span>(mCanvas, <span class="built_in">Rect</span>(cellX, cellY, cellW, cellH), <span class="built_in">Scalar</span>(<span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>), <span class="number">1</span>);</span><br><span class="line">        <span class="function">Mat <span class="title">cell</span><span class="params">(mCanvas, mask)</span></span>;</span><br><span class="line">        Mat imgResz;</span><br><span class="line">        <span class="comment">// get cell aspect</span></span><br><span class="line">        <span class="keyword">double</span> cellAspect = (<span class="keyword">double</span>) cellW / (<span class="keyword">double</span>) cellH;</span><br><span class="line">        <span class="comment">// get image</span></span><br><span class="line">        Mat img = mSubImages[i];</span><br><span class="line">        <span class="comment">// get image aspect</span></span><br><span class="line">        <span class="keyword">double</span> imgAspect = (<span class="keyword">double</span>) img.cols / (<span class="keyword">double</span>) img.cols;</span><br><span class="line">        <span class="keyword">double</span> wAspect = (<span class="keyword">double</span>) cellW / (<span class="keyword">double</span>) img.cols;</span><br><span class="line">        <span class="keyword">double</span> hAspect = (<span class="keyword">double</span>) cellH / (<span class="keyword">double</span>) img.rows;</span><br><span class="line">        <span class="comment">// get suitable aspect and resize image</span></span><br><span class="line">        <span class="keyword">double</span> aspect = cellAspect &lt; imgAspect ? wAspect : hAspect;</span><br><span class="line">        <span class="built_in">resize</span>(img, imgResz, <span class="built_in">Size</span>(<span class="number">0</span>, <span class="number">0</span>), aspect, aspect);</span><br><span class="line">        <span class="comment">// if gray image, convert to BGR</span></span><br><span class="line">        <span class="keyword">if</span>(imgResz.<span class="built_in">channels</span>() == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">cvtColor</span>(imgResz, imgResz, COLOR_GRAY2BGR);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">Mat <span class="title">subCell</span><span class="params">(mCanvas, Rect(cellX, cellY, imgResz.cols, imgResz.rows))</span></span>;</span><br><span class="line">        imgResz.<span class="built_in">copyTo</span>(subCell);</span><br><span class="line">        <span class="built_in">putText</span>(cell, title, <span class="built_in">Point</span>(<span class="number">20</span>, <span class="number">20</span>), FONT_HERSHEY_SIMPLEX, <span class="number">0.6</span>, <span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// show total canvas</span></span><br><span class="line">    <span class="built_in">imshow</span>(mWindowTitle, mCanvas);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>   主函数：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@File          :main.cpp</span></span><br><span class="line"><span class="comment">@Description:  :do connected component demo in a multi window</span></span><br><span class="line"><span class="comment">@Date          :2021/12/22 15:56:53</span></span><br><span class="line"><span class="comment">@Author        :xieyin</span></span><br><span class="line"><span class="comment">@version       :1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/core/utility.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;mwindow.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line">shared_ptr&lt;MWindow&gt; myWin;</span><br><span class="line"></span><br><span class="line"><span class="function">Scalar <span class="title">randColor</span><span class="params">(RNG&amp; rng)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : genert randow color</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        rng : random number generator object</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        Sacalar() : BGR scalar</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">auto</span> iColor = (<span class="keyword">unsigned</span>)rng;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Scalar</span>(iColor&amp;<span class="number">255</span>, (iColor &gt;&gt; <span class="number">8</span>)&amp;<span class="number">255</span>, (iColor &gt;&gt; <span class="number">16</span>)&amp;<span class="number">255</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Mat <span class="title">calLigthPattern</span><span class="params">(Mat img)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : get source image&#x27;s light pattern </span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        img : source BGR image or Gray image</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        pattern : the light pattern</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Mat pattern;</span><br><span class="line">    <span class="built_in">blur</span>(img, pattern, <span class="built_in">Size</span>(img.cols / <span class="number">3</span>, img.cols / <span class="number">3</span>));</span><br><span class="line">    <span class="keyword">return</span> pattern;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Mat <span class="title">removeLight</span><span class="params">(Mat img, Mat pattern, <span class="keyword">int</span> methodLight)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : remove light between img and pattern based on method light</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        img : source BGR/Gray image</span></span><br><span class="line"><span class="comment">        pattern : pattern BGR/Gray image</span></span><br><span class="line"><span class="comment">        methodLight : choise options: 0 difference, 1 div</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        aux : light removed BGR/Gray image</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Mat aux;</span><br><span class="line">    <span class="keyword">if</span>(methodLight == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">// div operation in float 32 format CV_32F</span></span><br><span class="line">        Mat img32, pattern32;</span><br><span class="line">        img.<span class="built_in">convertTo</span>(img32, <span class="number">5</span>);</span><br><span class="line">        pattern.<span class="built_in">convertTo</span>(pattern32, <span class="number">5</span>);</span><br><span class="line">        aux = <span class="number">1.0</span> - (img32 / pattern32);</span><br><span class="line">        <span class="comment">// covert to CV_8U and clip</span></span><br><span class="line">        aux.<span class="built_in">convertTo</span>(aux, <span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// difference</span></span><br><span class="line">        aux = pattern - img;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> aux;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">connectedComponents</span><span class="params">(Mat img_thr)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : opencv connnected components</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        img : threshold image</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        None</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   Mat labels;</span><br><span class="line">   <span class="keyword">auto</span> num_objs = <span class="built_in">connectedComponents</span>(img_thr, labels);</span><br><span class="line">   <span class="keyword">if</span>(num_objs &lt; <span class="number">2</span>)&#123;</span><br><span class="line">       cout &lt;&lt; <span class="string">&quot;no object is detected. &quot;</span> &lt;&lt; endl;</span><br><span class="line">       <span class="keyword">return</span> ;</span><br><span class="line">   &#125;</span><br><span class="line">   Mat res = Mat::<span class="built_in">zeros</span>(img_thr.rows, img_thr.cols, CV_8UC3);</span><br><span class="line">   <span class="function">RNG <span class="title">rng</span><span class="params">(<span class="number">0xFFFFFFFF</span>)</span></span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">auto</span> i = <span class="number">1</span>; i &lt; num_objs; i++)&#123;</span><br><span class="line">       Mat mask = labels == i;</span><br><span class="line">       res.<span class="built_in">setTo</span>(<span class="built_in">randColor</span>(rng), mask);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//    imshow(&quot;result&quot;, res);</span></span><br><span class="line">   myWin -&gt; <span class="built_in">addImage</span>(<span class="string">&quot;result&quot;</span>, res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">connectedComponentsWithStats</span><span class="params">(Mat img_thr)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : connnected components with stats</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        img : threshold image</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        None</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Mat labels, stats, centroids;</span><br><span class="line">    <span class="keyword">auto</span> num_objs = <span class="built_in">connectedComponentsWithStats</span>(img_thr, labels, stats, centroids);</span><br><span class="line">    <span class="keyword">if</span>(num_objs &lt; <span class="number">2</span>)&#123;</span><br><span class="line">       cout &lt;&lt; <span class="string">&quot;no object is detected. &quot;</span> &lt;&lt; endl;</span><br><span class="line">       <span class="keyword">return</span> ;</span><br><span class="line">   &#125;</span><br><span class="line">   Mat res = Mat::<span class="built_in">zeros</span>(img_thr.rows, img_thr.cols, CV_8UC3);</span><br><span class="line">   <span class="function">RNG <span class="title">rng</span><span class="params">(<span class="number">0xFFFFFFFF</span>)</span></span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">auto</span> i = <span class="number">1</span>; i &lt; num_objs; i++)&#123;</span><br><span class="line">       Mat mask = labels == i;</span><br><span class="line">       res.<span class="built_in">setTo</span>(<span class="built_in">randColor</span>(rng), mask);</span><br><span class="line">       stringstream ss;</span><br><span class="line">       ss &lt;&lt; <span class="string">&quot;area: &quot;</span> &lt;&lt; stats.at&lt;<span class="keyword">int</span>&gt;(i, CC_STAT_AREA);</span><br><span class="line">       <span class="comment">// add text info</span></span><br><span class="line">       <span class="built_in">putText</span>(res, ss.<span class="built_in">str</span>(), centroids.at&lt;Point2d&gt;(i), FONT_HERSHEY_SIMPLEX, <span class="number">0.3</span>, <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>));</span><br><span class="line">   &#125;</span><br><span class="line">   myWin -&gt; <span class="built_in">addImage</span>(<span class="string">&quot;result&quot;</span>, res);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findContours</span><span class="params">(Mat img_thr)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : find contours and put text</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        img : threshold image</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        None</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    vector&lt;vector&lt;Point&gt;&gt; contours;</span><br><span class="line">    <span class="built_in">findContours</span>(img_thr, contours, RETR_EXTERNAL, CHAIN_APPROX_SIMPLE);</span><br><span class="line">    <span class="keyword">if</span>(contours.<span class="built_in">size</span>() == <span class="number">0</span>)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;no contours are found .&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">RNG <span class="title">rng</span><span class="params">(<span class="number">0xFFFFFFFF</span>)</span></span>;</span><br><span class="line">    Mat res = Mat::<span class="built_in">zeros</span>(img_thr.rows, img_thr.cols, CV_8UC3);</span><br><span class="line">    <span class="comment">// calculate moments</span></span><br><span class="line"><span class="function">vector&lt;Moments&gt; <span class="title">mu</span><span class="params">(contours.size())</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; contours.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">mu[i] = <span class="built_in">moments</span>(contours[i], <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// calculate centroids</span></span><br><span class="line"><span class="function">vector&lt;Point2f&gt; <span class="title">mc</span><span class="params">(contours.size())</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; contours.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">mc[i] = <span class="built_in">Point2d</span>(mu[i].m10 / mu[i].m00, mu[i].m01 / mu[i].m00);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i = <span class="number">0</span>; i &lt; contours.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="built_in">drawContours</span>(res, contours, i, <span class="built_in">randColor</span>(rng));</span><br><span class="line">        <span class="built_in">putText</span>(res, <span class="string">&quot;*&quot;</span>, <span class="built_in">Point</span>(mc[i].x, mc[i].y), FONT_HERSHEY_SIMPLEX, <span class="number">0.4</span>, <span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    myWin -&gt; <span class="built_in">addImage</span>(<span class="string">&quot;result&quot;</span>, res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* keys  = &#123;</span><br><span class="line">    <span class="string">&quot;&#123;help h usage ? | | print this message&#125;&quot;</span></span><br><span class="line">    <span class="string">&quot;&#123;@image | | Image to process&#125;&quot;</span></span><br><span class="line">    <span class="string">&quot;&#123;@lightPattern | | Image light pattern applied to image&#125;&quot;</span></span><br><span class="line">    <span class="string">&quot;&#123;lightMethod | 1 | Method to remove image background, 0 diff, 1 div, 2 no light removal&#125;&quot;</span></span><br><span class="line">    <span class="string">&quot;&#123;segMethod | 2 | Method to segment: 1 connected components, 2 connected components with states, 3 find contours&#125;&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span></span>&#123;</span><br><span class="line">    <span class="function">CommandLineParser <span class="title">parser</span><span class="params">(argc, argv, keys)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(parser.<span class="built_in">has</span>(<span class="string">&quot;help&quot;</span>))&#123;</span><br><span class="line">        parser.<span class="built_in">printMessage</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// load source img and light pattern img, set light and segment method</span></span><br><span class="line">    String imgFile = parser.get&lt;String&gt;(<span class="number">0</span>);</span><br><span class="line">    String lightPat = parser.get&lt;String&gt;(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">auto</span> methodLight = parser.get&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;lightMethod&quot;</span>);</span><br><span class="line">    <span class="keyword">auto</span> methodSeg = parser.get&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;segMethod&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// check commoand format</span></span><br><span class="line">    <span class="keyword">if</span>(!parser.<span class="built_in">check</span>())&#123;</span><br><span class="line">        parser.<span class="built_in">printErrors</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// read source image</span></span><br><span class="line">    Mat img = <span class="built_in">imread</span>(imgFile, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(img.data == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Error load image file . &quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    myWin = make_shared&lt;MWindow&gt;(<span class="string">&quot;Main Window&quot;</span>, <span class="number">2</span>, <span class="number">3</span>, WINDOW_AUTOSIZE);</span><br><span class="line">    <span class="comment">// create denoise image and box_smooth img</span></span><br><span class="line">    Mat img_noise, img_box_smooth;</span><br><span class="line">    <span class="built_in">medianBlur</span>(img, img_noise, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">blur</span>(img, img_box_smooth, <span class="built_in">Size</span>(<span class="number">3</span>, <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="comment">// read light image</span></span><br><span class="line">    Mat imgLightPat = <span class="built_in">imread</span>(lightPat, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(imgLightPat.data == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="comment">// use blur with large kernel to get light pattern</span></span><br><span class="line">        imgLightPat = <span class="built_in">calLigthPattern</span>(img_noise);   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">medianBlur</span>(imgLightPat, imgLightPat, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for image without light pattern </span></span><br><span class="line">    Mat img_no_light;</span><br><span class="line">    img_noise.<span class="built_in">copyTo</span>(img_no_light);</span><br><span class="line">    <span class="keyword">if</span>(methodLight != <span class="number">2</span>)&#123;</span><br><span class="line">        img_no_light = <span class="built_in">removeLight</span>(img_noise, imgLightPat, methodLight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Mat img_thread;</span><br><span class="line">    <span class="keyword">if</span>(methodLight != <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">threshold</span>(img_no_light, img_thread, <span class="number">30</span>, <span class="number">255</span>, THRESH_BINARY);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">threshold</span>(img_no_light, img_thread, <span class="number">140</span>, <span class="number">255</span>, THRESH_BINARY_INV);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// show image</span></span><br><span class="line">    myWin-&gt;<span class="built_in">addImage</span>(<span class="string">&quot;Input&quot;</span>, img);</span><br><span class="line">    myWin-&gt;<span class="built_in">addImage</span>(<span class="string">&quot;Input without noise&quot;</span>, img_noise);</span><br><span class="line">    myWin-&gt;<span class="built_in">addImage</span>(<span class="string">&quot;light pattern&quot;</span>, imgLightPat);</span><br><span class="line">    myWin-&gt;<span class="built_in">addImage</span>(<span class="string">&quot;no light&quot;</span>, img_no_light);</span><br><span class="line">    myWin-&gt;<span class="built_in">addImage</span>(<span class="string">&quot;thread&quot;</span>, img_thread);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// add result image</span></span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (methodSeg)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">connectedComponents</span>(img_thread);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">connectedComponentsWithStats</span>(img_thread);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">findContours</span>(img_thread);</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    myWin-&gt;<span class="built_in">render</span>();</span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果展示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./main -h <span class="comment">#命令行查看使用方法</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/aa5f78b77fc44a2eb0a83f1348e42846.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfMzcxNzIxODI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./main ../data/test.pgm  -lightMethod=2 -segMethod=2 <span class="comment"># 无需背景图片输入</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/556469f7858242e88299ca3e4820a949.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfMzcxNzIxODI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./main ../data/test.pgm ../data/light.pgm -lightMethod=2 -segMethod=2 <span class="comment"># 一张原始图像和一张背景图像进行分割</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/7321a1e2a85042d6b840dfe8f317096e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfMzcxNzIxODI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./main ../data/test.pgm ../data/light.pgm -lightMethod=0 -segMethod=3 <span class="comment"># 根据原始图像和背景图像进行轮廓和质心提取</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/0ad1a1ed25df4554b2518a9978a5f2bf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfMzcxNzIxODI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;题目要求：提取一张背景简单的图像中物体的信息，包括面积，质心等特征；考虑图像存在噪声，首先对图像进行预处理，然后使用分割算法，在图像中标注对应信息；可能的话考虑在一个窗口中显示图像处理过程结果；&lt;/p&gt;
&lt;blockquot</summary>
      
    
    
    
    <category term="opencv" scheme="http://example.com/categories/opencv/"/>
    
    
    <category term="opencv 光消除 轮廓提取 连通组件分析 图像分割" scheme="http://example.com/tags/opencv-%E5%85%89%E6%B6%88%E9%99%A4-%E8%BD%AE%E5%BB%93%E6%8F%90%E5%8F%96-%E8%BF%9E%E9%80%9A%E7%BB%84%E4%BB%B6%E5%88%86%E6%9E%90-%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV----GUI设计示例</title>
    <link href="http://example.com/2021/12/20/OpenCV----GUI%E8%AE%BE%E8%AE%A1%E7%A4%BA%E4%BE%8B/"/>
    <id>http://example.com/2021/12/20/OpenCV----GUI%E8%AE%BE%E8%AE%A1%E7%A4%BA%E4%BE%8B/</id>
    <published>2021-12-20T07:20:43.000Z</published>
    <updated>2022-01-20T12:49:49.954Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>题目要求：打开一张lena.jpg图片，支持滑动条进行blur滤波处理；支持鼠标左键按下画圆圈；对每次进行滑动条的操作，支持按钮点击进行blur、gray、bgr和sobel滤波处理。</p><blockquote><p>分析：<br>1）创建滑动条函数：createTrackbar(“Lena”, “Lena”, &amp;blurAmount, 30, onChangeTrackBar, &amp;img)和回调函数onChangeTrackBar(int pos, void* srcData)；<br>2）鼠标事件函数：setMouseCallback(“Lena”, onMouseCircle, &amp;img)和回调函数onMouseCircle(int event, int x, int y, int flags, void* srcData)；<br>3）创建按钮函数：createButton(“Blur”, blurCallback, NULL, QT_CHECKBOX, 0)和回调函数void blurCallback(int state, void* userData)；<br>4）考虑先后执行顺序，滑动条和鼠标部分先后，滤波在二者之后，获取当前图像的状态进行处理，考虑传入全局变量；</p></blockquote><p>代码示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@File          :buttonWithMouse.cpp</span></span><br><span class="line"><span class="comment">@Description:  : opencv with qt demo, button, trackbar and mouse action</span></span><br><span class="line"><span class="comment">@Date          :2021/12/20 14:53:03</span></span><br><span class="line"><span class="comment">@Author        :xxx</span></span><br><span class="line"><span class="comment">@version       :1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// OpenCV includes</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;opencv2/core.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;opencv2/imgproc.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;opencv2/highgui.hpp&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> blurAmount = <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line">Mat img;</span><br><span class="line"><span class="keyword">bool</span> applyGray=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">bool</span> applyBlur=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">bool</span> applySobel=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">applyFilters</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : apply gray, blur and sobel filter selected by button state</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        None</span></span><br><span class="line"><span class="comment">    @Returns  :</span></span><br><span class="line"><span class="comment">        None </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">Mat result;</span><br><span class="line">    <span class="comment">// cope the gobal img to result, do operation on the result</span></span><br><span class="line">img.<span class="built_in">copyTo</span>(result);</span><br><span class="line"><span class="keyword">if</span>(applyGray)&#123;</span><br><span class="line"><span class="built_in">cvtColor</span>(result, result, COLOR_BGR2GRAY);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(applyBlur)&#123;</span><br><span class="line"><span class="built_in">blur</span>(result, result, <span class="built_in">Size</span>(<span class="number">5</span>,<span class="number">5</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(applySobel)&#123;</span><br><span class="line"><span class="built_in">Sobel</span>(result, result, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;Lena&quot;</span>, result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// BattonCallback fuctor: (int state, void* userData)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">grayCallback</span><span class="params">(<span class="keyword">int</span> state, <span class="keyword">void</span>* userData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">applyGray= <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">applyFilters</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bgrCallback</span><span class="params">(<span class="keyword">int</span> state, <span class="keyword">void</span>* userData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">applyGray= <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">applyFilters</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">blurCallback</span><span class="params">(<span class="keyword">int</span> state, <span class="keyword">void</span>* userData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">applyBlur= (<span class="keyword">bool</span>)state;</span><br><span class="line"><span class="built_in">applyFilters</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sobelCallback</span><span class="params">(<span class="keyword">int</span> state, <span class="keyword">void</span>* userData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">applySobel= !applySobel;</span><br><span class="line"><span class="built_in">applyFilters</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// trackbar functor: typedef void (*createTrackbar_)(int pos, void* userdata)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onChangeTrackBar</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">void</span>* srcData)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : functor for createTrackBar to do blue filter with pos size</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        pos: the filter size</span></span><br><span class="line"><span class="comment">        srcData: image data</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        None</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">if</span>(pos &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   Mat desData;</span><br><span class="line">   Mat* img = (Mat*) srcData;</span><br><span class="line">   <span class="comment">// opencv blur filter</span></span><br><span class="line">   <span class="built_in">blur</span>(*img, desData, <span class="built_in">Size</span>(pos, pos));</span><br><span class="line">   <span class="built_in">imshow</span>(<span class="string">&quot;Lena&quot;</span>, desData);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mouse functor: typedef void (*SetMouseCallback_)(int pos, void* userdata)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onMouseCircle</span><span class="params">(<span class="keyword">int</span> event, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> flags, <span class="keyword">void</span>* srcData)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : create a circle in image when mouse click down</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        event: opencv default mouse event CV_EVENT_MOUSEMOVE 0, CV_EVENT_LBUTTONDOWN 1, ...</span></span><br><span class="line"><span class="comment">        x: pos x</span></span><br><span class="line"><span class="comment">        y: pos y</span></span><br><span class="line"><span class="comment">        flags: opencv default CV_EVENT_FLAG_LBUTTON 1, CV_EVENT_FLAG_RBUTTON 2, ...</span></span><br><span class="line"><span class="comment">        srcData: image data</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        None</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">// only check left button down event</span></span><br><span class="line">   <span class="keyword">if</span>(event != EVENT_LBUTTONDOWN)&#123;</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   Mat* img = (Mat*) srcData;</span><br><span class="line">   <span class="built_in">circle</span>(*img, <span class="built_in">Point</span>(x, y), <span class="number">10</span>, <span class="built_in">Scalar</span>(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>), <span class="number">3</span>);</span><br><span class="line">   <span class="built_in">onChangeTrackBar</span>(blurAmount, img);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// init global img</span></span><br><span class="line">img= <span class="built_in">imread</span>(<span class="string">&quot;../lena.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// create windows</span></span><br><span class="line"><span class="built_in">namedWindow</span>(<span class="string">&quot;Lena&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// create Buttons</span></span><br><span class="line"><span class="built_in">createButton</span>(<span class="string">&quot;Blur&quot;</span>, blurCallback, <span class="literal">NULL</span>, QT_CHECKBOX, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">createButton</span>(<span class="string">&quot;Gray&quot;</span>,grayCallback,<span class="literal">NULL</span>,QT_RADIOBOX, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">createButton</span>(<span class="string">&quot;RGB&quot;</span>,bgrCallback,<span class="literal">NULL</span>,QT_RADIOBOX, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">createButton</span>(<span class="string">&quot;Sobel&quot;</span>,sobelCallback,<span class="literal">NULL</span>,QT_PUSH_BUTTON, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">createTrackbar</span>(<span class="string">&quot;Lena&quot;</span>, <span class="string">&quot;Lena&quot;</span>, &amp;blurAmount, <span class="number">30</span>, onChangeTrackBar, &amp;img);</span><br><span class="line">    <span class="built_in">setMouseCallback</span>(<span class="string">&quot;Lena&quot;</span>, onMouseCircle, &amp;img);</span><br><span class="line"></span><br><span class="line"><span class="comment">// wait app for a key to exit</span></span><br><span class="line"><span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Destroy the windows</span></span><br><span class="line"><span class="built_in">destroyWindow</span>(<span class="string">&quot;Lena&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果展示<br><img src="https://img-blog.csdnimg.cn/b9e5d07329324060bef78528a5d95fb3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfMzcxNzIxODI=,size_15,color_FFFFFF,t_70,g_se,x_16" alt="RGB 按钮"><br><img src="https://img-blog.csdnimg.cn/bfcbc95582674f8fb4d25c4298c3ba69.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfMzcxNzIxODI=,size_15,color_FFFFFF,t_70,g_se,x_16" alt="Sobel 按钮"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;题目要求：打开一张lena.jpg图片，支持滑动条进行blur滤波处理；支持鼠标左键按下画圆圈；对每次进行滑动条的操作，支持按钮点击进行blur、gray、bgr和sobel滤波处理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p</summary>
      
    
    
    
    <category term="opencv" scheme="http://example.com/categories/opencv/"/>
    
    
    <category term="opencv GUI QT" scheme="http://example.com/tags/opencv-GUI-QT/"/>
    
  </entry>
  
  <entry>
    <title>VSCode配置之Opencv4x终极奥义</title>
    <link href="http://example.com/2021/12/14/VSCode%E9%85%8D%E7%BD%AE%E4%B9%8BOpencv4x%E7%BB%88%E6%9E%81%E5%A5%A5%E4%B9%89/"/>
    <id>http://example.com/2021/12/14/VSCode%E9%85%8D%E7%BD%AE%E4%B9%8BOpencv4x%E7%BB%88%E6%9E%81%E5%A5%A5%E4%B9%89/</id>
    <published>2021-12-14T10:43:35.000Z</published>
    <updated>2022-01-20T12:49:49.954Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>苦于windows下编译opencv的效率和对于大型软件如Visual Studio 2017、Visual Studio S2019等的不习惯，希望VScode也能够快速、高效编译第三方库，如opencv等，花了大概两天的时间，分析了主流的方法，最终适配出了一套极简方案：<strong>opencv4x终极奥义</strong></p><ul><li>支持CMakeLists.txt编写自己的opencv项目</li><li>支持Release和Debug两种模式运行，其中Debug速度较Release慢；</li><li>支持多级文件访问和子目录CMakeLists.txt编译</li><li>无需多余cmake、vscode配置，all in CMakeLists.txt</li><li>简言之，一款windows下的cmake极简配置</li></ul><p>工具准备：<br>opencv4.5.4下载：<a href="https://sourceforge.net/projects/opencvlibrary/files/4.5.4/opencv-4.5.4-vc14_vc15.exe/download">opencv-4.5.4-vc14_vc15.exe</a><br>cmake（仅仅下载安装，无需GUI）<br>Visual Studio Pro 2017(仅下载，便于支持加速编译)<br>添加环境变量：path\to\opencv\build\x64\vc15\bin<br>添加path\to\opencv\build\x64\vc15\lib下：opencv_world454.dll和opencv_world454d.dll到C:/Windows/System32中</p><p>方法：<br>step1 ：VScode中安装插件CMake和CMake Tools,其强大之处在于保存即编译；<br>使用方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + <span class="built_in">shift</span> + P 输入CMake: Quick Start 生成CMakeLists.txt模板</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/8b65988008314d8c8a73478b9e6094f8.png" alt="最佳配置选项"><br>step2: 编写自己的CMakeLists.txt内容。这里以opencv自带示例asift.cpp为例，该方法匹配两张图像（有旋转）的特征点。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cmake needs this line</span></span><br><span class="line">cmake_minimum_required(VERSION 3.1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SET(CMAKE_BUILD_TYPE <span class="string">&quot;Release&quot;</span>)</span><br><span class="line"><span class="comment"># Define project name</span></span><br><span class="line">project(opencv_example_project)</span><br><span class="line"></span><br><span class="line">include_directories(<span class="string">&quot;D:/Downloads/opencv/build/include&quot;</span> <span class="string">&quot;D:/Downloads/opencv/build/include/opencv2&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定dll的lib所在路径</span></span><br><span class="line">link_directories(<span class="string">&quot;D:/Downloads/opencv/build/x64/vc15/lib&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将源代码添加到此项目的可执行文件。</span></span><br><span class="line">add_executable (asift asift.cpp)</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定链接库的名字，即该dll</span></span><br><span class="line"><span class="comment">#opencv_410d.lib在\path\to\opencv\build\x64\vc15\lib目录下</span></span><br><span class="line">target_link_libraries(asift opencv_world454)</span><br></pre></td></tr></table></figure><p>【注】：最后选择target_link_libraries时，根据CMake编译方法不同而不同，Release版本使用opencv_world454，Debug版本使用opencv_world454<br>step3:编译运行<br>截图从左到右一次进过cmake,build,最后run。<br><img src="https://img-blog.csdnimg.cn/6a008187465f4f5e825e2a186ca47f6c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfMzcxNzIxODI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>step4: 代码与效果展示</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/features2d.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/calib3d.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">help</span><span class="params">(<span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout</span><br><span class="line">    &lt;&lt; <span class="string">&quot;This is a sample usage of AffineFeature detector/extractor.\n&quot;</span></span><br><span class="line">    &lt;&lt; <span class="string">&quot;And this is a C++ version of samples/python/asift.py\n&quot;</span></span><br><span class="line">    &lt;&lt; <span class="string">&quot;Usage: &quot;</span> &lt;&lt; argv[<span class="number">0</span>] &lt;&lt; <span class="string">&quot;\n&quot;</span></span><br><span class="line">    &lt;&lt; <span class="string">&quot;     [ --feature=&lt;sift|orb|brisk&gt; ]         # Feature to use.\n&quot;</span></span><br><span class="line">    &lt;&lt; <span class="string">&quot;     [ --flann ]                            # use Flann-based matcher instead of bruteforce.\n&quot;</span></span><br><span class="line">    &lt;&lt; <span class="string">&quot;     [ --maxlines=&lt;number(50 as default)&gt; ] # The maximum number of lines in visualizing the matching result.\n&quot;</span></span><br><span class="line">    &lt;&lt; <span class="string">&quot;     [ --image1=&lt;image1(aero1.jpg as default)&gt; ]\n&quot;</span></span><br><span class="line">    &lt;&lt; <span class="string">&quot;     [ --image2=&lt;image2(aero3.jpg as default)&gt; ] # Path to images to compare.&quot;</span></span><br><span class="line">    &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">timer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">getTickCount</span>() / <span class="built_in">getTickFrequency</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;String&gt; fileName;</span><br><span class="line">    <span class="function">cv::CommandLineParser <span class="title">parser</span><span class="params">(argc, argv,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="string">&quot;&#123;help h ||&#125;&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="string">&quot;&#123;feature|brisk|&#125;&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="string">&quot;&#123;flann||&#125;&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="string">&quot;&#123;maxlines|50|&#125;&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="string">&quot;&#123;image1|aero1.jpg|&#125;&#123;image2|aero3.jpg|&#125;&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (parser.<span class="built_in">has</span>(<span class="string">&quot;help&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">help</span>(argv);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    string feature = parser.get&lt;string&gt;(<span class="string">&quot;feature&quot;</span>);</span><br><span class="line">    <span class="keyword">bool</span> useFlann = parser.<span class="built_in">has</span>(<span class="string">&quot;flann&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> maxlines = parser.get&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;maxlines&quot;</span>);</span><br><span class="line">    fileName.<span class="built_in">push_back</span>(samples::<span class="built_in">findFile</span>(parser.get&lt;string&gt;(<span class="string">&quot;image1&quot;</span>)));</span><br><span class="line">    fileName.<span class="built_in">push_back</span>(samples::<span class="built_in">findFile</span>(parser.get&lt;string&gt;(<span class="string">&quot;image2&quot;</span>)));</span><br><span class="line">    <span class="keyword">if</span> (!parser.<span class="built_in">check</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        parser.<span class="built_in">printErrors</span>();</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;See --help (or missing &#x27;=&#x27; between argument name and value?)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Mat img1 = <span class="built_in">imread</span>(fileName[<span class="number">0</span>], IMREAD_GRAYSCALE);</span><br><span class="line">    Mat img2 = <span class="built_in">imread</span>(fileName[<span class="number">1</span>], IMREAD_GRAYSCALE);</span><br><span class="line">    <span class="keyword">if</span> (img1.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;Image &quot;</span> &lt;&lt; fileName[<span class="number">0</span>] &lt;&lt; <span class="string">&quot; is empty or cannot be found&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (img2.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;Image &quot;</span> &lt;&lt; fileName[<span class="number">1</span>] &lt;&lt; <span class="string">&quot; is empty or cannot be found&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Ptr&lt;Feature2D&gt; backend;</span><br><span class="line">    Ptr&lt;DescriptorMatcher&gt; matcher;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (feature == <span class="string">&quot;sift&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        backend = SIFT::<span class="built_in">create</span>();</span><br><span class="line">        <span class="keyword">if</span> (useFlann)</span><br><span class="line">            matcher = DescriptorMatcher::<span class="built_in">create</span>(<span class="string">&quot;FlannBased&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            matcher = DescriptorMatcher::<span class="built_in">create</span>(<span class="string">&quot;BruteForce&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (feature == <span class="string">&quot;orb&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        backend = ORB::<span class="built_in">create</span>();</span><br><span class="line">        <span class="keyword">if</span> (useFlann)</span><br><span class="line">            matcher = makePtr&lt;FlannBasedMatcher&gt;(makePtr&lt;flann::LshIndexParams&gt;(<span class="number">6</span>, <span class="number">12</span>, <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            matcher = DescriptorMatcher::<span class="built_in">create</span>(<span class="string">&quot;BruteForce-Hamming&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (feature == <span class="string">&quot;brisk&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        backend = BRISK::<span class="built_in">create</span>();</span><br><span class="line">        <span class="keyword">if</span> (useFlann)</span><br><span class="line">            matcher = makePtr&lt;FlannBasedMatcher&gt;(makePtr&lt;flann::LshIndexParams&gt;(<span class="number">6</span>, <span class="number">12</span>, <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            matcher = DescriptorMatcher::<span class="built_in">create</span>(<span class="string">&quot;BruteForce-Hamming&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; feature &lt;&lt; <span class="string">&quot; is not supported. See --help&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;extracting with &quot;</span> &lt;&lt; feature &lt;&lt; <span class="string">&quot;...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Ptr&lt;AffineFeature&gt; ext = AffineFeature::<span class="built_in">create</span>(backend);</span><br><span class="line">    vector&lt;KeyPoint&gt; kp1, kp2;</span><br><span class="line">    Mat desc1, desc2;</span><br><span class="line"></span><br><span class="line">    ext-&gt;<span class="built_in">detectAndCompute</span>(img1, <span class="built_in">Mat</span>(), kp1, desc1);</span><br><span class="line">    ext-&gt;<span class="built_in">detectAndCompute</span>(img2, <span class="built_in">Mat</span>(), kp2, desc2);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;img1 - &quot;</span> &lt;&lt; kp1.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot; features, &quot;</span></span><br><span class="line">         &lt;&lt; <span class="string">&quot;img2 - &quot;</span> &lt;&lt; kp2.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot; features&quot;</span></span><br><span class="line">         &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;matching with &quot;</span> &lt;&lt; (useFlann ? <span class="string">&quot;flann&quot;</span> : <span class="string">&quot;bruteforce&quot;</span>) &lt;&lt; <span class="string">&quot;...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">double</span> start = <span class="built_in">timer</span>();</span><br><span class="line">    <span class="comment">// match and draw</span></span><br><span class="line">    vector&lt; vector&lt;DMatch&gt; &gt; rawMatches;</span><br><span class="line">    vector&lt;Point2f&gt; p1, p2;</span><br><span class="line">    vector&lt;<span class="keyword">float</span>&gt; distances;</span><br><span class="line">    matcher-&gt;<span class="built_in">knnMatch</span>(desc1, desc2, rawMatches, <span class="number">2</span>);</span><br><span class="line">    <span class="comment">// filter_matches</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; rawMatches.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">const</span> vector&lt;DMatch&gt;&amp; m = rawMatches[i];</span><br><span class="line">        <span class="keyword">if</span> (m.<span class="built_in">size</span>() == <span class="number">2</span> &amp;&amp; m[<span class="number">0</span>].distance &lt; m[<span class="number">1</span>].distance * <span class="number">0.75</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            p1.<span class="built_in">push_back</span>(kp1[m[<span class="number">0</span>].queryIdx].pt);</span><br><span class="line">            p2.<span class="built_in">push_back</span>(kp2[m[<span class="number">0</span>].trainIdx].pt);</span><br><span class="line">            distances.<span class="built_in">push_back</span>(m[<span class="number">0</span>].distance);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;uchar&gt; status;</span><br><span class="line">    vector&lt; pair&lt;Point2f, Point2f&gt; &gt; pointPairs;</span><br><span class="line">    Mat H = <span class="built_in">findHomography</span>(p1, p2, status, RANSAC);</span><br><span class="line">    <span class="keyword">int</span> inliers = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; status.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (status[i])</span><br><span class="line">        &#123;</span><br><span class="line">            pointPairs.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(p1[i], p2[i]));</span><br><span class="line">            distances[inliers] = distances[i];</span><br><span class="line">            <span class="comment">// CV_Assert(inliers &lt;= (int)i);</span></span><br><span class="line">            inliers++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    distances.<span class="built_in">resize</span>(inliers);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;execution time: &quot;</span> &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">2</span>) &lt;&lt; (<span class="built_in">timer</span>()-start)*<span class="number">1000</span> &lt;&lt; <span class="string">&quot; ms&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; inliers &lt;&lt; <span class="string">&quot; / &quot;</span> &lt;&lt; status.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot; inliers/matched&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;visualizing...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">indices</span><span class="params">(inliers)</span></span>;</span><br><span class="line">    cv::<span class="built_in">sortIdx</span>(distances, indices, SORT_EVERY_ROW+SORT_ASCENDING);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// explore_match</span></span><br><span class="line">    <span class="keyword">int</span> h1 = img1.<span class="built_in">size</span>().height;</span><br><span class="line">    <span class="keyword">int</span> w1 = img1.<span class="built_in">size</span>().width;</span><br><span class="line">    <span class="keyword">int</span> h2 = img2.<span class="built_in">size</span>().height;</span><br><span class="line">    <span class="keyword">int</span> w2 = img2.<span class="built_in">size</span>().width;</span><br><span class="line">    Mat vis = Mat::<span class="built_in">zeros</span>(<span class="built_in">max</span>(h1, h2), w1+w2, CV_8U);</span><br><span class="line">    img1.<span class="built_in">copyTo</span>(<span class="built_in">Mat</span>(vis, <span class="built_in">Rect</span>(<span class="number">0</span>, <span class="number">0</span>, w1, h1)));</span><br><span class="line">    img2.<span class="built_in">copyTo</span>(<span class="built_in">Mat</span>(vis, <span class="built_in">Rect</span>(w1, <span class="number">0</span>, w2, h2)));</span><br><span class="line">    <span class="built_in">cvtColor</span>(vis, vis, COLOR_GRAY2BGR);</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;Point2f&gt; <span class="title">corners</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line">    corners[<span class="number">0</span>] = <span class="built_in">Point2f</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    corners[<span class="number">1</span>] = <span class="built_in">Point2f</span>((<span class="keyword">float</span>)w1, <span class="number">0</span>);</span><br><span class="line">    corners[<span class="number">2</span>] = <span class="built_in">Point2f</span>((<span class="keyword">float</span>)w1, (<span class="keyword">float</span>)h1);</span><br><span class="line">    corners[<span class="number">3</span>] = <span class="built_in">Point2f</span>(<span class="number">0</span>, (<span class="keyword">float</span>)h1);</span><br><span class="line">    vector&lt;Point2i&gt; icorners;</span><br><span class="line">    <span class="built_in">perspectiveTransform</span>(corners, corners, H);</span><br><span class="line">    <span class="built_in">transform</span>(corners, corners, <span class="built_in">Matx23f</span>(<span class="number">1</span>,<span class="number">0</span>,(<span class="keyword">float</span>)w1,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">    <span class="built_in">Mat</span>(corners).<span class="built_in">convertTo</span>(icorners, CV_32S);</span><br><span class="line">    <span class="built_in">polylines</span>(vis, icorners, <span class="literal">true</span>, <span class="built_in">Scalar</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">min</span>(inliers, maxlines); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> idx = indices[i];</span><br><span class="line">        <span class="keyword">const</span> Point2f&amp; pi1 = pointPairs[idx].first;</span><br><span class="line">        <span class="keyword">const</span> Point2f&amp; pi2 = pointPairs[idx].second;</span><br><span class="line">        <span class="built_in">circle</span>(vis, pi1, <span class="number">2</span>, <span class="built_in">Scalar</span>(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>), <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">circle</span>(vis, pi2 + <span class="built_in">Point2f</span>((<span class="keyword">float</span>)w1,<span class="number">0</span>), <span class="number">2</span>, <span class="built_in">Scalar</span>(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>), <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">line</span>(vis, pi1, pi2 + <span class="built_in">Point2f</span>((<span class="keyword">float</span>)w1,<span class="number">0</span>), <span class="built_in">Scalar</span>(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (inliers &gt; maxlines)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;only &quot;</span> &lt;&lt; maxlines &lt;&lt; <span class="string">&quot; inliers are visualized&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;affine find_obj&quot;</span>, vis);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Mat vis2 = Mat::zeros(max(h1, h2), w1+w2, CV_8U);</span></span><br><span class="line">    <span class="comment">// Mat warp1;</span></span><br><span class="line">    <span class="comment">// warpPerspective(img1, warp1, H, Size(w1, h1));</span></span><br><span class="line">    <span class="comment">// warp1.copyTo(Mat(vis2, Rect(0, 0, w1, h1)));</span></span><br><span class="line">    <span class="comment">// img2.copyTo(Mat(vis2, Rect(w1, 0, w2, h2)));</span></span><br><span class="line">    <span class="comment">// imshow(&quot;warped&quot;, vis2);</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">waitKey</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;done&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/0f1d1a5fef6f4fa0b43275893d5f688e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfMzcxNzIxODI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="效果图"></p><p>对比：</p><ol><li><pre><code>在Vistual Studio2019中设置属性，手动添加源文件等，一次设置多次可用，唯一的缺点是软件过大，修改比较麻烦</code></pre></li><li><pre><code>在VScode中改变C++的参数命令，自动添加 -I -L等库文件包，需要改变task,lunch等yaml文件，使用的是mingw64编译，速度较慢（实测）</code></pre></li><li><pre><code>使用Cmake编译opencv,将CMakelists.txt的kit selecti设置为mingw64，可行但速度慢，相关配置如下：（可能出现无法定位程序输入点问题，将mingw64下bin/libstdc+±6.dll放置在C:/Windows/System32中）</code></pre></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CMakeList.txt: CMakeProject1 的 CMake 项目，在此处包括源代码并定义</span></span><br><span class="line"><span class="comment"># 项目特定的逻辑。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">cmake_minimum_required (VERSION 3.8)</span><br><span class="line"><span class="built_in">set</span>(CMAKE_BUILD_TYPE <span class="string">&quot;Release&quot;</span>)</span><br><span class="line">project (<span class="string">&quot;imgShow&quot;</span>)</span><br><span class="line"><span class="comment">#指定要引用的dll的头文件所在路径，即为文件夹opencv2的路径，</span></span><br><span class="line"><span class="comment">#dll的头文件地址前半部分（&quot;D:\Tool\&quot;）需根据opencv安装的位置确定。</span></span><br><span class="line">include_directories(<span class="string">&quot;D:/Downloads/opencv/build/x64/mingw/install/include&quot;</span> <span class="string">&quot;D:/Downloads/opencv/build/x64/mingw/install/include/opencv2&quot;</span>)</span><br><span class="line"><span class="comment">#指定dll的lib所在路径</span></span><br><span class="line">link_directories(<span class="string">&quot;D:/Downloads/opencv/build/x64/mingw/lib&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将源代码添加到此项目的可执行文件。</span></span><br><span class="line">add_executable (asift asift.cpp)</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定链接库的名字，即该dll</span></span><br><span class="line"> target_link_libraries(asift </span><br><span class="line"> <span class="string">&quot;D:/Downloads/opencv/build/x64/mingw/bin/libopencv_calib3d454.dll&quot;</span></span><br><span class="line"> <span class="string">&quot;D:/Downloads/opencv/build/x64/mingw/bin/libopencv_core454.dll&quot;</span></span><br><span class="line"> <span class="string">&quot;D:/Downloads/opencv/build/x64/mingw/bin/libopencv_dnn454.dll&quot;</span></span><br><span class="line"> <span class="string">&quot;D:/Downloads/opencv/build/x64/mingw/bin/libopencv_features2d454.dll&quot;</span></span><br><span class="line"> <span class="string">&quot;D:/Downloads/opencv/build/x64/mingw/bin/libopencv_flann454.dll&quot;</span></span><br><span class="line"> <span class="string">&quot;D:/Downloads/opencv/build/x64/mingw/bin/libopencv_gapi454.dll&quot;</span></span><br><span class="line"> <span class="string">&quot;D:/Downloads/opencv/build/x64/mingw/bin/libopencv_highgui454.dll&quot;</span></span><br><span class="line"> <span class="string">&quot;D:/Downloads/opencv/build/x64/mingw/bin/libopencv_imgcodecs454.dll&quot;</span></span><br><span class="line"> <span class="string">&quot;D:/Downloads/opencv/build/x64/mingw/bin/libopencv_imgproc454.dll&quot;</span></span><br><span class="line"> <span class="string">&quot;D:/Downloads/opencv/build/x64/mingw/bin/libopencv_ml454.dll&quot;</span></span><br><span class="line"> <span class="string">&quot;D:/Downloads/opencv/build/x64/mingw/bin/libopencv_objdetect454.dll&quot;</span></span><br><span class="line"> <span class="string">&quot;D:/Downloads/opencv/build/x64/mingw/bin/libopencv_photo454.dll&quot;</span></span><br><span class="line"> <span class="string">&quot;D:/Downloads/opencv/build/x64/mingw/bin/libopencv_stitching454.dll&quot;</span> <span class="string">&quot;D:/Downloads/opencv/build/x64/mingw/bin/libopencv_video454.dll&quot;</span></span><br><span class="line"> <span class="string">&quot;D:/Downloads/opencv/build/x64/mingw/bin/libopencv_videoio454.dll&quot;</span> )</span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> 如有需要，请添加测试并安装目标。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;苦于windows下编译opencv的效率和对于大型软件如Visual Studio 2017、Visual Studio S2019等的不习惯，希望VScode也能够快速、高效编译第三方库，如opencv等，花了大概两天的</summary>
      
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="vscode opencv cmake" scheme="http://example.com/tags/vscode-opencv-cmake/"/>
    
  </entry>
  
  <entry>
    <title>C++高级编程----剖析（profile）</title>
    <link href="http://example.com/2021/12/11/C++%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B----%E5%89%96%E6%9E%90%EF%BC%88profile%EF%BC%89/"/>
    <id>http://example.com/2021/12/11/C++%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B----%E5%89%96%E6%9E%90%EF%BC%88profile%EF%BC%89/</id>
    <published>2021-12-11T13:11:51.000Z</published>
    <updated>2022-01-20T12:49:49.954Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>大部分程序中90%的运行时间都在执行10%的代码 – Hennessy &amp; Patterson. Computer Architecture, A quantitative Approch<br>这意味着，可能优化了90%的代码，但程序运行时间只提升了10%。更好地关注10%的运行代码是优化性能的基础；</p><p>题目要求：设计一个英文名计数任务，给定一个500500行人名的txt文件，统计不同名字出现的频率和对应的排名情况。第一版设计中考虑使用map作为数据结构，每次读取一行字符时需要判断名字是否存在，存在则频率加1，不存在则名字对应的值为1。<br>实例代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// namedb.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameDB</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">NameDB</span>(<span class="keyword">const</span> std::string&amp; nameFile);</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">getNameRank</span><span class="params">(<span class="keyword">const</span> std::string&amp; name)</span> <span class="keyword">const</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">getAbsoluteNumber</span><span class="params">(<span class="keyword">const</span> std::string&amp; name)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        std::map&lt;std::string, <span class="keyword">int</span>&gt; mNames;</span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">nameExistAndIncrement</span><span class="params">(<span class="keyword">const</span> std::string&amp; name)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">addNewName</span><span class="params">(<span class="keyword">const</span> std::string&amp; name)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NameDB::<span class="built_in">NameDB</span>(<span class="keyword">const</span> std::string&amp; nameFile)&#123;</span><br><span class="line">    <span class="function">ifstream <span class="title">inFile</span><span class="params">(nameFile)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(!inFile)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">invalid_argument</span>(<span class="string">&quot;file name does not exist. &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="keyword">while</span>(inFile &gt;&gt; name)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">nameExistAndIncrement</span>(name))&#123;</span><br><span class="line">            <span class="built_in">addNewName</span>(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    inFile.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">NameDB::getNameRank</span><span class="params">(<span class="keyword">const</span> std::string&amp; name)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="built_in">getAbsoluteNumber</span>(name);</span><br><span class="line">    <span class="keyword">if</span>(num == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> rank = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; item : mNames)&#123;</span><br><span class="line">        <span class="keyword">if</span>(item.second &gt; num)&#123;</span><br><span class="line">            rank++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rank;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">NameDB::getAbsoluteNumber</span><span class="params">(<span class="keyword">const</span> std::string&amp; name)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> res = mNames.<span class="built_in">find</span>(name);</span><br><span class="line">    <span class="keyword">if</span>(res != <span class="built_in">end</span>(mNames))&#123;</span><br><span class="line">        <span class="keyword">return</span> res -&gt; second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">NameDB::nameExistAndIncrement</span><span class="params">(<span class="keyword">const</span> std::string&amp; name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> res = mNames.<span class="built_in">find</span>(name);</span><br><span class="line">    <span class="keyword">if</span>(res != <span class="built_in">end</span>(mNames))&#123;</span><br><span class="line">        res -&gt; second++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NameDB::addNewName</span><span class="params">(<span class="keyword">const</span> std::string&amp; name)</span></span>&#123;</span><br><span class="line">    mNames[name] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;namedb.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">NameDB <span class="title">names</span><span class="params">(<span class="string">&quot;names.txt&quot;</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; names.<span class="built_in">getNameRank</span>(<span class="string">&quot;Daniel&quot;</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; names.<span class="built_in">getNameRank</span>(<span class="string">&quot;Jacob&quot;</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; names.<span class="built_in">getNameRank</span>(<span class="string">&quot;William&quot;</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用linux编译环境gprof编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g++ -pg -o main main.cpp</span><br><span class="line">gprof main gmon.out &gt; profile.txt</span><br></pre></td></tr></table></figure><p>profile的部分结果如下：<br><img src="https://img-blog.csdnimg.cn/58091516b09540eb95520d3db23d6f40.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfMzcxNzIxODI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>可以看到，代码总共运行了0.07秒，其中92%的运行时间用在函数nameExitAndIncrement（）中，因此有意义的优化在于提升该部分的算法。幸运的是，在标准库STL中map存在一个insert()方法，该方法对key进行插入操作设定默认的（key,value），返回key对应的bool状态，表示是否插入成功，插入失败则表明key已存在，相应的value+1即可。代码只是微小改变：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">NameDB::<span class="built_in">NameDB</span>(<span class="keyword">const</span> std::string&amp; nameFile)&#123;</span><br><span class="line"><span class="function">ifstream <span class="title">inFile</span><span class="params">(nameFile)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(!inFile)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="built_in">invalid_argument</span>(<span class="string">&quot;file name does not exist . &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">string name;</span><br><span class="line"><span class="keyword">while</span>(inFile &gt;&gt; name)&#123;</span><br><span class="line"><span class="keyword">auto</span> res = mNames.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(name, <span class="number">1</span>));</span><br><span class="line"><span class="keyword">if</span>(res.second == <span class="literal">false</span>)&#123;</span><br><span class="line">res.first -&gt; second++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样使用gprof剖析部分结果如下：<br><img src="https://img-blog.csdnimg.cn/0a7b923a7d6844b890b8b61220a7852c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfMzcxNzIxODI=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>这里构造函数NameDB()只使用了0.01s,没有了nameExitAndIncrement(),相当于只是执行了add（）操作，极大地提高了效率。<br>这里只是简单的例子的分析，对于更加复杂的情况，需要更加细致的分析，gprof提供了一个运行时间统计和函数定位的分析工具，对于实际分析具有重要意义，对于算法性能提升也提供数值比较方法。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;大部分程序中90%的运行时间都在执行10%的代码 – Hennessy &amp;amp; Patterson. Computer Architecture, A quantitative Approch&lt;br&gt;这意味着，可能优化了</summary>
      
    
    
    
    <category term="C++高级编程" scheme="http://example.com/categories/C-%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="c++ gprof 剖析 性能分析" scheme="http://example.com/tags/c-gprof-%E5%89%96%E6%9E%90-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>C++高级编程----对象池实例</title>
    <link href="http://example.com/2021/12/11/C++%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B----%E5%AF%B9%E8%B1%A1%E6%B1%A0%E5%AE%9E%E4%BE%8B/"/>
    <id>http://example.com/2021/12/11/C++%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B----%E5%AF%B9%E8%B1%A1%E6%B1%A0%E5%AE%9E%E4%BE%8B/</id>
    <published>2021-12-11T12:35:21.000Z</published>
    <updated>2022-01-20T12:49:49.954Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>背景：当尝试使用C++进行代码优化时，可以考虑从语言层次和设计层次进行性能优化。<br>1）语言层次：语言层次可以考虑从形参传递方式和返回值类型以及异常类型进行控制。</p><ol><li> 按引用传递：由于C++按值传递会有一定的复制开销，而按引用可以避免复制开销，如果不希望改变引用值，建议进行const修饰；对于复杂对象的创建（销毁），按值引用可能带来不必要地调用其他成员变量的构造函数（析构函数）</li><li> 按引用返回：同样从函数的返回的角度考虑，按引用传递能避免不必要的复制开销；自C++11之后支持移动语义，允许高效地使用按值返回对象；</li><li> 按引用捕捉异常：通过引用捕捉异常，以避免不必要的开销；通常抛出异常的开销很大，考虑使用引用，提升可能出现异常的情况；</li><li> 恰当使用内联方法和函数：内联方法和函数的代码直接插入到被调用的位置，避免了函数调用的开销；由于内联函数的请求由编译器确定是否执行，只有熟悉一定的编译器文档才能恰当使用inline关键词，提升代码性能；</li></ol><p>2）设计层次：</p><ol><li> 尽可能使用已有的数据结构和算法，尤其是STL标准库；</li><li> 尽可能多的缓存：如果任务或计算执行特别慢，应该确保不会执行不必要的重复计算；将将来可能使用到的数据缓存下来，为下一次提供支持；可能存在缓存不同步问题（缓存失效），需要有一定的检测规则，确保缓存更新；</li><li> 使用对象池：类似缓存原理，对需要经常和大量访问的对象设计对象池，实现一次创建，多次重复调用，从而避免不必要的构造函数和析构函数调用；</li></ol><p>设计一个泛型对象池，创建一个大小为10的对象池，重复调用对象100次，记录观察构造函数和析构函数的调用次数；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ObjectPool.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectPool</span>&#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">       <span class="comment">// constructor for default chunszie;</span></span><br><span class="line">       <span class="built_in">ObjectPool</span>(<span class="keyword">size_t</span> chunkSize = kDefaultChunkSize);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">// prevent assignment and pass-by-value</span></span><br><span class="line">       <span class="built_in">ObjectPool</span>(<span class="keyword">const</span> ObjectPool&lt;T&gt;&amp; src) = <span class="keyword">delete</span>;</span><br><span class="line">       ObjectPool&lt;T&gt;&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> ObjectPool&lt;T&gt;&amp; rhs) = <span class="keyword">delete</span>;</span><br><span class="line">       <span class="keyword">using</span> Object = std::shared_ptr&lt;T&gt;;</span><br><span class="line">       <span class="comment">// acuquire the pointer of queue.front()</span></span><br><span class="line">       <span class="function">Object <span class="title">acquireObject</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">       std::queue&lt;std::unique_ptr&lt;T&gt;&gt; mFreeList;</span><br><span class="line">       <span class="keyword">size_t</span> mChunkSize;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">size_t</span> kDefaultChunkSize = <span class="number">10</span>;</span><br><span class="line">       <span class="comment">// fill the queue with mChunksize default value</span></span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">allocateChunk</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">size_t</span> ObjectPool&lt;T&gt;::kDefaultChunkSize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">ObjectPool&lt;T&gt;::<span class="built_in">ObjectPool</span>(<span class="keyword">size_t</span> chunkSize)&#123;</span><br><span class="line">   <span class="keyword">if</span>(chunkSize == <span class="number">0</span>)&#123;</span><br><span class="line">       <span class="keyword">throw</span> std::<span class="built_in">invalid_argument</span>(<span class="string">&quot;chunk size must be positive. &quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   mChunkSize = chunkSize;</span><br><span class="line">   <span class="built_in">allocateChunk</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> ObjectPool&lt;T&gt;::<span class="built_in">allocateChunk</span>()&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; mChunkSize; ++i)&#123;</span><br><span class="line">       mFreeList.<span class="built_in">emplace</span>(std::make_unique&lt;T&gt;());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">typename</span> ObjectPool&lt;T&gt;::Object ObjectPool&lt;T&gt;::<span class="built_in">acquireObject</span>()&#123;</span><br><span class="line">   <span class="keyword">if</span>(mFreeList.<span class="built_in">empty</span>())&#123;</span><br><span class="line">       <span class="built_in">allocateChunk</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function">std::unique_ptr&lt;T&gt; <span class="title">obj</span><span class="params">(std::move(mFreeList.front()))</span></span>;</span><br><span class="line">   mFreeList.<span class="built_in">pop</span>();</span><br><span class="line">   <span class="function">Object <span class="title">smartObject</span><span class="params">(obj.release(), [<span class="keyword">this</span>](T* t)&#123;mFreeList.push(std::unique_ptr&lt;T&gt;(t));&#125;)</span></span>;</span><br><span class="line">   <span class="keyword">return</span> smartObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试用例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;objectPool.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRequest</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">UserRequest</span>()&#123;mID = ++msCount; cout &lt;&lt; <span class="string">&quot;constructor : &quot;</span> &lt;&lt; mID &lt;&lt; endl;&#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">UserRequest</span>()&#123;cout &lt;&lt; <span class="string">&quot;destructor : &quot;</span> &lt;&lt; mID &lt;&lt; endl;&#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">int</span> mID;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> msCount;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> UserRequest::msCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">ObjectPool&lt;UserRequest&gt;::<span class="function">Object <span class="title">obtainUserRequest</span><span class="params">(ObjectPool&lt;UserRequest&gt;&amp; pool)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> request = pool.<span class="built_in">acquireObject</span>();</span><br><span class="line">    <span class="keyword">return</span> request;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">processUserRequest</span><span class="params">(ObjectPool&lt;UserRequest&gt;::Object&amp; req)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> req.<span class="built_in">reset</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">ObjectPool&lt;UserRequest&gt; <span class="title">requestPool</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i)&#123;</span><br><span class="line">        <span class="keyword">auto</span> req = <span class="built_in">obtainUserRequest</span>(requestPool);</span><br><span class="line">        <span class="built_in">processUserRequest</span>(req);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;done. &quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://img-blog.csdnimg.cn/e3ef7d019813429cab5dd5b4414aa434.png" alt="在这里插入图片描述"><br>测试结果显示，尽管对象被调用了100，而对象池只是重复创建和销毁对象，只调用了10次构造函数和析构函数。注意设计中share_ptr和unique_ptr的使用情况，在队里中使用共享指针，每次请求都是从队列前端取对象发送给请求方。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;背景：当尝试使用C++进行代码优化时，可以考虑从语言层次和设计层次进行性能优化。&lt;br&gt;1）语言层次：语言层次可以考虑从形参传递方式和返回值类型以及异常类型进行控制。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; 按引用传递：由于C++按值传</summary>
      
    
    
    
    <category term="C++高级编程" scheme="http://example.com/categories/C-%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="c++ 高效编程 对象池" scheme="http://example.com/tags/c-%E9%AB%98%E6%95%88%E7%BC%96%E7%A8%8B-%E5%AF%B9%E8%B1%A1%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>C++高级编程----多线程编程</title>
    <link href="http://example.com/2021/12/08/C++%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B----%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/"/>
    <id>http://example.com/2021/12/08/C++%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B----%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/</id>
    <published>2021-12-08T09:14:37.000Z</published>
    <updated>2022-01-20T12:49:49.954Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>题目要求：1）假设有一个Counter类，包含一个id和计数次数mNumIters，支持多线程（互斥体）完成计数任务；2）设计一个发送者和消费者模式的数据传输模型；3）支持多线程加法运算，实现每个Counter自加后结果不变；4）考虑设计一个日志类，多线程读写数据，写入数据后存储到log.txt文件中。</p><blockquote><p>分析：<br>1）定义基于mutex的多线程任务，mutex支持lock_gurad和unique_lock等加锁方式，考虑重写类Counter的operator()，实现参数传递；<br>2）定义基于条件变量的多线程任务，condition_variable支持wait()和notify_all()/notify_one()等方法根据条件完成对已加锁的mutex的操作；<br>3）定义原子性counter,每个线程完成各自的加法运算值递增到counter中，保持数据同步；<br>4）Logger类需要考虑数据存储结构，此处定义为队列queue&lt;string&gt;，通过互斥体保护队列数据的访问，考虑到可能存在后台程序崩溃，需要设计相应的析构函数和对应的是否退出的原子性变量mExit<br>5) 标准库多线程的编译指令：g++ -Wall -pthread -g -o desApp source.cpp</p></blockquote><p>代码实现：<br>1：互斥体的基本方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*************************************************************************</span></span><br><span class="line"><span class="comment">   &gt; File Name: mutexDemo.cpp</span></span><br><span class="line"><span class="comment">   &gt; Author: xxx</span></span><br><span class="line"><span class="comment">   &gt; Mail: email@xx.com </span></span><br><span class="line"><span class="comment">   &gt; Created Time: 2021年12月08日 星期三 15时51分30秒</span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span>&#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">   <span class="built_in">Counter</span>(<span class="keyword">int</span> id, <span class="keyword">int</span> numIters):<span class="built_in">mId</span>(id), <span class="built_in">mNumIters</span>(numIters)&#123;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// lock_guard</span></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   void operator()() const&#123;</span></span><br><span class="line"><span class="comment">   for(int i = 0; i &lt; mNumIters; ++i)&#123;</span></span><br><span class="line"><span class="comment">   lock_guard&lt;mutex&gt; lock(mMutex);</span></span><br><span class="line"><span class="comment">   cout &lt;&lt; &quot;Counter &quot; &lt;&lt; mId &lt;&lt; &quot; has value &quot; &lt;&lt; i &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">   &#125;</span></span><br><span class="line"><span class="comment">   &#125;*/</span></span><br><span class="line">   <span class="comment">// unique_lock</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mNumIters; ++i)&#123;</span><br><span class="line">   <span class="function">unique_lock&lt;timed_mutex&gt; <span class="title">lock</span><span class="params">(mTimeMutex, <span class="number">200</span>ms)</span></span>;</span><br><span class="line">   <span class="keyword">if</span>(lock)&#123;</span><br><span class="line">   cout &lt;&lt;<span class="string">&quot;Counter &quot;</span> &lt;&lt; mId &lt;&lt; <span class="string">&quot; has value &quot;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// else lock 200ms</span></span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">   <span class="keyword">int</span> mId;</span><br><span class="line">   <span class="keyword">int</span> mNumIters;</span><br><span class="line">   <span class="comment">// static mutex mMutex for lock_guard;</span></span><br><span class="line">   <span class="keyword">static</span> timed_mutex mTimeMutex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mutex Counter::mMutex;</span></span><br><span class="line">timed_mutex Counter::mTimeMutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   thread t1&#123;Counter&#123;<span class="number">1</span>, <span class="number">30</span>&#125;&#125;;</span><br><span class="line">   <span class="function">Counter <span class="title">c</span><span class="params">(<span class="number">2</span>, <span class="number">15</span>)</span></span>;</span><br><span class="line">   <span class="function">thread <span class="title">t2</span><span class="params">(c)</span></span>;</span><br><span class="line">   <span class="function">thread <span class="title">t3</span><span class="params">(Counter(<span class="number">3</span>, <span class="number">10</span>))</span></span>;</span><br><span class="line">   t1.<span class="built_in">join</span>();</span><br><span class="line">   t2.<span class="built_in">join</span>();</span><br><span class="line">   t3.<span class="built_in">join</span>();</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、条件变量的使用方法(使用条件变量和互斥体的区别)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*************************************************************************</span></span><br><span class="line"><span class="comment">    &gt; File Name: condVarDemo.cpp</span></span><br><span class="line"><span class="comment">    &gt; Author: xxx</span></span><br><span class="line"><span class="comment">    &gt; Mail: email@xx.com </span></span><br><span class="line"><span class="comment">    &gt; Created Time: 2021年12月08日 星期三 16时14分09秒</span></span><br><span class="line"><span class="comment"> ************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">std::deque&lt;<span class="keyword">int</span>&gt; q; <span class="comment">// global queue</span></span><br><span class="line">std::mutex mMutex; <span class="comment">// global mutex</span></span><br><span class="line">std::condition_variable mCondVar; <span class="comment">//global condition variable</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">provider</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span>(count &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(mMutex)</span></span>;</span><br><span class="line">q.<span class="built_in">push_front</span>(count);</span><br><span class="line">lock.<span class="built_in">unlock</span>();</span><br><span class="line">std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">seconds</span>(<span class="number">1</span>));</span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">consumer</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> data = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(data != <span class="number">1</span>)&#123;</span><br><span class="line"><span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(mMutex)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">data = q.<span class="built_in">back</span>();</span><br><span class="line">q.<span class="built_in">pop_back</span>();</span><br><span class="line">lock.<span class="built_in">unlock</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;consumter get data from provider: &quot;</span> &lt;&lt; data &lt;&lt; endl;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">lock.<span class="built_in">unlock</span>();</span><br><span class="line">std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">500</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">providerII</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span>(count &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(mMutex)</span></span>;</span><br><span class="line">q.<span class="built_in">push_front</span>(count);</span><br><span class="line">lock.<span class="built_in">unlock</span>();</span><br><span class="line"><span class="comment">// add condvar notification</span></span><br><span class="line">mCondVar.<span class="built_in">notify_one</span>();</span><br><span class="line">std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">seconds</span>(<span class="number">1</span>));</span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">consumerII</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> data = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(data != <span class="number">1</span>)&#123;</span><br><span class="line"><span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(mMutex)</span></span>;</span><br><span class="line"><span class="comment">/*while(q.empty())&#123;// note for multitime to check queue data</span></span><br><span class="line"><span class="comment">mCondVar.wait(lock);</span></span><br><span class="line"><span class="comment">&#125; for better understand, use next line to replace*/</span></span><br><span class="line">mCondVar.<span class="built_in">wait</span>(lock, []()&#123;<span class="keyword">return</span> !q.<span class="built_in">empty</span>();&#125;);</span><br><span class="line">data = q.<span class="built_in">back</span>();</span><br><span class="line">q.<span class="built_in">pop_back</span>();</span><br><span class="line">lock.<span class="built_in">unlock</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;consumer get data from provider: &quot;</span> &lt;&lt; data &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">thread <span class="title">t1</span><span class="params">(providerII)</span></span>;</span><br><span class="line"><span class="function">thread <span class="title">t2</span><span class="params">(consumerII)</span></span>;</span><br><span class="line">t1.<span class="built_in">join</span>();</span><br><span class="line">t2.<span class="built_in">join</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3：原子操作(线程中函数的传入是复制形式传入，转换为引用传入需要使用std::ref(var))</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*************************************************************************</span></span><br><span class="line"><span class="comment">    &gt; File Name: atomicDemo.cpp</span></span><br><span class="line"><span class="comment">    &gt; Author: xxx</span></span><br><span class="line"><span class="comment">    &gt; Mail: email@xx.com </span></span><br><span class="line"><span class="comment">    &gt; Created Time: 2021年12月08日 星期三 14时40分34秒</span></span><br><span class="line"><span class="comment"> ************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>&amp; counter)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i)&#123;</span><br><span class="line">++counter;</span><br><span class="line">std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funcII</span><span class="params">(std::atomic&lt;<span class="keyword">int</span>&gt;&amp; counter)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>; <span class="comment">// to improve performence</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i)&#123;</span><br><span class="line">++res;</span><br><span class="line">std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">counter += res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// int counter = 0;</span></span><br><span class="line"><span class="function">std::atomic&lt;<span class="keyword">int</span>&gt; <span class="title">counter</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">std::vector&lt;std::thread&gt; threads;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)&#123;</span><br><span class="line"></span><br><span class="line">threads.<span class="built_in">push_back</span>(std::thread&#123;funcII, std::<span class="built_in">ref</span>(counter)&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span>&amp; t : threads)&#123;</span><br><span class="line">t.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Result = &quot;</span> &lt;&lt; counter &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4:Logger类实现方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//logger.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LOGGER_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGGER_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Logger</span>();</span><br><span class="line">        <span class="built_in">Logger</span>(<span class="keyword">const</span> Logger&amp; src) = <span class="keyword">delete</span>;</span><br><span class="line">        Logger&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Logger&amp; rhs) = <span class="keyword">delete</span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">log</span><span class="params">(<span class="keyword">const</span> std::string&amp; entry)</span></span>;</span><br><span class="line">        <span class="keyword">virtual</span> ~<span class="built_in">Logger</span>();</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        std::atomic&lt;<span class="keyword">bool</span>&gt; mExit;</span><br><span class="line">        <span class="comment">// Mutex and condition variable to protect access to the queue</span></span><br><span class="line">        std::mutex mMutex;</span><br><span class="line">        std::condition_variable mCondVar;</span><br><span class="line">        std::queue&lt;std::string&gt; mQueue;</span><br><span class="line">        std::thread mThread;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">processEntries</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//logger.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;logger.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">Logger::<span class="built_in">Logger</span>(): <span class="built_in">mExit</span>(<span class="literal">false</span>)&#123;</span><br><span class="line">    mThread = thread&#123;&amp;Logger::processEntries, <span class="keyword">this</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line">Logger::~<span class="built_in">Logger</span>()&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(mMutex)</span></span>;</span><br><span class="line">        mExit = <span class="literal">true</span>;</span><br><span class="line">        mCondVar.<span class="built_in">notify_all</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    mThread.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Logger::log</span><span class="params">(<span class="keyword">const</span> std::string&amp; entry)</span></span>&#123;</span><br><span class="line">    <span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(mMutex)</span></span>;</span><br><span class="line">    mQueue.<span class="built_in">push</span>(entry);</span><br><span class="line">    mCondVar.<span class="built_in">notify_all</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Logger::processEntries</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">ofstream <span class="title">ofs</span><span class="params">(<span class="string">&quot;log.txt&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(ofs.<span class="built_in">fail</span>())&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Fail to open logfile. &quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(mMutex)</span></span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!mExit)&#123;</span><br><span class="line">            mCondVar.<span class="built_in">wait</span>(lock);</span><br><span class="line">        &#125;</span><br><span class="line">        lock.<span class="built_in">unlock</span>();</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            lock.<span class="built_in">lock</span>();</span><br><span class="line">            <span class="keyword">if</span>(mQueue.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ofs &lt;&lt; mQueue.<span class="built_in">front</span>() &lt;&lt; endl;</span><br><span class="line">                mQueue.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            lock.<span class="built_in">unlock</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(mExit)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;logger.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">logSomeMessages</span><span class="params">(<span class="keyword">int</span> id, Logger&amp; logger)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        stringstream ss;</span><br><span class="line">        ss &lt;&lt; <span class="string">&quot;Log entry &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot; from thread &quot;</span> &lt;&lt; id;</span><br><span class="line">        logger.<span class="built_in">log</span>(ss.<span class="built_in">str</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Logger logger;</span><br><span class="line">    vector&lt;thread&gt; threads;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        threads.<span class="built_in">emplace_back</span>(logSomeMessages, i, <span class="built_in">ref</span>(logger));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; t : threads)&#123;</span><br><span class="line">        t.<span class="built_in">join</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;题目要求：1）假设有一个Counter类，包含一个id和计数次数mNumIters，支持多线程（互斥体）完成计数任务；2）设计一个发送者和消费者模式的数据传输模型；3）支持多线程加法运算，实现每个Counter自加后结果不变</summary>
      
    
    
    
    <category term="C++高级编程" scheme="http://example.com/categories/C-%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="c++ 多线程 条件变量 互斥体 原子操作" scheme="http://example.com/tags/c-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8F-%E4%BA%92%E6%96%A5%E4%BD%93-%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>C++高级编程----模板的高级特性</title>
    <link href="http://example.com/2021/12/04/C++%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B----%E6%A8%A1%E6%9D%BF%E7%9A%84%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/"/>
    <id>http://example.com/2021/12/04/C++%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B----%E6%A8%A1%E6%9D%BF%E7%9A%84%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/</id>
    <published>2021-12-04T13:17:01.000Z</published>
    <updated>2022-01-20T12:49:49.954Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>题目要求：假设有一个Grid类，定义了一个网格的的大小（mWidth, mHeight），每个网格对于一个值（value）,这个值可能是int,double,string等类型；存储整个网格的数据结构可以是vector,可以是deque，可以提供默认初始值；可以支持二维、三维拓展；对于其中的一些函数，希望支持变长参数控制，支持元组类型的打印控制；</p><blockquote><p>分析：<br>1）支持Grid&lt;int, vector&gt;, Grid&lt;int, deque&gt;, Grid，容器模板类编程支持vector、deque和默认为vector，定义temple&lt;typename T, typename Container = std::vector&gt;，支持简化版Grid&lt;int, vector&gt;，定义template&lt;typename T, template&lt;typename E, typename Allocator = std::allocator&gt; class Container = std::vector&gt;；</p><p>2）支持Grid默认填充0，Grid&lt;int, 10&gt;默认填充10,支持Grid&lt;classA, objA&gt;定义 template&lt;typename T, const T&amp; DEFAULT&gt;</p><p>3）支持多维数据Grid[x][y] = z,Grid[i][j][k] = r等,定义循环递归类NDGrid&lt;typename T, size_t N-1&gt;,定义基本条件(模板特例化)：template class NDGrid&lt;T, 1&gt;;<br>4) 变长参数控制函数processValue(1, 2, 3.56, “test”, 1.1f)，考虑非const引用和左值引用，设计template&lt;typename T1, typename … Tn&gt; + std::forward(args…)方法；</p><p>5）支持打印auto t1 = make_tuple(1, 2, 3.56, “test”, 1.1f); tuple_print(t1)，打印元组，定义tuple_print_helper&lt;n - 1, TupleType&gt; tp(t)和tuple_print_helper&lt;0, TupleType&gt;类递归打印元组各个值</p></blockquote><p>方法实现和测试<br>分析1：实现容器模板和默认容器填充、容器Allocator</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// case 1:</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@File          :grid.h</span></span><br><span class="line"><span class="comment">@Description:  :template gird support vector/dequeue container</span></span><br><span class="line"><span class="comment">@Date          :2021/12/04 15:22:35</span></span><br><span class="line"><span class="comment">@Author        :    </span></span><br><span class="line"><span class="comment">@version       :1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1: basic version: </span></span><br><span class="line"><span class="comment">// template&lt;typename T, typename Container&gt;</span></span><br><span class="line"><span class="comment">// 2:  template defalut, add default container for Grid class</span></span><br><span class="line"><span class="comment">// template&lt;typename T, typename Container = std::vector&lt;T&gt;&gt;</span></span><br><span class="line"><span class="comment">// 3: template template, support Grid&lt;int, vector&gt;, not only Grid&lt;int, vector&lt;int&gt;&gt;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">template</span>&lt;<span class="keyword">typename</span> E, <span class="keyword">typename</span> Allocator = std::allocator&lt;E&gt;&gt; class Container = std::vector&gt;</span><br><span class="line">class Grid&#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">       <span class="comment">// constructor</span></span><br><span class="line">       <span class="keyword">explicit</span> <span class="built_in">Grid</span>(<span class="keyword">size_t</span> inWidth= kDefaultWidth, <span class="keyword">size_t</span> inHeight = kDefaultHeight);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">// set value at (x, y)</span></span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">setElement</span><span class="params">(<span class="keyword">size_t</span> x, <span class="keyword">size_t</span> y, <span class="keyword">const</span> T&amp; inElem)</span></span>;</span><br><span class="line">       </span><br><span class="line">       <span class="comment">// get value at (x, y)</span></span><br><span class="line">       <span class="function">T&amp; <span class="title">getElement</span><span class="params">(<span class="keyword">size_t</span> x, <span class="keyword">size_t</span> y)</span></span>;</span><br><span class="line">       <span class="function"><span class="keyword">const</span> T&amp; <span class="title">getElement</span><span class="params">(<span class="keyword">size_t</span> x, <span class="keyword">size_t</span> y)</span> <span class="keyword">const</span></span>;</span><br><span class="line">       </span><br><span class="line">       <span class="comment">// get grid size with width and height</span></span><br><span class="line">       <span class="function"><span class="keyword">size_t</span> <span class="title">getWidth</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;<span class="keyword">return</span> mWidth;&#125;</span><br><span class="line">       <span class="function"><span class="keyword">size_t</span> <span class="title">getHeight</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;<span class="keyword">return</span> mHeight;&#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// set default size</span></span><br><span class="line">       <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">size_t</span> kDefaultWidth = <span class="number">10</span>;</span><br><span class="line">       <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">size_t</span> kDefaultHeight = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">initalizeCellsContainer</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="comment">// 2: std::vector&lt;Container&gt; mCells</span></span><br><span class="line">   std::vector&lt;Container&lt;T&gt;&gt; mCells;</span><br><span class="line">   <span class="keyword">size_t</span> mWidth, mHeight;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 2: template defalut</span></span><br><span class="line"><span class="comment">// template&lt;typename T, typename Container&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3: template parmeter for template</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">template</span>&lt;<span class="keyword">typename</span> E, <span class="keyword">typename</span> Allocator = std::allocator&lt;E&gt;&gt; class Container&gt;</span><br><span class="line">Grid&lt;T, Container&gt;::<span class="built_in">Grid</span>(<span class="keyword">size_t</span> inWidth, <span class="keyword">size_t</span> inHeight):<span class="built_in">mWidth</span>(inWidth), <span class="built_in">mHeight</span>(inHeight)&#123;</span><br><span class="line">   <span class="built_in">initalizeCellsContainer</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">template</span>&lt;<span class="keyword">typename</span> E, <span class="keyword">typename</span> Allocator = std::allocator&lt;E&gt;&gt; class Container&gt;</span><br><span class="line"><span class="keyword">void</span> Grid&lt;T, Container&gt;::<span class="built_in">setElement</span>(<span class="keyword">size_t</span> x, <span class="keyword">size_t</span> y, <span class="keyword">const</span> T&amp; inElem)&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : set element at (x, y) with value inElem </span></span><br><span class="line"><span class="comment">    @param  : location (x, y)</span></span><br><span class="line"><span class="comment">    @Returns  : None </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    mCells[x][y] = inElem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">template</span>&lt;<span class="keyword">typename</span> E, <span class="keyword">typename</span> Allocator = std::allocator&lt;E&gt;&gt; class Container&gt;</span><br><span class="line">T&amp; Grid&lt;T, Container&gt;::<span class="built_in">getElement</span>(<span class="keyword">size_t</span> x, <span class="keyword">size_t</span> y)&#123;</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   @description  : get element at (x, y)</span></span><br><span class="line"><span class="comment">   @param  : location (x, y)</span></span><br><span class="line"><span class="comment">   @Returns  : value at (x, y)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">return</span> mCells[x][y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">template</span>&lt;<span class="keyword">typename</span> E, <span class="keyword">typename</span> Allocator = std::allocator&lt;E&gt;&gt; class Container&gt;</span><br><span class="line"><span class="keyword">const</span> T&amp; Grid&lt;T, Container&gt;::<span class="built_in">getElement</span>(<span class="keyword">size_t</span> x, <span class="keyword">size_t</span> y) <span class="keyword">const</span>&#123;</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   @description  : get const version element at (x, y) </span></span><br><span class="line"><span class="comment">   @param  : location (x, y)</span></span><br><span class="line"><span class="comment">   @Returns  : const value at (x, y)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">return</span> mCells[x][y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">template</span>&lt;<span class="keyword">typename</span> E, <span class="keyword">typename</span> Allocator = std::allocator&lt;E&gt;&gt; class Container&gt;</span><br><span class="line"><span class="keyword">void</span> Grid&lt;T, Container&gt;::<span class="built_in">initalizeCellsContainer</span>()&#123;</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   @description  : initalize cells container helper to resize container </span></span><br><span class="line"><span class="comment">   @param  : None</span></span><br><span class="line"><span class="comment">   @Returns  : None</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   mCells.<span class="built_in">resize</span>(mWidth);</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; col : mCells)&#123;</span><br><span class="line">       col.<span class="built_in">resize</span>(mHeight);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main /</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;gridContainer.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">// ----------------- test case 1 --------------------------//</span></span><br><span class="line">   <span class="comment">// // Grid&lt;T, Constainer&gt;</span></span><br><span class="line">   <span class="comment">// Grid&lt;int, vector&lt;int&gt;&gt; myVectorGrid;</span></span><br><span class="line">   <span class="comment">// Grid&lt;int, deque&lt;int&gt;&gt; myDequeGrid;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">// myVectorGrid.setElement(1, 2, 3);</span></span><br><span class="line">   <span class="comment">// cout &lt;&lt; myVectorGrid.getElement(1, 2) &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// myDequeGrid.setElement(0, 0, 3);</span></span><br><span class="line">   <span class="comment">// cout &lt;&lt; myDequeGrid.getElement(0, 0) &lt;&lt; endl;</span></span><br><span class="line">   <span class="comment">// Grid&lt;int, vector&lt;int&gt;&gt; myVectorGrid2(myVectorGrid);</span></span><br><span class="line">   <span class="comment">// cout &lt;&lt; myVectorGrid2.getElement(1,2);</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//error type: Grid&lt;int, int&gt; since the second template typename does not have the method resize() in initalizeCellsContainer()</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">// ----------------- test case 2 --------------------------//</span></span><br><span class="line">   Grid&lt;<span class="keyword">int</span>&gt; myVectorDefault;  <span class="comment">//Grid&lt;int, vector&lt;int&gt;&gt; </span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// ----------------- test case 3 --------------------------//</span></span><br><span class="line">   Grid&lt;<span class="keyword">int</span>, vector&gt; myVectorGrid;</span><br><span class="line">   myVectorGrid.<span class="built_in">setElement</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">   cout &lt;&lt; myVectorGrid.<span class="built_in">getElement</span>(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析2：实现默认值填充</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// non-typename only support: int, enum, pointer, reference</span></span><br><span class="line"><span class="comment">// template&lt;typename T, const T DEFAULT = T()&gt;</span></span><br><span class="line"><span class="comment">// reference template for other class</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">const</span> T&amp; DEFAULT&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grid</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">explicit</span> <span class="title">Grid</span><span class="params">(<span class="keyword">size_t</span> inWidth = kDefaultWidht, <span class="keyword">size_t</span> inHeight = kDefaultHeight)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// setter</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setElement</span><span class="params">(<span class="keyword">size_t</span> x, <span class="keyword">size_t</span> y, <span class="keyword">const</span> T&amp; inElem)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// getter</span></span><br><span class="line">        <span class="function">T&amp; <span class="title">getElement</span><span class="params">(<span class="keyword">size_t</span> x, <span class="keyword">size_t</span> y)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">const</span> T&amp; <span class="title">getElement</span><span class="params">(<span class="keyword">size_t</span> x, <span class="keyword">size_t</span> y)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">size_t</span> <span class="title">getWidth</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> mWidth;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">size_t</span> <span class="title">getHeight</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> mHeight;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">size_t</span> kDefaultWidht = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">size_t</span> kDefaultHeight = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">size_t</span> mWidth;</span><br><span class="line">        <span class="keyword">size_t</span> mHeight;</span><br><span class="line">        std::vector&lt;std::vector&lt;T&gt;&gt; mCells;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">initalizeCellsContainer</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">const</span> T&amp; DEFAULT&gt;</span><br><span class="line">Grid&lt;T, DEFAULT&gt;::<span class="built_in">Grid</span>(<span class="keyword">size_t</span> inWidth, <span class="keyword">size_t</span> inHeight):<span class="built_in">mWidth</span>(inWidth), <span class="built_in">mHeight</span>(inHeight)&#123;</span><br><span class="line">    <span class="built_in">initalizeCellsContainer</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">const</span> T&amp; DEFAULT&gt;</span><br><span class="line"><span class="keyword">void</span> Grid&lt;T, DEFAULT&gt;::<span class="built_in">setElement</span>(<span class="keyword">size_t</span> x, <span class="keyword">size_t</span> y, <span class="keyword">const</span> T&amp; inElem)&#123;</span><br><span class="line">    mCells[x][y] = inElem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">const</span> T&amp; DEFAULT&gt;</span><br><span class="line">T&amp; Grid&lt;T, DEFAULT&gt;::<span class="built_in">getElement</span>(<span class="keyword">size_t</span> x, <span class="keyword">size_t</span> y)&#123;</span><br><span class="line">    <span class="keyword">return</span> mCells[x][y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">const</span> T&amp; DEFAULT&gt;</span><br><span class="line"><span class="keyword">const</span> T&amp; Grid&lt;T, DEFAULT&gt;::<span class="built_in">getElement</span>(<span class="keyword">size_t</span> x, <span class="keyword">size_t</span> y) <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mCells[x][y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">const</span> T&amp; DEFAULT&gt;</span><br><span class="line"><span class="keyword">void</span> Grid&lt;T, DEFAULT&gt;::<span class="built_in">initalizeCellsContainer</span>()&#123;</span><br><span class="line">    mCells.<span class="built_in">resize</span>(mWidth);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; col:mCells)&#123;</span><br><span class="line">        col.<span class="built_in">resize</span>(mHeight);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; elem:col)&#123;</span><br><span class="line">            elem = DEFAULT;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/main/</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;girdElement.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;SpreadsheetCell.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> defaultInt = <span class="number">11</span>;</span><br><span class="line">    <span class="function">SpreadsheetCell <span class="title">defaultCell</span><span class="params">(<span class="number">1.2</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the second reference template must be const express, static inner or outter complete object</span></span><br><span class="line"><span class="comment">// so add namespace for const default for save</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// --------------- test default -----------------------//</span></span><br><span class="line">    <span class="comment">// Grid&lt;int&gt; myDefaultGrid;</span></span><br><span class="line">    <span class="comment">// Grid&lt;int, 10&gt; myDefaultGrid2;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; myDefaultGrid.getElement(0, 0) &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; myDefaultGrid2.getElement(0, 0) &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// error support: Grid(class, obj)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ----------- test reference template ----------------//</span></span><br><span class="line">    Grid&lt;<span class="keyword">int</span>, defaultInt&gt; myIntGrid;</span><br><span class="line">    cout &lt;&lt; myIntGrid.<span class="built_in">getElement</span>(<span class="number">0</span>, <span class="number">0</span>) &lt;&lt; endl;</span><br><span class="line">    Grid&lt;SpreadsheetCell, defaultCell&gt; mySpreadsheet;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析3：多维Grid实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">size_t</span> N&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NDGrid</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">// constructor</span></span><br><span class="line">        <span class="function"><span class="keyword">explicit</span> <span class="title">NDGrid</span><span class="params">(<span class="keyword">size_t</span> inSize = kDefaultSize)</span> </span>&#123;<span class="built_in">resize</span>(inSize);&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// operator</span></span><br><span class="line">        NDGrid&lt;T, N<span class="number">-1</span>&gt;&amp; <span class="keyword">operator</span>[](<span class="keyword">size_t</span> x) &#123;<span class="keyword">return</span> mElems[x];&#125;;</span><br><span class="line">        <span class="keyword">const</span> NDGrid&lt;T, N<span class="number">-1</span>&gt;&amp; <span class="keyword">operator</span>[](<span class="keyword">size_t</span> x) <span class="keyword">const</span> &#123;<span class="keyword">return</span> mElems[x];&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">size_t</span> newSize)</span> </span>&#123;mElems.<span class="built_in">resize</span>(newSize);&#125;;</span><br><span class="line">        <span class="function"><span class="keyword">size_t</span> <span class="title">getSize</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> mElems.<span class="built_in">size</span>();&#125;;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">size_t</span> kDefaultSize = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        std::vector&lt;NDGrid&lt;T, N-1&gt;&gt; mElems;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NDGrid</span>&lt;</span>T, <span class="number">1</span>&gt;&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">explicit</span> <span class="title">NDGrid</span><span class="params">(<span class="keyword">size_t</span> inSize = kDefaultSize)</span> </span>&#123;<span class="built_in">resize</span>(inSize);&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// operator</span></span><br><span class="line">        T&amp; <span class="keyword">operator</span>[](<span class="keyword">size_t</span> x) &#123;<span class="keyword">return</span> mElems[x];&#125;;</span><br><span class="line">        <span class="keyword">const</span> T&amp; <span class="keyword">operator</span>[](<span class="keyword">size_t</span> x) <span class="keyword">const</span> &#123;<span class="keyword">return</span> mElems[x];&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">size_t</span> newSize)</span> </span>&#123;mElems.<span class="built_in">resize</span>(newSize);&#125;;</span><br><span class="line">        <span class="function"><span class="keyword">size_t</span> <span class="title">getSize</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> mElems.<span class="built_in">size</span>();&#125;;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">size_t</span> kDefaultSize = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        std::vector&lt;T&gt; mElems;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> main /</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;nDGrid.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">NDGrid&lt;<span class="keyword">int</span>, 3&gt; <span class="title">threeDim</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line">    threeDim[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分析4：变长参数控制与解析</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handleValue</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Interger: &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handleValue</span><span class="params">(<span class="keyword">double</span> value)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Double: &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handleValue</span><span class="params">(<span class="keyword">const</span> string&amp; value)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;String: &quot;</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">processValue</span><span class="params">(T arg)</span></span>&#123;</span><br><span class="line">    <span class="built_in">handleValue</span>(arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> ... Tn&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">processValue</span><span class="params">(T1 arg1, Tn ... argn)</span></span>&#123;</span><br><span class="line">    <span class="built_in">handleValue</span>(arg1);</span><br><span class="line">    <span class="built_in">processValue</span>(argn...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// non-const reference with std::forward() to imporve performence</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">processValueII</span><span class="params">(T&amp;&amp; arg)</span></span>&#123;</span><br><span class="line">    <span class="built_in">handleValue</span>(std::forward&lt;T&gt;(arg));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> ... Tn&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">processValueII</span><span class="params">(T1 arg1, Tn ... argn)</span></span>&#123;</span><br><span class="line">    <span class="built_in">handleValue</span>(arg1);</span><br><span class="line">    <span class="built_in">processValueII</span>(std::forward&lt;Tn&gt;(argn)...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">processValue</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3.56</span>, <span class="string">&quot;test&quot;</span>, <span class="number">1.1f</span>);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">processValueII</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3.56</span>, <span class="string">&quot;test&quot;</span>, <span class="number">1.1f</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析5：元组值输出 （元编程：在编译时完成计算，而不是运行时完成。由于元组是在编译时完成，因此可以通过模板类实现编译时遍历操作)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> n, <span class="keyword">typename</span> TupleType&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">tuple_print_helper</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">tuple_print_helper</span>(<span class="keyword">const</span> TupleType&amp; t) &#123;</span><br><span class="line"><span class="function">tuple_print_helper&lt;n - 1, TupleType&gt; <span class="title">tp</span><span class="params">(t)</span></span>;</span><br><span class="line">cout &lt;&lt; get&lt;n - <span class="number">1</span>&gt;(t) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> TupleType&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">tuple_print_helper</span>&lt;</span><span class="number">0</span>, TupleType&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">tuple_print_helper</span>(<span class="keyword">const</span> TupleType&amp;) &#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tuple_print</span><span class="params">(<span class="keyword">const</span> T&amp; t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tuple_print_helper&lt;tuple_size&lt;T&gt;::value, T&gt; <span class="built_in">tph</span>(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> t1 = <span class="built_in">make_tuple</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3.56</span>, <span class="string">&quot;test&quot;</span>, <span class="number">1.1f</span>);</span><br><span class="line"><span class="built_in">tuple_print</span>(t1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;题目要求：假设有一个Grid类，定义了一个网格的的大小（mWidth, mHeight），每个网格对于一个值（value）,这个值可能是int,double,string等类型；存储整个网格的数据结构可以是vector,可以</summary>
      
    
    
    
    <category term="C++高级编程" scheme="http://example.com/categories/C-%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="c++ 模板编程 元编程 变长参数模板" scheme="http://example.com/tags/c-%E6%A8%A1%E6%9D%BF%E7%BC%96%E7%A8%8B-%E5%85%83%E7%BC%96%E7%A8%8B-%E5%8F%98%E9%95%BF%E5%8F%82%E6%95%B0%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>C++高级编程----扩展STL</title>
    <link href="http://example.com/2021/12/02/C++%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B----%E6%89%A9%E5%B1%95STL/"/>
    <id>http://example.com/2021/12/02/C++%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B----%E6%89%A9%E5%B1%95STL/</id>
    <published>2021-12-02T14:39:13.000Z</published>
    <updated>2022-01-20T12:49:49.954Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>题目要求：编写一个遵循一般STL规则的基本容器hash_map，考虑类模板编程方式，支持多种数据格式。</p><blockquote><p>分析：<br>1）hash_map接口支持用户传入自定义的hash函数和hash桶的数目，在用户不知道的情况下提供默认的hash函数和桶数目；</p><p>2）数据结构分析：hash_map支持myHash[key] = value能在常数时间内完成，每一个key可能有一系列value，value由（key,value）组成，因此考虑数据结构为:vector&lt;list&lt;pair&lt;key, value&gt;&gt;&gt;;</p><p>3）hash函数定义hash算法，支持operator()，返回hash后的值（支持不同指针hash到同一值，考虑模板特例化）；<br>4) hash_map支持按key查询和删除，按（key, value）插入，支持operator[]；</p><p>5）考虑与STL名称空间分离，定义自己的namespace并考虑模板编程，实现方法声明和方法实现隔离(遵从Google C++编程规范，对于模板类编程使用.inl后缀实现隔离)；</p></blockquote><p>头文件定义：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hash_map.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> HASH_MAP_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HASH_MAP_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> ProCpp&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// part 1: define hash function</span></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">hash</span>&#123;</span></span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">            <span class="function"><span class="keyword">size_t</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">const</span> T&amp; key)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//template specialization</span></span><br><span class="line">    <span class="keyword">template</span>&lt;&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">hash</span>&lt;</span>std::string&gt;&#123;</span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">            <span class="function"><span class="keyword">size_t</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">const</span> std::string&amp; key)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// part 2: define hash_map data struction and operation</span></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> T, <span class="keyword">typename</span> Compare = std::equal_to&lt;Key&gt;, <span class="keyword">typename</span> Hash = hash&lt;Key&gt;&gt;</span><br><span class="line">    class hash_map&#123;</span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">            <span class="keyword">using</span> key_type = Key;</span><br><span class="line">            <span class="keyword">using</span> mapped_type = T;</span><br><span class="line">            <span class="keyword">using</span> value_type = std::pair&lt;Key, T&gt;;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// define constructor</span></span><br><span class="line">            <span class="function"><span class="keyword">explicit</span> <span class="title">hash_map</span><span class="params">(<span class="keyword">const</span> Compare&amp; comp = Compare(), <span class="keyword">size_t</span> numBuckets = <span class="number">101</span>, <span class="keyword">const</span> Hash&amp; hash = Hash())</span></span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// search operation</span></span><br><span class="line">            <span class="function">value_type* <span class="title">find</span><span class="params">(<span class="keyword">const</span> key_type&amp; key)</span></span>;</span><br><span class="line">            <span class="function"><span class="keyword">const</span> value_type* <span class="title">find</span><span class="params">(<span class="keyword">const</span> key_type&amp; key)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// insert operation: insert (key, value) into hash map</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> value_type&amp; value)</span></span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// erase operation: erase key from hash map</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">const</span> key_type&amp; key)</span></span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// index operation: search (key, value) pair by key</span></span><br><span class="line">            T&amp; <span class="keyword">operator</span>[] (<span class="keyword">const</span> key_type&amp; key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span>:</span><br><span class="line">            <span class="keyword">using</span> ListType = std::list&lt;value_type&gt;;</span><br><span class="line">            std::vector&lt;ListType&gt; mBuckets;</span><br><span class="line">            <span class="keyword">size_t</span> mSize;</span><br><span class="line">            Compare mComp;</span><br><span class="line">            Hash mHash;</span><br><span class="line">            <span class="function"><span class="keyword">typename</span> ListType::iterator <span class="title">findElement</span><span class="params">(<span class="keyword">const</span> key_type&amp; key, <span class="keyword">size_t</span>&amp; bucket)</span></span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;hash_map.inl&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>方法实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hash_map.inl</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> ProCpp&#123;</span><br><span class="line">    <span class="comment">// part 1: template hash class</span></span><br><span class="line">    <span class="comment">// hash (key) -&gt; value</span></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="keyword">size_t</span> hash&lt;T&gt;::<span class="built_in"><span class="keyword">operator</span></span>() (<span class="keyword">const</span> T&amp; key) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">size_t</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">size_t</span> bytes = <span class="built_in"><span class="keyword">sizeof</span></span>(key);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i = <span class="number">0</span>; i &lt; bytes; i++)&#123;</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">char</span> b = *((<span class="keyword">unsigned</span> <span class="keyword">char</span>*)&amp;key + i);</span><br><span class="line">            res += b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// template specialization: hash(string) -&gt; value</span></span><br><span class="line">    <span class="keyword">size_t</span> hash&lt;std::string&gt;::<span class="built_in"><span class="keyword">operator</span></span>() (<span class="keyword">const</span> std::string&amp; key) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">size_t</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; key.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            res += (<span class="keyword">unsigned</span> <span class="keyword">char</span>) key[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// part 2: hash map operation</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// hash map constructor</span></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> T, <span class="keyword">typename</span> Compare, <span class="keyword">typename</span> Hash&gt;</span><br><span class="line">    hash_map&lt;Key, T, Compare, Hash&gt;::<span class="built_in">hash_map</span>(<span class="keyword">const</span> Compare&amp; comp, <span class="keyword">size_t</span> numBuckets, <span class="keyword">const</span> Hash&amp; hash):<span class="built_in">mSize</span>(<span class="number">0</span>), <span class="built_in">mComp</span>(comp), <span class="built_in">mHash</span>(hash)&#123;</span><br><span class="line">        <span class="keyword">if</span>(numBuckets == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">invalid_argument</span>(<span class="string">&quot;Number of buckets must be positve !&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mBuckets.<span class="built_in">resize</span>(numBuckets);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> T, <span class="keyword">typename</span> Compare, <span class="keyword">typename</span> Hash&gt;</span><br><span class="line">    <span class="keyword">typename</span> hash_map&lt;Key, T, Compare, Hash&gt;::value_type* hash_map&lt;Key, T, Compare, Hash&gt;::<span class="built_in">find</span>(<span class="keyword">const</span> key_type&amp; key)&#123;</span><br><span class="line">        <span class="keyword">size_t</span> bucket;</span><br><span class="line">        <span class="keyword">auto</span> it = <span class="built_in">findElement</span>(key, bucket);</span><br><span class="line">        <span class="keyword">if</span>(it == mBuckets[bucket].<span class="built_in">end</span>())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &amp;(*it);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> T, <span class="keyword">typename</span> Compare, <span class="keyword">typename</span> Hash&gt;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">typename</span> hash_map&lt;Key, T, Compare, Hash&gt;::value_type* hash_map&lt;Key, T, Compare, Hash&gt;::<span class="built_in">find</span>(<span class="keyword">const</span> key_type&amp; key) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">const_cast</span>&lt;hash_map&lt;Key, T, Compare, Hash&gt;*&gt; (<span class="keyword">this</span>)-&gt;<span class="built_in">find</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> T, <span class="keyword">typename</span> Compare, <span class="keyword">typename</span> Hash&gt;</span><br><span class="line">    <span class="keyword">void</span> hash_map&lt;Key, T, Compare, Hash&gt;::<span class="built_in">insert</span>(<span class="keyword">const</span> value_type&amp; value)&#123;</span><br><span class="line">        <span class="keyword">size_t</span> bucket;</span><br><span class="line">        <span class="keyword">auto</span> it = <span class="built_in">findElement</span>(value.first, bucket);</span><br><span class="line">        <span class="keyword">if</span>(it == mBuckets[bucket].<span class="built_in">end</span>())&#123;</span><br><span class="line">            mBuckets[bucket].<span class="built_in">push_back</span>(value);</span><br><span class="line">            mSize++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> T, <span class="keyword">typename</span> Compare, <span class="keyword">typename</span> Hash&gt;</span><br><span class="line">    <span class="keyword">void</span> hash_map&lt;Key, T, Compare, Hash&gt;::<span class="built_in">erase</span>(<span class="keyword">const</span> key_type&amp; key)&#123;</span><br><span class="line">        <span class="keyword">size_t</span> bucket;</span><br><span class="line">        <span class="keyword">auto</span> it = <span class="built_in">findElement</span>(key, bucket);</span><br><span class="line">        <span class="keyword">if</span>(it != mBuckets[bucket].<span class="built_in">end</span>())&#123;</span><br><span class="line">            mBuckets[bucket].<span class="built_in">erase</span>(it);</span><br><span class="line">            mSize--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> T, <span class="keyword">typename</span> Compare, <span class="keyword">typename</span> Hash&gt;</span><br><span class="line">    T&amp; hash_map&lt;Key, T, Compare, Hash&gt;::<span class="keyword">operator</span>[] (<span class="keyword">const</span> key_type&amp; key)&#123;</span><br><span class="line">        <span class="keyword">size_t</span> bucket;</span><br><span class="line">        <span class="keyword">auto</span> it = <span class="built_in">find</span>(key);</span><br><span class="line">        <span class="keyword">if</span>(it == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="built_in">insert</span>(std::<span class="built_in">make_pair</span>(key, <span class="built_in">T</span>()));</span><br><span class="line">            it = <span class="built_in">find</span>(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> it -&gt; second;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Key, <span class="keyword">typename</span> T, <span class="keyword">typename</span> Compare, <span class="keyword">typename</span> Hash&gt;</span><br><span class="line">    <span class="keyword">typename</span> hash_map&lt;Key, T, Compare, Hash&gt;::ListType::iterator hash_map&lt;Key, T, Compare, Hash&gt;::<span class="built_in">findElement</span>(<span class="keyword">const</span> key_type&amp; key, <span class="keyword">size_t</span>&amp; bucket)&#123;</span><br><span class="line">        bucket = <span class="built_in">mHash</span>(key) % mBuckets.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it = mBuckets[bucket].<span class="built_in">begin</span>(); it != mBuckets[bucket].<span class="built_in">end</span>(); ++it)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">mComp</span>(it -&gt; first, key))&#123;</span><br><span class="line">                <span class="keyword">return</span> it;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mBuckets[bucket].<span class="built_in">end</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试案例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;hash_map.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ProCpp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    hash_map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; myHash;</span><br><span class="line">    myHash.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">4</span>, <span class="number">40</span>));</span><br><span class="line">    myHash.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">4</span>, <span class="number">50</span>));</span><br><span class="line">    myHash.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">6</span>, <span class="number">60</span>));</span><br><span class="line">    <span class="keyword">int</span> key = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">auto</span> found = myHash.<span class="built_in">find</span>(key);</span><br><span class="line">    <span class="keyword">if</span>(found != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;find map (&quot;</span> &lt;&lt; key &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; found -&gt; second &lt;&lt; <span class="string">&quot;)&quot;</span>&lt;&lt; endl;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;not found (key, value) pair &quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    myHash[<span class="number">4</span>] = <span class="number">35</span>;</span><br><span class="line">    myHash[<span class="number">4</span>] = <span class="number">60</span>;  </span><br><span class="line">    found = myHash.<span class="built_in">find</span>(key);</span><br><span class="line">    <span class="keyword">if</span>(found != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;find map (&quot;</span> &lt;&lt; key &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; found -&gt; second &lt;&lt; <span class="string">&quot;)&quot;</span>&lt;&lt; endl;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;not found (key, value) pair &quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    myHash.<span class="built_in">erase</span>(key);</span><br><span class="line">    found = myHash.<span class="built_in">find</span>(key);</span><br><span class="line">    <span class="keyword">if</span>(found != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;find map (&quot;</span> &lt;&lt; key &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; found -&gt; second &lt;&lt; <span class="string">&quot;)&quot;</span>&lt;&lt; endl;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;not found (key, value) pair &quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;题目要求：编写一个遵循一般STL规则的基本容器hash_map，考虑类模板编程方式，支持多种数据格式。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;分析：&lt;br&gt;1）hash_map接口支持用户传入自定义的hash函数和hash</summary>
      
    
    
    
    <category term="C++高级编程" scheme="http://example.com/categories/C-%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="c++ 哈希算法 数据结构 STL" scheme="http://example.com/tags/c-%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-STL/"/>
    
  </entry>
  
  <entry>
    <title>视觉十四讲之代码编译</title>
    <link href="http://example.com/2021/11/08/%E8%A7%86%E8%A7%89%E5%8D%81%E5%9B%9B%E8%AE%B2%E4%B9%8B%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91/"/>
    <id>http://example.com/2021/11/08/%E8%A7%86%E8%A7%89%E5%8D%81%E5%9B%9B%E8%AE%B2%E4%B9%8B%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91/</id>
    <published>2021-11-08T01:56:20.000Z</published>
    <updated>2022-01-20T12:49:49.954Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><blockquote><p>题目学习了书籍《视觉十四讲》，看完了高博的<a href="https://www.bilibili.com/video/BV16t411g7FR?p=1">B站视频课程</a>，完成了书籍对应的代码阅读和调试工作，对个人的能力培养和算法理解有了较大的收获，上传了完全调试通过的代码到github上<a href="https://github.com/GinkgoX/slam_14_chapters.git">slam_14_chapters</a>。</p></blockquote><p>代码编译部分介绍：<br>系统环境：Ubuntu20.04<br>QT版本： QT5<br>G2O版本：最新版<br>OpenCV：4.5<br>实验过程中的CMakeList.txt中的部分Bug已修复<br>代码：<a href="https://github.com/GinkgoX/slam_14_chapters.git">slam_14_chapters</a><br>参考博客：<a href="https://blog.csdn.net/ncepu_Chen/article/details/105322585">《视觉SLAM十四讲》笔记摘抄</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;blockquote&gt;
&lt;p&gt;题目学习了书籍《视觉十四讲》，看完了高博的&lt;a href=&quot;https://www.bilibili.com/video/BV16t411g7FR?p=1&quot;&gt;B站视频课程&lt;/a&gt;，完成了书籍对应的代</summary>
      
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="自动驾驶 计算机视觉 人工智能" scheme="http://example.com/tags/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6-%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode前缀和问题集锦</title>
    <link href="http://example.com/2021/10/12/Leetcode%E5%89%8D%E7%BC%80%E5%92%8C%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/"/>
    <id>http://example.com/2021/10/12/Leetcode%E5%89%8D%E7%BC%80%E5%92%8C%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/</id>
    <published>2021-10-12T11:18:24.000Z</published>
    <updated>2022-01-20T12:49:49.954Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>相关题目<br><a href="https://leetcode.com/problems/subarray-sum-equals-k/">leetcode 560 subarraySum</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">subarraySum</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">      unordered_map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; hash;</span><br><span class="line">      <span class="keyword">int</span> count = <span class="number">0</span>, psum = <span class="number">0</span>;</span><br><span class="line">      hash[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">          psum += nums[i];</span><br><span class="line">          count += hash[psum - k];</span><br><span class="line">          hash[psum]++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> count;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.com/problems/subarray-sums-divisible-by-k/">leetcode 974 subarraysDivByK</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">subarraysDivByK</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> ans = <span class="number">0</span>, n = nums.<span class="built_in">size</span>(), curSum = <span class="number">0</span>;</span><br><span class="line"> unordered_map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; hash;</span><br><span class="line"> hash[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">int</span> mod;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">     curSum += nums[i];</span><br><span class="line">     mod = (curSum % k + k) % k;</span><br><span class="line">     ans += hash[mod];</span><br><span class="line">     hash[mod]++;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.com/problems/count-number-of-nice-subarrays/">leetcode 1248 numberOfSubarrays</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">numberOfSubarrays</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">      unordered_map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; m;</span><br><span class="line">      <span class="keyword">const</span> <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">      <span class="keyword">int</span> rst = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">int</span> acc = <span class="number">0</span>;</span><br><span class="line">      m[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">          acc += (nums[i]%<span class="number">2</span>);</span><br><span class="line">          rst += m[acc-k];</span><br><span class="line">          m[acc]++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> rst;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.com/problems/sum-of-all-odd-length-subarrays/">leetcode 1588 sumOddLengthSubarrays</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sumOddLengthSubarrays</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> ans = <span class="number">0</span>, n = nums.<span class="built_in">size</span>();</span><br><span class="line">      <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">preSum</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">          preSum[i+<span class="number">1</span>] = preSum[i] + nums[i];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j+=<span class="number">2</span>)&#123;</span><br><span class="line">              ans += preSum[j] - preSum[i];</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;相关题目&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/subarray-sum-equals-k/&quot;&gt;leetcode 560 subarraySum&lt;/a&gt;&lt;/p&gt;
&lt;figure </summary>
      
    
    
    
    <category term="LeetCode" scheme="http://example.com/categories/LeetCode/"/>
    
    
    <category term="leetcode 算法" scheme="http://example.com/tags/leetcode-%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode排列组合问题集锦</title>
    <link href="http://example.com/2021/10/06/Leetcode%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/"/>
    <id>http://example.com/2021/10/06/Leetcode%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/</id>
    <published>2021-10-06T03:18:04.000Z</published>
    <updated>2022-01-20T12:49:49.954Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>相关题目：<br><a href="https://leetcode.com/problems/next-permutation/">leetcode 31 Next Permutation</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">nextPermutation</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>(), k, l;</span><br><span class="line">        <span class="keyword">for</span>(k = n<span class="number">-2</span>; k &gt;= <span class="number">0</span>; k--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[k] &lt; nums[k+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(l = n - <span class="number">1</span>; l &gt; k; l--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[l] &gt; nums[k])&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">swap</span>(nums[k], nums[l]);</span><br><span class="line">            <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>() + k + <span class="number">1</span>, nums.<span class="built_in">end</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.com/problems/permutations/">leetcode 46 permutations</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">permute</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; ans, vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> idx)</span></span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(idx &gt;= nums.<span class="built_in">size</span>())&#123;</span><br><span class="line"> ans.<span class="built_in">push_back</span>(nums);</span><br><span class="line"> <span class="keyword">return</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i = idx; i &lt; nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line"> <span class="built_in">swap</span>(nums[i], nums[idx]);</span><br><span class="line"> <span class="built_in">permute</span>(ans, nums, idx + <span class="number">1</span>);</span><br><span class="line"> <span class="built_in">swap</span>(nums[i], nums[idx]);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">permute</span>(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)&#123;</span><br><span class="line"> vector&lt;vector&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"> permute(ans, nums, 0);</span><br><span class="line"> <span class="keyword">return</span> ans;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.com/problems/permutations-ii/">leetcode 47 permutationsII</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">permute</span><span class="params">(set&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; temp, vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> idx)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(idx &gt;= nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">temp.<span class="built_in">push_back</span>(nums);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = idx; i &lt; nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line"><span class="built_in">swap</span>(nums[i], nums[idx]);</span><br><span class="line"><span class="built_in">permute</span>(temp, nums, idx + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">swap</span>(nums[i], nums[idx]);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">permute</span>(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)&#123;</span><br><span class="line">set&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; temp;</span><br><span class="line"><span class="built_in">permute</span>(temp, ans, <span class="number">0</span>);</span><br><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i:temp)&#123;</span><br><span class="line">ans.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.com/problems/permutation-sequence/">leetcode 60 permutation sequence</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">string <span class="title">permute</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">string ans = “”;</span><br><span class="line"><span class="function">vector&lt;<span class="keyword">char</span>&gt; <span class="title">temp</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">temp[i] = (i + <span class="number">1</span>) + ‘<span class="number">0</span>’;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt; <span class="number">0</span>; i—)&#123;</span><br><span class="line"><span class="keyword">int</span> factor = <span class="built_in">round</span>(<span class="built_in">tgamma</span>(i));</span><br><span class="line"><span class="keyword">int</span> idx = k / factor;</span><br><span class="line">k = k % factor;</span><br><span class="line">ans += temp[idx];</span><br><span class="line">temp.<span class="built_in">earse</span>(temp.<span class="built_in">begin</span>() + idx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href>leetcode 1850 minimum adjacent swap</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMinSwaps</span><span class="params">(string s, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        string str = s;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">        <span class="built_in">next_permutation</span>(<span class="built_in">begin</span>(s), <span class="built_in">end</span>(s));</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="built_in">next_permutation</span>(<span class="built_in">begin</span>(s), <span class="built_in">end</span>(s));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] != str[i]) &#123;</span><br><span class="line">                <span class="keyword">int</span> pos = s.<span class="built_in">find</span>(str[i], i);</span><br><span class="line">                <span class="keyword">while</span>(pos &gt; i) &#123;</span><br><span class="line">                    <span class="built_in">swap</span>(s[pos], s[pos - <span class="number">1</span>]);</span><br><span class="line">                    count++;</span><br><span class="line">                    pos--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;相关题目：&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/next-permutation/&quot;&gt;leetcode 31 Next Permutation&lt;/a&gt;&lt;/p&gt;
&lt;figure </summary>
      
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="LeetCode leetcode 算法 排列组合" scheme="http://example.com/tags/LeetCode-leetcode-%E7%AE%97%E6%B3%95-%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>FastAPI+TensorFlow1.14常见错误</title>
    <link href="http://example.com/2021/09/04/FastAPI+TensorFlow1.14%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/"/>
    <id>http://example.com/2021/09/04/FastAPI+TensorFlow1.14%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/</id>
    <published>2021-09-04T08:03:19.000Z</published>
    <updated>2022-01-20T12:49:49.954Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><strong>背景：</strong><br>在用keras/tensorflow训练好模型后，使用fastAPI部署服务时的两个常见错误</p><p>错误1：<code>ValueError: Tensor Tensor(“dense_1/Softmax:0”, shape=(?, 5), dtype=float32) is not an element of this graph.</code></p><p>错误2：<code>tensorflow.python.framework.errors_impl.FailedPreconditionError: Attempting to use uninitialized val</code></p><p>解决方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.python.keras.backend <span class="keyword">import</span> set_session</span><br><span class="line"><span class="comment"># 解决问题1</span></span><br><span class="line">sess = tf.Session()</span><br><span class="line">graph = tf.get_default_graph()</span><br><span class="line"><span class="comment"># tf2： graph = tf.compat.v1.get_default_graph()</span></span><br><span class="line"><span class="comment"># 解决问题2</span></span><br><span class="line">set_session(sess)</span><br><span class="line">model = models.load_model(model_path)</span><br><span class="line"><span class="comment"># 每次使用有关模型请求时</span></span><br><span class="line"><span class="comment"># for each request:</span></span><br><span class="line"><span class="keyword">global</span> sess</span><br><span class="line"><span class="keyword">global</span> graph</span><br><span class="line"><span class="keyword">with</span> graph.as_default():</span><br><span class="line">    set_session(sess)</span><br><span class="line">    model.predict(...)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;strong&gt;背景：&lt;/strong&gt;&lt;br&gt;在用keras/tensorflow训练好模型后，使用fastAPI部署服务时的两个常见错误&lt;/p&gt;
&lt;p&gt;错误1：&lt;code&gt;ValueError: Tensor Tenso</summary>
      
    
    
    
    <category term="tensorflow" scheme="http://example.com/categories/tensorflow/"/>
    
    
    <category term="FastAI" scheme="http://example.com/tags/FastAI/"/>
    
  </entry>
  
  <entry>
    <title>剑指OFFER系列之62----圆圈中最后剩下的数字</title>
    <link href="http://example.com/2021/07/04/%E5%89%91%E6%8C%87OFFER%E7%B3%BB%E5%88%97%E4%B9%8B62----%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>http://example.com/2021/07/04/%E5%89%91%E6%8C%87OFFER%E7%B3%BB%E5%88%97%E4%B9%8B62----%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0%E5%AD%97/</id>
    <published>2021-07-04T14:16:39.000Z</published>
    <updated>2022-01-20T12:49:49.954Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="剑指OFFER"><a href="#剑指OFFER" class="headerlink" title="剑指OFFER"></a>剑指OFFER</h3><blockquote><p>题目描述：0,1，…, n-1这n个数字围成一圈，从0开始报数，每次从圈中删除第m个数字。求圈中最后剩下的数字。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">ListNode* next;</span><br><span class="line"><span class="built_in">ListNode</span>(): <span class="built_in">val</span>(<span class="number">-1</span>), <span class="built_in">next</span>(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line"><span class="built_in">ListNode</span>(<span class="keyword">int</span> x): <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// math method</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">joesphus</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n &lt; <span class="number">1</span> || m &lt; <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">ans = (ans + m) % i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// recurisive</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">joesphusII</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n &lt; <span class="number">1</span> || m &lt; <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">joesphusII</span>(n - <span class="number">1</span>, m) + m) % n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// recurent list</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">joesphusIII</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n &lt; <span class="number">1</span> || m &lt; <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">ListNode* head = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">ListNode* pre = head;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">ListNode* tmp = <span class="keyword">new</span> <span class="built_in">ListNode</span>(i);</span><br><span class="line">pre -&gt; next = tmp;</span><br><span class="line">pre = tmp;</span><br><span class="line">&#125;</span><br><span class="line">pre -&gt; next = head;</span><br><span class="line"><span class="keyword">while</span>(n != <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m - <span class="number">1</span>; i++)&#123;</span><br><span class="line">head = head -&gt; next;</span><br><span class="line">&#125;</span><br><span class="line">head -&gt; next = head -&gt; next -&gt; next;</span><br><span class="line">head = head -&gt; next;</span><br><span class="line">n--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head -&gt; val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h3 id=&quot;剑指OFFER&quot;&gt;&lt;a href=&quot;#剑指OFFER&quot; class=&quot;headerlink&quot; title=&quot;剑指OFFER&quot;&gt;&lt;/a&gt;剑指OFFER&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;题目描述：0,1，…, </summary>
      
    
    
    
    <category term="剑指OFFER" scheme="http://example.com/categories/%E5%89%91%E6%8C%87OFFER/"/>
    
    
    <category term="约瑟夫环 循环链表 递归" scheme="http://example.com/tags/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF-%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8-%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>剑指OFFER系列之61----扑克牌中的顺子</title>
    <link href="http://example.com/2021/07/04/%E5%89%91%E6%8C%87OFFER%E7%B3%BB%E5%88%97%E4%B9%8B61----%E6%89%91%E5%85%8B%E7%89%8C%E4%B8%AD%E7%9A%84%E9%A1%BA%E5%AD%90/"/>
    <id>http://example.com/2021/07/04/%E5%89%91%E6%8C%87OFFER%E7%B3%BB%E5%88%97%E4%B9%8B61----%E6%89%91%E5%85%8B%E7%89%8C%E4%B8%AD%E7%9A%84%E9%A1%BA%E5%AD%90/</id>
    <published>2021-07-04T09:05:46.000Z</published>
    <updated>2022-01-20T12:49:49.954Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="剑指OFFER"><a href="#剑指OFFER" class="headerlink" title="剑指OFFER"></a>剑指OFFER</h3><blockquote><p>题目描述：扑克牌中的顺子<br>从扑克牌中抽5张牌，判断是不是一个顺子， 即这5张牌是不是连续的。2~10位数字本身，A为1，J为11，Q为12， K为13，大小王可以是任意数字。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isContinus</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>()<span class="number">-1</span>; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(nums[i] == <span class="number">0</span>)&#123;</span><br><span class="line">carry++;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(nums[i] == nums[i+<span class="number">1</span>])&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">carry -= nums[i+<span class="number">1</span>] - nums[i] - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(carry &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h3 id=&quot;剑指OFFER&quot;&gt;&lt;a href=&quot;#剑指OFFER&quot; class=&quot;headerlink&quot; title=&quot;剑指OFFER&quot;&gt;&lt;/a&gt;剑指OFFER&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;题目描述：扑克牌中的顺子</summary>
      
    
    
    
    <category term="扑克牌顺子" scheme="http://example.com/categories/%E6%89%91%E5%85%8B%E7%89%8C%E9%A1%BA%E5%AD%90/"/>
    
    
    <category term="连续性判断" scheme="http://example.com/tags/%E8%BF%9E%E7%BB%AD%E6%80%A7%E5%88%A4%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>剑指OFFER系列之60----n个骰子的点数</title>
    <link href="http://example.com/2021/07/04/%E5%89%91%E6%8C%87OFFER%E7%B3%BB%E5%88%97%E4%B9%8B60----n%E4%B8%AA%E9%AA%B0%E5%AD%90%E7%9A%84%E7%82%B9%E6%95%B0/"/>
    <id>http://example.com/2021/07/04/%E5%89%91%E6%8C%87OFFER%E7%B3%BB%E5%88%97%E4%B9%8B60----n%E4%B8%AA%E9%AA%B0%E5%AD%90%E7%9A%84%E7%82%B9%E6%95%B0/</id>
    <published>2021-07-04T09:01:45.000Z</published>
    <updated>2022-01-20T12:49:49.954Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="剑指OFFER"><a href="#剑指OFFER" class="headerlink" title="剑指OFFER"></a>剑指OFFER</h3><blockquote><p>题目描述：滑动窗口的最大值<br>把n个骰子扔在地上，所有骰子朝上的一面的和为s。输入n,输出和为s的所有值的可能概率。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">double</span>&gt; <span class="title">diceProb</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="function">vector&lt;<span class="keyword">double</span>&gt; <span class="title">ans</span><span class="params">(<span class="number">5</span> * n + <span class="number">1</span>, <span class="number">1.0</span> / <span class="number">6</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="function">vector&lt;<span class="keyword">double</span>&gt; <span class="title">tmp</span><span class="params">(<span class="number">5</span> * n + <span class="number">1</span>, <span class="number">0.0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span> * i + <span class="number">1</span>; j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">6</span>; k++)&#123;</span><br><span class="line">tmp[j + k] += ans[j] / <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h3 id=&quot;剑指OFFER&quot;&gt;&lt;a href=&quot;#剑指OFFER&quot; class=&quot;headerlink&quot; title=&quot;剑指OFFER&quot;&gt;&lt;/a&gt;剑指OFFER&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;题目描述：滑动窗口的最大</summary>
      
    
    
    
    <category term="剑指OFFER" scheme="http://example.com/categories/%E5%89%91%E6%8C%87OFFER/"/>
    
    
    <category term="数学期望 掷骰子" scheme="http://example.com/tags/%E6%95%B0%E5%AD%A6%E6%9C%9F%E6%9C%9B-%E6%8E%B7%E9%AA%B0%E5%AD%90/"/>
    
  </entry>
  
</feed>
