<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-01-10T13:26:29.807Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OpenCV----YOLOv3目标检测</title>
    <link href="http://example.com/2022/01/10/opencv/"/>
    <id>http://example.com/2022/01/10/opencv/</id>
    <published>2022-01-10T12:50:21.000Z</published>
    <updated>2022-01-10T13:26:29.807Z</updated>
    
    <content type="html"><![CDATA[<p>题目要求：了解opencv的DNN库，给定一张自然场景图片，使用训练好的yolov3模型，进行目标检测结果输出。</p><blockquote><p>分析：<br>1）opencv的DNN模块集成了很多深度学习模型，包括人脸检测、图像分类、分割、目标检测等，集成了Pytorch、tensorflow、paddlepaddle等模型框架（参看代码库<a href="https://github.com/opencv/opencv/tree/master/samples/dnn">OpenCV/dnn</a>）<br>2）深度学习推理模型一般步骤：加载模型，包括配置文件和权重文件；输入图像预处理，转换成模型可接受的文件类型和尺寸；模型预测后处理，对于目标检测，主要是NMS后处理方法；</p></blockquote><ul><li>结果展示：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">./bin/yolov3Predict -h</span><br><span class="line"><span class="comment">#######</span></span><br><span class="line">Usage: yolov3Predict [params] image confThreshold nmsThresshold </span><br><span class="line"></span><br><span class="line">        -?, -h, --<span class="built_in">help</span>, --usage (value:<span class="literal">true</span>)</span><br><span class="line">                opecv based deep learining demo</span><br><span class="line"></span><br><span class="line">        image</span><br><span class="line">                Image to process</span><br><span class="line">        confThreshold (value:0.5)</span><br><span class="line">                confidence threshold, default 0.5</span><br><span class="line">        nmsThresshold (value:0.3)</span><br><span class="line">                nms threshold, default 0.3</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/yolov3Predict data/test.jpg</span><br></pre></td></tr></table></figure><p><img src="figs/output.jpg" alt="output"></p><ul><li>代码示例：</li></ul><p>yolov3Predict.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//yolov3Predict.cpp</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@File          :yolov3Predict.cpp</span></span><br><span class="line"><span class="comment">@Description:  :</span></span><br><span class="line"><span class="comment">@Date          :2022/1/9 20:02:10</span></span><br><span class="line"><span class="comment">@Author        :</span></span><br><span class="line"><span class="comment">@version       :1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/dnn.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> dnn;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;utils.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// define command parse</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">parseParam</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv, <span class="keyword">const</span> <span class="keyword">char</span>* keys, Mat&amp; img, <span class="keyword">float</span>&amp; confThreshold, <span class="keyword">float</span>&amp; nmsThresshold)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : command parse function</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        int argc : main argc</span></span><br><span class="line"><span class="comment">        char** argv: main argv</span></span><br><span class="line"><span class="comment">        keys : command parse keys</span></span><br><span class="line"><span class="comment">        img : the image to read</span></span><br><span class="line"><span class="comment">        confThreshold : confidence threshold setting</span></span><br><span class="line"><span class="comment">        nmsThresshold : nms threshold setting</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        (ref returns)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function">CommandLineParser <span class="title">parser</span><span class="params">(argc, argv, keys)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(parser.<span class="built_in">has</span>(<span class="string">&quot;help&quot;</span>))&#123;</span><br><span class="line">        parser.<span class="built_in">printMessage</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// check commoand format</span></span><br><span class="line">    <span class="keyword">if</span>(!parser.<span class="built_in">check</span>())&#123;</span><br><span class="line">        parser.<span class="built_in">printErrors</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// get image</span></span><br><span class="line">    String imgFile = parser.get&lt;String&gt;(<span class="number">0</span>);</span><br><span class="line">    img = <span class="built_in">imread</span>(imgFile);</span><br><span class="line">    <span class="keyword">if</span>(img.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;error to load test image. &quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// get confidence threshold</span></span><br><span class="line">    confThreshold = parser.get&lt;<span class="keyword">float</span>&gt;(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// get nms threshold</span></span><br><span class="line">    nmsThresshold = parser.get&lt;<span class="keyword">float</span>&gt;(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* keys  = &#123;</span><br><span class="line">        <span class="string">&quot;&#123;help h usage ? | | opecv based deep learining demo&#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;@image | | Image to process&#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;@confThreshold | 0.5 | confidence threshold, default 0.5&#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;&#123;@nmsThresshold | 0.3 | nms threshold, default 0.3&#125;&quot;</span>&#125;;</span><br><span class="line">    Mat img, blob;</span><br><span class="line">    <span class="keyword">float</span> confThreshold, nmsThresshold;</span><br><span class="line">    <span class="comment">// update data</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">parseParam</span>(argc, argv, keys, img, confThreshold, nmsThresshold))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// load model</span></span><br><span class="line">    string classFile = <span class="string">&quot;model/coco.names&quot;</span>;</span><br><span class="line">    <span class="function">ifstream <span class="title">fin</span><span class="params">(classFile.c_str())</span></span>;</span><br><span class="line">    string line;</span><br><span class="line">    vector&lt;string&gt; classes;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">getline</span>(fin, line))&#123;</span><br><span class="line">        classes.<span class="built_in">push_back</span>(line);</span><br><span class="line">    &#125;</span><br><span class="line">    string modelCfg = <span class="string">&quot;model/yolov3.cfg&quot;</span>;</span><br><span class="line">    string modelWeg = <span class="string">&quot;model/yolov3.weights&quot;</span>;</span><br><span class="line">    Net yolov3 = <span class="built_in">readNetFromDarknet</span>(modelCfg, modelWeg);</span><br><span class="line">    yolov3.<span class="built_in">setPreferableBackend</span>(DNN_BACKEND_OPENCV);</span><br><span class="line">    yolov3.<span class="built_in">setPreferableTarget</span>(DNN_TARGET_CPU);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// convert image to blob format</span></span><br><span class="line">    <span class="built_in">blobFromImage</span>(img, blob, <span class="number">1</span>/<span class="number">255.0</span>, <span class="built_in">Size</span>(<span class="number">416</span>, <span class="number">416</span>), <span class="built_in">Scalar</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    yolov3.<span class="built_in">setInput</span>(blob);</span><br><span class="line">    vector&lt;Mat&gt; outputs;</span><br><span class="line">    <span class="comment">// model predict</span></span><br><span class="line">    yolov3.forward(outputs, <span class="built_in">getoutputsName</span>(yolov3));</span><br><span class="line">    <span class="comment">// post process (nms)</span></span><br><span class="line">    <span class="built_in">postProcess</span>(img, outputs, classes, confThreshold, nmsThresshold);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// time cost</span></span><br><span class="line">    vector&lt;<span class="keyword">double</span>&gt; layersTime;</span><br><span class="line">    <span class="keyword">double</span> freq = <span class="built_in">getTickFrequency</span>() / <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">double</span> t = yolov3.<span class="built_in">getPerfProfile</span>(layersTime) / freq;</span><br><span class="line">    string label = format(<span class="string">&quot;time consuming: %.2f&quot;</span>, t);</span><br><span class="line">    cout &lt;&lt; label &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;input&quot;</span>, img);</span><br><span class="line">    <span class="built_in">imwrite</span>(<span class="string">&quot;output.jpg&quot;</span>, img);</span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>utils.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@File          :utils.cpp</span></span><br><span class="line"><span class="comment">@Description:  :</span></span><br><span class="line"><span class="comment">@Date          :2022/1/9 20:11:10</span></span><br><span class="line"><span class="comment">@Author        :</span></span><br><span class="line"><span class="comment">@version       :1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/core/utility.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/dnn.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> dnn;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;utils.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">Scalar <span class="title">randColor</span><span class="params">(RNG&amp; rng)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : generate randow color</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        rng : random number generator object</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        Sacalar() : BGR scalar</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">auto</span> iColor = (<span class="keyword">unsigned</span>)rng;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Scalar</span>(iColor&amp;<span class="number">255</span>, (iColor &gt;&gt; <span class="number">8</span>)&amp;<span class="number">255</span>, (iColor &gt;&gt; <span class="number">16</span>)&amp;<span class="number">255</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get model output name</span></span><br><span class="line"><span class="function">vector&lt;string&gt; <span class="title">getoutputsName</span><span class="params">(Net&amp; net)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : get model outputs name</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        Net : deep learning model</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        names : model output names</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">static</span> vector&lt;string&gt; names;</span><br><span class="line">    <span class="keyword">if</span>(names.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="comment">// get output layer idx</span></span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; outLayers = net.<span class="built_in">getUnconnectedOutLayers</span>();</span><br><span class="line">        <span class="comment">// get all namenames</span></span><br><span class="line">        vector&lt;string&gt; layersName = net.<span class="built_in">getLayerNames</span>();</span><br><span class="line">        names.<span class="built_in">resize</span>(outLayers.<span class="built_in">size</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; outLayers.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            names[i] = layersName[outLayers[i] - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> names;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// draw prdict result on image</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawPred</span><span class="params">(vector&lt;string&gt; classes, <span class="keyword">int</span> classId, <span class="keyword">float</span> conf, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom, Mat&amp; frame)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : drop boxes and confidence on frame</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        classes : the total classes list</span></span><br><span class="line"><span class="comment">        classId : the predicted class id</span></span><br><span class="line"><span class="comment">        conf : predicted confidence</span></span><br><span class="line"><span class="comment">        left : left location</span></span><br><span class="line"><span class="comment">        top : top locatioin</span></span><br><span class="line"><span class="comment">        right : right location</span></span><br><span class="line"><span class="comment">        bottom : bottom location</span></span><br><span class="line"><span class="comment">        frame : the image to draw</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        (ref return)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// draw rectanle for object detected</span></span><br><span class="line">    <span class="built_in">rectangle</span>(frame, <span class="built_in">Point</span>(left, top), <span class="built_in">Point</span>(right, bottom), <span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// set rectangle for label show</span></span><br><span class="line">    string conf_label = format(<span class="string">&quot;%.2f&quot;</span>, conf);</span><br><span class="line">    string label = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(!classes.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        label = classes[classId] + <span class="string">&quot; : &quot;</span> + conf_label;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> baseLine;</span><br><span class="line">    Size labelSize = <span class="built_in">getTextSize</span>(label, FONT_HERSHEY_SIMPLEX, <span class="number">0.5</span>, <span class="number">1</span>, &amp;baseLine);</span><br><span class="line">    top = <span class="built_in">max</span>(top, labelSize.height);</span><br><span class="line">    <span class="built_in">rectangle</span>(frame, <span class="built_in">Point</span>(left, top - labelSize.height), <span class="built_in">Point</span>(left + labelSize.width, top+baseLine), <span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), FILLED);</span><br><span class="line">    <span class="comment">// put label text on image</span></span><br><span class="line">    <span class="built_in">putText</span>(frame, label, <span class="built_in">Point</span>(left, top), FONT_HERSHEY_SIMPLEX, <span class="number">0.5</span>, <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">1</span>, LINE_AA);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// post process (NMS) for object detection</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postProcess</span><span class="params">(Mat&amp; frame, vector&lt;Mat&gt;&amp; outs, vector&lt;string&gt; classes, <span class="keyword">float</span> confThreshold, <span class="keyword">float</span> nmsThresshold)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @description  : post process predict result to get suitable box to display</span></span><br><span class="line"><span class="comment">    @param  : </span></span><br><span class="line"><span class="comment">        frame : image to process and return</span></span><br><span class="line"><span class="comment">        outs : predicts result</span></span><br><span class="line"><span class="comment">        classes : the total classes list</span></span><br><span class="line"><span class="comment">        confThreshold : confidence threshold setting</span></span><br><span class="line"><span class="comment">        nmsThresshold : nms threshold setting</span></span><br><span class="line"><span class="comment">    @Returns  : </span></span><br><span class="line"><span class="comment">        (ref return)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// get classId, confidence and boxes</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; classIds;</span><br><span class="line">    vector&lt;<span class="keyword">float</span>&gt; confs;</span><br><span class="line">    vector&lt;Rect&gt; boxes;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; outs.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="keyword">float</span>* data = (<span class="keyword">float</span>*) outs[i].data;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; outs[i].rows; j++, data += outs[i].cols)&#123;</span><br><span class="line">            <span class="comment">// get socres for detectd class and scores</span></span><br><span class="line">            Mat scores = outs[i].<span class="built_in">row</span>(j).<span class="built_in">colRange</span>(<span class="number">5</span>, outs[i].cols);</span><br><span class="line">            Point classIdPoint;</span><br><span class="line">            <span class="keyword">double</span> conf;</span><br><span class="line">            <span class="comment">// get min max value in socores with idx</span></span><br><span class="line">            <span class="built_in">minMaxLoc</span>(scores, <span class="number">0</span>, &amp;conf, <span class="number">0</span>, &amp;classIdPoint);</span><br><span class="line">            <span class="comment">// filter too small confidence</span></span><br><span class="line">            <span class="keyword">if</span>(conf &gt; confThreshold)&#123;</span><br><span class="line">                <span class="keyword">int</span> x = (<span class="keyword">int</span>) (data[<span class="number">0</span>]*frame.cols);</span><br><span class="line">                <span class="keyword">int</span> y = (<span class="keyword">int</span>) (data[<span class="number">1</span>]*frame.rows);</span><br><span class="line">                <span class="keyword">int</span> w = (<span class="keyword">int</span>) (data[<span class="number">2</span>]*frame.cols);</span><br><span class="line">                <span class="keyword">int</span> h = (<span class="keyword">int</span>) (data[<span class="number">3</span>]*frame.rows);</span><br><span class="line">                <span class="keyword">int</span> left = x - w / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">int</span> top = y - h / <span class="number">2</span>;</span><br><span class="line">                classIds.<span class="built_in">push_back</span>(classIdPoint.x);</span><br><span class="line">                confs.<span class="built_in">push_back</span>((<span class="keyword">float</span>)conf);</span><br><span class="line">                boxes.<span class="built_in">push_back</span>(<span class="built_in">Rect</span>(left, top, w, h));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// NMS operation</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; idxs;</span><br><span class="line">    <span class="built_in">NMSBoxes</span>(boxes, confs, confThreshold, nmsThresshold, idxs);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; idxs.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> idx = idxs[i];</span><br><span class="line">        Rect box = boxes[idx];</span><br><span class="line">        <span class="built_in">drawPred</span>(classes, classIds[idx], confs[idx], box.x, box.y, box.x+box.width, box.y+box.height, frame);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目要求：了解opencv的DNN库，给定一张自然场景图片，使用训练好的yolov3模型，进行目标检测结果输出。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;分析：&lt;br&gt;1）opencv的DNN模块集成了很多深度学习模型，包括人脸检测、图像分类、分割、目标检测等，集成了Pyt</summary>
      
    
    
    
    
    <category term="opencv" scheme="http://example.com/tags/opencv/"/>
    
    <category term="dnn" scheme="http://example.com/tags/dnn/"/>
    
    <category term="yolov3" scheme="http://example.com/tags/yolov3/"/>
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/01/10/hello-world/"/>
    <id>http://example.com/2022/01/10/hello-world/</id>
    <published>2022-01-09T23:48:43.563Z</published>
    <updated>2022-01-10T12:48:33.524Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><figure class="highlight basic"><figcaption><span>command</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
